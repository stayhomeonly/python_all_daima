2021-12-09 17:18:27,054-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-09 17:18:27,114-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-09 17:18:27,177-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-09 17:18:27,234-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-09 17:18:27,293-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-09 17:18:27,349-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-09 17:31:08,959-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-09 17:31:09,048-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-09 17:31:09,136-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-09 17:31:09,207-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-09 17:31:09,266-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-09 17:31:09,325-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-09 17:31:22,483-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-09 17:31:22,546-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-09 17:31:22,617-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-09 17:31:22,684-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-09 17:31:22,744-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-09 17:31:22,800-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-09 17:31:35,767-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-09 17:31:35,834-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-09 17:31:35,904-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-09 17:31:35,962-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-09 17:31:36,026-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-09 17:31:36,088-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-09 17:31:57,379-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-09 17:31:57,447-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-09 17:31:57,518-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-09 17:31:57,574-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-09 17:31:57,633-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-09 17:31:57,693-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-09 17:32:47,169-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-09 17:32:47,233-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-09 17:32:47,296-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-09 17:32:47,349-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-09 17:32:47,422-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-09 17:32:47,477-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-09 17:33:48,250-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-09 17:33:48,309-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-09 17:33:48,372-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-09 17:33:48,428-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-09 17:33:48,487-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-09 17:33:48,546-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-09 17:34:54,393-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-09 17:34:54,457-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-09 17:34:54,530-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-09 17:34:54,586-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-09 17:34:54,643-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-09 17:34:54,697-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-09 17:36:14,856-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-09 17:36:14,936-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-09 17:36:15,012-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-09 17:36:15,077-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-09 17:36:15,145-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-09 17:36:15,210-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-09 17:37:46,856-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-09 17:37:46,955-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-09 17:37:47,085-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-09 17:37:47,227-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-09 17:37:47,353-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-09 17:37:47,426-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-09 19:02:39,074-[test_login2.py - 41]-INFO:测试编号1，测试用例标题登陆主流程,执行成功
2021-12-09 19:29:03,140-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-09 19:29:03,215-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-09 19:29:03,280-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-09 19:29:03,347-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-09 19:29:03,406-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-09 19:29:03,460-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-09 19:30:14,382-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-09 19:30:14,452-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-09 19:30:14,507-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-09 19:30:14,562-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-09 19:30:14,619-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-09 19:30:14,679-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-09 19:37:38,805-[test_login2.py - 41]-INFO:测试案列1,测试用例标题登陆主流程,执行成功
2021-12-09 19:37:40,374-[test_login2.py - 41]-INFO:测试案列1,测试用例标题登陆主流程,执行成功
2021-12-09 19:38:04,409-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-09 19:38:04,472-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-09 19:38:04,537-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-09 19:38:04,621-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-09 19:38:04,684-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-09 19:38:04,742-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-09 19:55:45,653-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-09 19:55:45,711-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-09 19:55:45,774-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-09 19:55:45,829-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-09 19:55:45,896-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-09 19:55:45,953-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-09 19:56:26,793-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-09 19:56:26,863-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-09 19:56:26,933-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-09 19:56:26,991-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-09 19:56:27,049-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-09 19:56:27,121-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-09 19:56:33,193-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-09 19:56:33,259-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-09 19:56:33,341-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-09 19:56:33,414-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-09 19:56:33,478-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-09 19:56:33,537-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:02:29,574-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:02:29,653-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:02:29,721-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:02:29,777-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:02:29,859-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:02:29,933-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:02:50,602-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:02:50,662-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:02:50,731-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:02:50,793-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:02:50,855-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:02:50,916-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:03:20,102-[Ftest_login2.py - 41]-INFO:测试案列1,测试用例标题登陆主流程,执行成功
2021-12-10 09:03:34,638-[Ftest_login2.py - 41]-INFO:测试案列1,测试用例标题登陆主流程,执行成功
2021-12-10 09:06:47,221-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:06:47,324-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:06:47,411-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:06:47,503-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:06:47,601-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:06:47,718-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:06:56,314-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:06:56,385-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:06:56,452-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:06:56,507-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:06:56,582-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:06:56,639-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:07:16,711-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:07:16,785-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:07:16,853-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:07:16,925-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:07:16,988-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:07:17,054-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:07:28,564-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:07:28,629-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:07:28,701-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:07:28,759-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:07:28,816-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:07:28,875-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:07:52,672-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:07:52,745-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:07:52,809-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:07:52,871-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:07:52,931-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:07:52,990-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:08:27,289-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:08:27,353-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:08:27,422-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:08:27,477-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:08:27,544-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:08:27,600-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:08:41,659-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:08:41,716-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:08:41,782-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:08:41,839-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:08:41,900-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:08:41,958-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:12:46,535-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:12:46,602-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:12:46,669-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:12:46,744-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:12:46,804-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:12:46,871-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:14:07,308-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:14:07,383-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:14:07,453-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:14:07,513-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:14:07,574-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:14:07,635-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:14:49,871-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:14:49,937-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:14:50,017-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:14:50,089-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:14:50,160-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:14:50,222-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:15:44,459-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:15:44,524-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:15:44,595-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:15:44,653-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:15:44,712-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:15:44,772-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:18:46,753-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:18:46,841-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:18:46,909-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:18:46,968-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:18:47,026-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:18:47,087-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:28:39,474-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:28:39,535-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:28:39,623-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:28:39,704-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:28:39,783-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:28:39,838-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:28:58,526-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:28:58,591-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:28:58,660-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:28:58,715-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:28:58,775-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:28:58,836-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:29:05,980-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:29:06,044-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:29:06,111-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:29:06,175-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:29:06,236-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:29:06,341-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:31:22,162-[Ftest_register.py - 53]-INFO:测试编号1,测试用例标题注册主流程,执行成功!
2021-12-10 09:31:22,238-[Ftest_register.py - 53]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:31:22,310-[Ftest_register.py - 53]-INFO:测试编号3,测试用例标题密码为空,执行成功!
2021-12-10 09:31:22,385-[Ftest_register.py - 53]-INFO:测试编号4,测试用例标题手机号码为空,执行成功!
2021-12-10 09:31:22,451-[Ftest_register.py - 53]-INFO:测试编号5,测试用例标题两次密码输入不一致,执行成功!
2021-12-10 09:32:11,302-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:32:11,378-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:32:11,453-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:32:11,520-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:32:11,598-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:32:11,659-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:32:15,423-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:32:15,499-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:32:15,569-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:32:15,629-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:32:15,690-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:32:15,751-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:32:59,326-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:32:59,410-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:32:59,478-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:32:59,537-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:32:59,599-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:32:59,667-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:33:06,112-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:33:06,180-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:33:06,249-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:33:06,309-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:33:06,371-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:33:06,434-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:35:25,237-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:35:25,331-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:35:25,405-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:35:25,468-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:35:25,530-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:35:25,593-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:38:35,913-[test_login1.py - 36]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:38:35,985-[test_login1.py - 36]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:38:36,060-[test_login1.py - 36]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:38:36,119-[test_login1.py - 36]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:38:36,178-[test_login1.py - 36]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:38:36,238-[test_login1.py - 36]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 09:58:32,955-[test_login1.py - 42]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 09:58:33,048-[test_login1.py - 42]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 09:58:33,130-[test_login1.py - 42]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 09:58:33,190-[test_login1.py - 42]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 09:58:33,260-[test_login1.py - 42]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 09:58:33,332-[test_login1.py - 42]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 10:05:41,281-[test_login1.py - 44]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 10:05:41,361-[test_login1.py - 44]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 10:05:41,425-[test_login1.py - 44]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 10:05:41,489-[test_login1.py - 44]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 10:05:41,556-[test_login1.py - 44]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 10:05:41,633-[test_login1.py - 44]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 10:06:14,747-[test_login1.py - 44]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 10:06:14,840-[test_login1.py - 44]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 10:06:14,910-[test_login1.py - 44]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 10:06:14,981-[test_login1.py - 44]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 10:06:15,054-[test_login1.py - 44]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 10:06:15,124-[test_login1.py - 44]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 10:15:36,853-[test_login1.py - 44]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 10:15:36,943-[test_login1.py - 44]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 10:15:37,015-[test_login1.py - 44]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 10:15:37,084-[test_login1.py - 44]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 10:15:37,147-[test_login1.py - 44]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 10:15:37,213-[test_login1.py - 44]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 10:17:44,550-[test_login1.py - 44]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 10:17:44,632-[test_login1.py - 44]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 10:17:44,701-[test_login1.py - 44]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 10:17:44,761-[test_login1.py - 44]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 10:17:44,850-[test_login1.py - 44]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 10:17:44,912-[test_login1.py - 44]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 10:18:56,789-[test_login1.py - 44]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 10:18:56,866-[test_login1.py - 44]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 10:18:56,929-[test_login1.py - 44]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 10:18:56,994-[test_login1.py - 44]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 10:18:57,054-[test_login1.py - 44]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 10:18:57,128-[test_login1.py - 44]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 10:19:02,683-[test_login1.py - 44]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 10:19:02,771-[test_login1.py - 44]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 10:19:02,833-[test_login1.py - 44]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 10:19:02,899-[test_login1.py - 44]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 10:19:02,973-[test_login1.py - 44]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 10:19:03,050-[test_login1.py - 44]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 10:19:14,977-[test_login1.py - 44]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 10:19:15,082-[test_login1.py - 44]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 10:19:15,142-[test_login1.py - 44]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 10:19:15,203-[test_login1.py - 44]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 10:19:15,270-[test_login1.py - 44]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 10:19:15,331-[test_login1.py - 44]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 10:19:19,320-[test_login1.py - 44]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 10:19:19,417-[test_login1.py - 44]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 10:19:19,492-[test_login1.py - 44]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 10:19:19,566-[test_login1.py - 44]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 10:19:19,629-[test_login1.py - 44]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 10:19:19,695-[test_login1.py - 44]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 10:21:30,546-[test_login1.py - 44]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 10:21:30,648-[test_login1.py - 44]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 10:21:30,733-[test_login1.py - 44]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 10:21:30,837-[test_login1.py - 44]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 10:21:30,897-[test_login1.py - 44]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 10:21:30,961-[test_login1.py - 44]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 10:21:59,676-[test_login1.py - 44]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 10:21:59,761-[test_login1.py - 44]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 10:21:59,826-[test_login1.py - 44]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 10:21:59,893-[test_login1.py - 44]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 10:21:59,967-[test_login1.py - 44]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 10:22:00,030-[test_login1.py - 44]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 10:35:56,132-[test_business_login1.py - 44]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 10:35:56,225-[test_business_login1.py - 44]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 10:35:56,284-[test_business_login1.py - 44]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 10:35:56,348-[test_business_login1.py - 44]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 10:35:56,426-[test_business_login1.py - 44]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 10:35:56,501-[test_business_login1.py - 44]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 10:36:32,449-[test_login1.py - 44]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 10:36:32,534-[test_login1.py - 44]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 10:36:32,603-[test_login1.py - 44]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 10:36:32,669-[test_login1.py - 44]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 10:36:32,750-[test_login1.py - 44]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 10:36:32,831-[test_login1.py - 44]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 10:36:49,099-[test_login1.py - 44]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 10:36:49,231-[test_login1.py - 44]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 10:36:49,327-[test_login1.py - 44]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 10:36:49,440-[test_login1.py - 44]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 10:36:49,545-[test_login1.py - 44]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 10:36:49,633-[test_login1.py - 44]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 10:37:19,555-[test_login1.py - 44]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 10:38:02,217-[test_login2.py - 44]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 10:38:02,321-[test_login2.py - 44]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 10:38:02,405-[test_login2.py - 44]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 10:38:02,500-[test_login2.py - 44]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 10:38:02,586-[test_login2.py - 44]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 10:38:02,662-[test_login2.py - 44]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 11:23:10,662-[test_login2.py - 52]-INFO:测试编号1,测试用例标题登陆主流程,执行成功!
2021-12-10 11:23:10,759-[test_login2.py - 52]-INFO:测试编号2,测试用例标题用户名为空,执行成功!
2021-12-10 11:23:10,821-[test_login2.py - 52]-INFO:测试编号3,测试用例标题密码为空的场景,执行成功!
2021-12-10 11:23:10,883-[test_login2.py - 52]-INFO:测试编号4,测试用例标题用户类型为空,执行成功!
2021-12-10 11:23:10,946-[test_login2.py - 52]-INFO:测试编号5,测试用例标题用户格式错误,执行成功!
2021-12-10 11:23:11,010-[test_login2.py - 52]-INFO:测试编号6,测试用例标题type类型错误,执行成功!
2021-12-10 13:53:29,632-[test_login2.py - 59]-ERROR:测试编号1,测试用例标题登陆主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 13:53:29,632-[test_login2.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 13:55:12,316-[test_login2.py - 59]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 13:55:12,316-[test_login2.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 13:58:39,253-[test_login2.py - 59]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 13:58:39,253-[test_login2.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 14:00:08,970-[test_login2.py - 59]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 14:00:08,970-[test_login2.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 14:10:31,024-[Ftest_login3.py - 59]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 14:10:31,024-[Ftest_login3.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 14:10:36,038-[Ftest_login1.py - 39]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 14:10:36,038-[Ftest_login1.py - 40]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login1.py", line 34, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 14:11:28,044-[Ftest_login1.py - 39]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 14:11:28,044-[Ftest_login1.py - 40]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login1.py", line 34, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 14:12:38,202-[Ftest_login1.py - 44]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-10 14:13:01,924-[test_login2.py - 59]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 14:13:01,924-[test_login2.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 14:13:53,324-[test_login2.py - 59]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 14:13:53,324-[test_login2.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 15:24:43,483-[test_register01.py - 28]-ERROR:测试编号1,测试用例测试主流程,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 15:24:43,484-[test_register01.py - 29]-ERROR:{'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register01.py", line 25, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 15:24:54,376-[test_register01.py - 33]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-10 15:59:31,283-[test_register02.py - 47]-ERROR:测试编号1,测试用例测试主流程,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 15:59:31,283-[test_register02.py - 48]-ERROR:{'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register02.py", line 44, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 15:59:55,243-[test_register02.py - 47]-ERROR:测试编号1,测试用例测试主流程,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 15:59:55,243-[test_register02.py - 48]-ERROR:{'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register02.py", line 44, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 16:00:56,899-[test_login2.py - 59]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:00:56,899-[test_login2.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:01:26,518-[test_register02.py - 47]-ERROR:测试编号1,测试用例测试主流程,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 16:01:26,518-[test_register02.py - 48]-ERROR:{'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register02.py", line 44, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 16:01:51,317-[test_register02.py - 47]-ERROR:测试编号1,测试用例测试主流程,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 16:01:51,318-[test_register02.py - 48]-ERROR:{'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register02.py", line 44, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 16:02:45,303-[Ftest_register01.py - 28]-ERROR:测试编号1,测试用例测试主流程,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 16:02:45,303-[Ftest_register01.py - 29]-ERROR:{'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register01.py", line 25, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 16:03:36,982-[test_register02.py - 52]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-10 16:04:27,736-[test_register02.py - 51]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-10 16:05:24,202-[test_register02.py - 51]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-10 16:14:38,939-[test_login2.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:14:38,940-[test_login2.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:14:39,061-[test_login2.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:14:39,144-[test_login2.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:14:39,226-[test_login2.py - 68]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:14:39,298-[test_login2.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:14:39,368-[test_login2.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:14:39,441-[test_login2.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:14:39,510-[test_login2.py - 68]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:14:39,587-[test_login2.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:14:39,672-[test_login2.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:14:39,768-[test_login2.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:15:59,253-[test_login2.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:15:59,253-[test_login2.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:15:59,365-[test_login2.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:15:59,447-[test_login2.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:15:59,526-[test_login2.py - 68]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:15:59,599-[test_login2.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:15:59,669-[test_login2.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:15:59,743-[test_login2.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:15:59,813-[test_login2.py - 68]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:15:59,892-[test_login2.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:15:59,966-[test_login2.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:16:00,049-[test_login2.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:17:58,144-[test_login2.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:17:58,144-[test_login2.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:17:58,247-[test_login2.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:17:58,332-[test_login2.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:17:58,408-[test_login2.py - 68]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:17:58,480-[test_login2.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:17:58,553-[test_login2.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:17:58,639-[test_login2.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:17:58,733-[test_login2.py - 68]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:17:58,808-[test_login2.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:17:58,876-[test_login2.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:17:58,961-[test_login2.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:19:16,448-[test_login2.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:19:16,448-[test_login2.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:19:16,536-[test_login2.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:19:16,607-[test_login2.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:19:16,680-[test_login2.py - 68]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:19:16,749-[test_login2.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:19:16,837-[test_login2.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:19:16,908-[test_login2.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:19:16,978-[test_login2.py - 68]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:19:17,050-[test_login2.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:19:17,127-[test_login2.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:19:17,204-[test_login2.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:20:01,263-[Ftest_login3.py - 59]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:20:01,264-[Ftest_login3.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:23:24,976-[test_login3.py - 114]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-10 16:23:25,072-[test_login3.py - 114]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:23:25,146-[test_login3.py - 114]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:23:25,232-[test_login3.py - 109]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NDYwNS4xNTI0OTIzOjhkNjhiMzkyNjVmMWE2MDEzYTBmN2I0OTgxODgwZWNiOWJiNDEzN2Q='}
2021-12-10 16:23:25,232-[test_login3.py - 110]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NDYwN[64 chars]2Q='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NDYwNS4xNTI0OTIzOjhkNjhiMzkyNjVmMWE2MDEzYTBmN2I0OTgxODgwZWNiOWJiNDEzN2Q='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 106, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NDYwN[64 chars]2Q='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NDYwNS4xNTI0OTIzOjhkNjhiMzkyNjVmMWE2MDEzYTBmN2I0OTgxODgwZWNiOWJiNDEzN2Q='}
2021-12-10 16:23:25,314-[test_login3.py - 114]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:23:25,390-[test_login3.py - 114]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:23:25,467-[test_login3.py - 114]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:23:25,541-[test_login3.py - 109]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NDYwNS40NzQ5OTA2OmRjMzRiOTc5OWM5MzUyODZlMGI2YmQ1N2I5MWRiYTY5MGI2MTk1M2Q='}
2021-12-10 16:23:25,541-[test_login3.py - 110]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NDYwN[64 chars]2Q='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NDYwNS40NzQ5OTA2OmRjMzRiOTc5OWM5MzUyODZlMGI2YmQ1N2I5MWRiYTY5MGI2MTk1M2Q='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 106, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NDYwN[64 chars]2Q='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NDYwNS40NzQ5OTA2OmRjMzRiOTc5OWM5MzUyODZlMGI2YmQ1N2I5MWRiYTY5MGI2MTk1M2Q='}
2021-12-10 16:23:25,614-[test_login3.py - 114]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:23:25,687-[test_login3.py - 114]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:23:25,760-[test_login3.py - 114]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:27:20,472-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:27:20,472-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:27:20,572-[test_login3.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:27:20,649-[test_login3.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:27:20,726-[test_login3.py - 68]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:27:20,814-[test_login3.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:27:20,890-[test_login3.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:27:20,965-[test_login3.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:27:21,036-[test_login3.py - 68]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:27:21,110-[test_login3.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:27:21,184-[test_login3.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:27:21,254-[test_login3.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:31:08,824-[test_login3.py - 112]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-10 16:31:08,911-[test_login3.py - 112]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:31:08,986-[test_login3.py - 112]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:31:09,066-[test_login3.py - 107]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTA2OC45OTIwNzg6NDBkZjVkMjdhNjg5MjI4NDRmOWIxMjZkY2I1MzVkMWE2NjNjN2I1NQ=='}
2021-12-10 16:31:09,066-[test_login3.py - 108]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTA2O[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTA2OC45OTIwNzg6NDBkZjVkMjdhNjg5MjI4NDRmOWIxMjZkY2I1MzVkMWE2NjNjN2I1NQ=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 104, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTA2O[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTA2OC45OTIwNzg6NDBkZjVkMjdhNjg5MjI4NDRmOWIxMjZkY2I1MzVkMWE2NjNjN2I1NQ=='}
2021-12-10 16:31:09,137-[test_login3.py - 112]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:31:09,208-[test_login3.py - 112]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:31:09,284-[test_login3.py - 112]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:31:09,356-[test_login3.py - 107]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTA2OS4yOTA0OTMyOjdiMWU2NzQ3NTQxMzNiNjc5OTlkZTVmOWQ0ZGVjNTdmNjgxOGQ5ZjE='}
2021-12-10 16:31:09,357-[test_login3.py - 108]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTA2O[64 chars]jE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTA2OS4yOTA0OTMyOjdiMWU2NzQ3NTQxMzNiNjc5OTlkZTVmOWQ0ZGVjNTdmNjgxOGQ5ZjE='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 104, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTA2O[64 chars]jE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTA2OS4yOTA0OTMyOjdiMWU2NzQ3NTQxMzNiNjc5OTlkZTVmOWQ0ZGVjNTdmNjgxOGQ5ZjE='}
2021-12-10 16:31:09,432-[test_login3.py - 112]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:31:09,503-[test_login3.py - 112]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:31:09,585-[test_login3.py - 112]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:31:43,441-[test_login3.py - 112]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-10 16:31:43,539-[test_login3.py - 112]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:31:43,615-[test_login3.py - 112]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:31:43,686-[test_login3.py - 107]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTEwMy42MjA1ODA3OjY3YWU1OTgyZjExNmMzZTFlMGIyYzJjNzBmY2M1NzY0NzIzODllMjM='}
2021-12-10 16:31:43,686-[test_login3.py - 108]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTEwM[64 chars]jM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTEwMy42MjA1ODA3OjY3YWU1OTgyZjExNmMzZTFlMGIyYzJjNzBmY2M1NzY0NzIzODllMjM='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 104, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTEwM[64 chars]jM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTEwMy42MjA1ODA3OjY3YWU1OTgyZjExNmMzZTFlMGIyYzJjNzBmY2M1NzY0NzIzODllMjM='}
2021-12-10 16:31:43,761-[test_login3.py - 112]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:31:43,831-[test_login3.py - 112]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:31:43,919-[test_login3.py - 112]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:31:44,005-[test_login3.py - 107]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTEwMy45MjU1ODU1OmYyNGU5YjkwNjcyMDExYmNhNGE5NWFiMzI2Mzc3MWIwZDczY2Y2OWQ='}
2021-12-10 16:31:44,005-[test_login3.py - 108]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTEwM[64 chars]WQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTEwMy45MjU1ODU1OmYyNGU5YjkwNjcyMDExYmNhNGE5NWFiMzI2Mzc3MWIwZDczY2Y2OWQ='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 104, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTEwM[64 chars]WQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTEwMy45MjU1ODU1OmYyNGU5YjkwNjcyMDExYmNhNGE5NWFiMzI2Mzc3MWIwZDczY2Y2OWQ='}
2021-12-10 16:31:44,093-[test_login3.py - 112]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:31:44,162-[test_login3.py - 112]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:31:44,236-[test_login3.py - 112]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:32:10,274-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:32:10,274-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:32:10,365-[test_login3.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:32:10,442-[test_login3.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:32:10,526-[test_login3.py - 68]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:32:10,634-[test_login3.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:32:10,708-[test_login3.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:32:10,784-[test_login3.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:32:10,854-[test_login3.py - 68]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:32:10,925-[test_login3.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:32:10,998-[test_login3.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:32:11,068-[test_login3.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:33:50,972-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:33:50,973-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:33:51,139-[test_login3.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:33:51,288-[test_login3.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:33:51,433-[test_login3.py - 68]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:33:51,582-[test_login3.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:33:51,731-[test_login3.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:33:51,878-[test_login3.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:33:52,073-[test_login3.py - 68]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:33:52,240-[test_login3.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:33:52,399-[test_login3.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:33:52,555-[test_login3.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:34:19,435-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:34:19,435-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:34:19,611-[test_login3.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:34:19,771-[test_login3.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:34:19,922-[test_login3.py - 68]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:34:20,110-[test_login3.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:34:20,276-[test_login3.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:34:20,441-[test_login3.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:34:20,597-[test_login3.py - 68]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:34:20,745-[test_login3.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:34:20,902-[test_login3.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:34:21,059-[test_login3.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:34:31,549-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:34:31,549-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:34:31,711-[test_login3.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:34:31,856-[test_login3.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:34:32,002-[test_login3.py - 68]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:34:32,204-[test_login3.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:34:32,388-[test_login3.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:34:32,539-[test_login3.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:34:32,689-[test_login3.py - 68]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:34:32,856-[test_login3.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:34:32,999-[test_login3.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:34:33,161-[test_login3.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:43:59,878-[test_login3.py - 68]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-10 16:43:59,964-[test_login3.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:44:00,062-[test_login3.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:44:00,136-[test_login3.py - 63]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg0MC4wNjkwNTk6MjNkY2VlZWY4OGJhY2JhN2RmNmIzMzFhMzk3NWM4NTQ1ZTJhNjhiZQ=='}
2021-12-10 16:44:00,136-[test_login3.py - 64]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg0M[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTg0MC4wNjkwNTk6MjNkY2VlZWY4OGJhY2JhN2RmNmIzMzFhMzk3NWM4NTQ1ZTJhNjhiZQ=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg0M[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTg0MC4wNjkwNTk6MjNkY2VlZWY4OGJhY2JhN2RmNmIzMzFhMzk3NWM4NTQ1ZTJhNjhiZQ=='}
2021-12-10 16:44:00,209-[test_login3.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:44:00,280-[test_login3.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:44:00,353-[test_login3.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:44:00,428-[test_login3.py - 63]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg0MC4zNjAwNTg4OjczMzg5NjAyNDY4MDc0OWRhZWVkZGE2ZmNhNjBlODg2ZGJmZmI5M2Y='}
2021-12-10 16:44:00,428-[test_login3.py - 64]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg0M[64 chars]2Y='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTg0MC4zNjAwNTg4OjczMzg5NjAyNDY4MDc0OWRhZWVkZGE2ZmNhNjBlODg2ZGJmZmI5M2Y='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg0M[64 chars]2Y='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTg0MC4zNjAwNTg4OjczMzg5NjAyNDY4MDc0OWRhZWVkZGE2ZmNhNjBlODg2ZGJmZmI5M2Y='}
2021-12-10 16:44:00,500-[test_login3.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:44:00,599-[test_login3.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:44:00,681-[test_login3.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:44:20,838-[test_login3.py - 68]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-10 16:44:20,922-[test_login3.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:44:21,006-[test_login3.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:44:21,079-[test_login3.py - 63]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg2MS4wMTM2MTE2OmVjMTZmMzdlNjkwNmJjM2QxMzZhYzJkOTc2NjU4Y2M2YTg5OTRlZmY='}
2021-12-10 16:44:21,079-[test_login3.py - 64]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg2M[64 chars]mY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTg2MS4wMTM2MTE2OmVjMTZmMzdlNjkwNmJjM2QxMzZhYzJkOTc2NjU4Y2M2YTg5OTRlZmY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg2M[64 chars]mY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTg2MS4wMTM2MTE2OmVjMTZmMzdlNjkwNmJjM2QxMzZhYzJkOTc2NjU4Y2M2YTg5OTRlZmY='}
2021-12-10 16:44:21,159-[test_login3.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:44:21,238-[test_login3.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:44:21,318-[test_login3.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:44:21,394-[test_login3.py - 63]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg2MS4zMjU1MDY6YmQxY2I0Mzg5YmMzYzMyMWQ5N2FhMzNmNzI3ZWI3OTZjZTcxMDVkMw=='}
2021-12-10 16:44:21,394-[test_login3.py - 64]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg2M[64 chars]w=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTg2MS4zMjU1MDY6YmQxY2I0Mzg5YmMzYzMyMWQ5N2FhMzNmNzI3ZWI3OTZjZTcxMDVkMw=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg2M[64 chars]w=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTg2MS4zMjU1MDY6YmQxY2I0Mzg5YmMzYzMyMWQ5N2FhMzNmNzI3ZWI3OTZjZTcxMDVkMw=='}
2021-12-10 16:44:21,468-[test_login3.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:44:21,543-[test_login3.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:44:21,617-[test_login3.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:44:33,955-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:44:33,955-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:44:34,043-[test_login3.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:44:34,117-[test_login3.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:44:34,190-[test_login3.py - 68]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:44:34,260-[test_login3.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:44:34,344-[test_login3.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:44:34,416-[test_login3.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:44:34,487-[test_login3.py - 68]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:44:34,557-[test_login3.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:44:34,643-[test_login3.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:44:34,723-[test_login3.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:45:11,655-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:45:11,655-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:45:11,742-[test_login3.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:45:11,817-[test_login3.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:45:11,891-[test_login3.py - 68]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:45:11,961-[test_login3.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:45:12,031-[test_login3.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:45:12,102-[test_login3.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:45:12,174-[test_login3.py - 68]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:45:12,250-[test_login3.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:45:12,333-[test_login3.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:45:12,420-[test_login3.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:45:30,333-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:45:30,333-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:45:30,439-[test_login3.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:45:30,525-[test_login3.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:45:30,616-[test_login3.py - 68]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:45:30,701-[test_login3.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:45:30,782-[test_login3.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:45:30,913-[test_login3.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:45:30,984-[test_login3.py - 68]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:45:31,058-[test_login3.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:45:31,128-[test_login3.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:45:31,200-[test_login3.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:45:41,029-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:45:41,030-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:45:41,140-[test_login3.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:45:41,230-[test_login3.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:45:41,326-[test_login3.py - 68]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:45:41,397-[test_login3.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:45:41,469-[test_login3.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:45:41,541-[test_login3.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:45:41,613-[test_login3.py - 68]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:45:41,701-[test_login3.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:45:41,789-[test_login3.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:45:41,878-[test_login3.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:46:24,595-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:46:24,595-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:46:24,698-[test_login3.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:46:24,815-[test_login3.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:46:24,893-[test_login3.py - 68]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:46:24,965-[test_login3.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:46:25,049-[test_login3.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:46:25,142-[test_login3.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:46:25,224-[test_login3.py - 68]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:46:25,298-[test_login3.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:46:25,367-[test_login3.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:46:25,440-[test_login3.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:47:15,563-[test_login3.py - 72]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-10 16:47:15,648-[test_login3.py - 72]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:47:15,727-[test_login3.py - 72]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:47:15,799-[test_login3.py - 67]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjAzNS43MzIyNzIxOjM3MmFhYzNlNWEwNTBjOGM5NDk2MGRkYTkwZjZiNWRmY2E5NTk2MTE='}
2021-12-10 16:47:15,800-[test_login3.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjAzN[64 chars]TE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjAzNS43MzIyNzIxOjM3MmFhYzNlNWEwNTBjOGM5NDk2MGRkYTkwZjZiNWRmY2E5NTk2MTE='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjAzN[64 chars]TE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjAzNS43MzIyNzIxOjM3MmFhYzNlNWEwNTBjOGM5NDk2MGRkYTkwZjZiNWRmY2E5NTk2MTE='}
2021-12-10 16:47:15,898-[test_login3.py - 72]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:47:15,968-[test_login3.py - 72]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:47:16,051-[test_login3.py - 72]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:47:16,132-[test_login3.py - 67]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjAzNi4wNTc1ODkzOjRlMGQyMTMxOWZhZGRmMzUzYzk3YzNiZDUwMGJkNmU0YTc0NWI1NWM='}
2021-12-10 16:47:16,132-[test_login3.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjAzN[64 chars]WM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjAzNi4wNTc1ODkzOjRlMGQyMTMxOWZhZGRmMzUzYzk3YzNiZDUwMGJkNmU0YTc0NWI1NWM='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjAzN[64 chars]WM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjAzNi4wNTc1ODkzOjRlMGQyMTMxOWZhZGRmMzUzYzk3YzNiZDUwMGJkNmU0YTc0NWI1NWM='}
2021-12-10 16:47:16,210-[test_login3.py - 72]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:47:16,300-[test_login3.py - 72]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:47:16,407-[test_login3.py - 72]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:47:31,887-[test_login3.py - 67]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:47:31,887-[test_login3.py - 68]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 62, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:47:31,983-[test_login3.py - 72]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:47:32,056-[test_login3.py - 72]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:47:32,141-[test_login3.py - 72]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:47:32,229-[test_login3.py - 72]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:47:32,307-[test_login3.py - 72]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:47:32,380-[test_login3.py - 72]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:47:32,449-[test_login3.py - 72]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:47:32,521-[test_login3.py - 72]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:47:32,597-[test_login3.py - 72]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:47:32,668-[test_login3.py - 72]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:47:35,027-[test_login3.py - 67]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:47:35,028-[test_login3.py - 68]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 62, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:47:35,115-[test_login3.py - 72]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:47:35,187-[test_login3.py - 72]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:47:35,256-[test_login3.py - 72]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:47:35,332-[test_login3.py - 72]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:47:35,403-[test_login3.py - 72]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:47:35,490-[test_login3.py - 72]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:47:35,575-[test_login3.py - 72]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:47:35,701-[test_login3.py - 72]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:47:35,775-[test_login3.py - 72]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:47:35,849-[test_login3.py - 72]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:47:50,032-[test_login3.py - 67]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:47:50,033-[test_login3.py - 68]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 62, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:47:50,169-[test_login3.py - 72]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:47:50,270-[test_login3.py - 72]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:47:50,354-[test_login3.py - 72]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:47:50,430-[test_login3.py - 72]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:47:50,503-[test_login3.py - 72]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:47:50,579-[test_login3.py - 72]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:47:50,665-[test_login3.py - 72]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:47:50,774-[test_login3.py - 72]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:47:50,874-[test_login3.py - 72]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:47:50,948-[test_login3.py - 72]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:48:31,439-[test_login3.py - 72]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-10 16:48:31,526-[test_login3.py - 72]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:48:31,597-[test_login3.py - 72]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:48:31,675-[test_login3.py - 67]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjExMS42MDQwMzE4OjJjZTFmMDgyNmM3ZWJmMmY0NGY3YzNlODExYmQyYjQ3N2VkN2M1MTk='}
2021-12-10 16:48:31,676-[test_login3.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjExM[64 chars]Tk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjExMS42MDQwMzE4OjJjZTFmMDgyNmM3ZWJmMmY0NGY3YzNlODExYmQyYjQ3N2VkN2M1MTk='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjExM[64 chars]Tk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjExMS42MDQwMzE4OjJjZTFmMDgyNmM3ZWJmMmY0NGY3YzNlODExYmQyYjQ3N2VkN2M1MTk='}
2021-12-10 16:48:31,747-[test_login3.py - 72]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:48:31,820-[test_login3.py - 72]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:48:31,900-[test_login3.py - 72]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:48:31,974-[test_login3.py - 67]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjExMS45MDY0MzM4OjEzMzdkMzkyMjQzYjllOWZjN2FmNWRlY2JiZDg2MWRmMjNmOTU0ZTY='}
2021-12-10 16:48:31,974-[test_login3.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjExM[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjExMS45MDY0MzM4OjEzMzdkMzkyMjQzYjllOWZjN2FmNWRlY2JiZDg2MWRmMjNmOTU0ZTY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjExM[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjExMS45MDY0MzM4OjEzMzdkMzkyMjQzYjllOWZjN2FmNWRlY2JiZDg2MWRmMjNmOTU0ZTY='}
2021-12-10 16:48:32,046-[test_login3.py - 72]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:48:32,119-[test_login3.py - 72]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:48:32,190-[test_login3.py - 72]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:50:11,106-[test_login3.py - 67]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:50:11,107-[test_login3.py - 68]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 62, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:50:11,196-[test_login3.py - 72]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:50:11,269-[test_login3.py - 72]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:50:11,360-[test_login3.py - 72]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:50:11,429-[test_login3.py - 72]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:50:11,500-[test_login3.py - 72]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:50:11,569-[test_login3.py - 72]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:50:11,639-[test_login3.py - 72]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:50:11,710-[test_login3.py - 72]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:50:11,781-[test_login3.py - 72]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:50:11,856-[test_login3.py - 72]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:51:17,716-[test_login3.py - 72]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-10 16:51:17,804-[test_login3.py - 72]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:51:17,880-[test_login3.py - 72]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:51:17,957-[test_login3.py - 67]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjI3Ny44ODU2NTI4OmU3ZWE5ZmZjNDU4MDgzZTE1YjllZmYwNGM5YmNjMzMyZDZjZTY3MTU='}
2021-12-10 16:51:17,957-[test_login3.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjI3N[64 chars]TU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjI3Ny44ODU2NTI4OmU3ZWE5ZmZjNDU4MDgzZTE1YjllZmYwNGM5YmNjMzMyZDZjZTY3MTU='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjI3N[64 chars]TU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjI3Ny44ODU2NTI4OmU3ZWE5ZmZjNDU4MDgzZTE1YjllZmYwNGM5YmNjMzMyZDZjZTY3MTU='}
2021-12-10 16:51:18,038-[test_login3.py - 72]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:51:18,126-[test_login3.py - 72]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:51:18,223-[test_login3.py - 72]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:51:18,315-[test_login3.py - 67]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjI3OC4yMzEzMDQyOmVhZmE3N2QzYTZhZmNlYTY3OTY1NjZiNWFiMDFjZmY1MWNhMGE2Zjg='}
2021-12-10 16:51:18,316-[test_login3.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjI3O[64 chars]jg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjI3OC4yMzEzMDQyOmVhZmE3N2QzYTZhZmNlYTY3OTY1NjZiNWFiMDFjZmY1MWNhMGE2Zjg='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjI3O[64 chars]jg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjI3OC4yMzEzMDQyOmVhZmE3N2QzYTZhZmNlYTY3OTY1NjZiNWFiMDFjZmY1MWNhMGE2Zjg='}
2021-12-10 16:51:18,396-[test_login3.py - 72]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:51:18,503-[test_login3.py - 72]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:51:18,584-[test_login3.py - 72]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:51:30,964-[test_login3.py - 67]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:51:30,964-[test_login3.py - 68]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 62, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:51:31,077-[test_login3.py - 72]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:51:31,148-[test_login3.py - 72]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:51:31,239-[test_login3.py - 72]-INFO:测试编号4,测试用例标题登录用户名大小写,执行成功!
2021-12-10 16:51:31,312-[test_login3.py - 72]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:51:31,383-[test_login3.py - 72]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:51:31,477-[test_login3.py - 72]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:51:31,574-[test_login3.py - 72]-INFO:测试编号8,测试用例标题登录密码大小写,执行成功!
2021-12-10 16:51:31,655-[test_login3.py - 72]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:51:31,728-[test_login3.py - 72]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:51:31,805-[test_login3.py - 72]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-10 16:55:19,583-[test_login3.py - 73]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-10 16:55:19,668-[test_login3.py - 73]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-10 16:55:19,740-[test_login3.py - 73]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-10 16:55:19,813-[test_login3.py - 68]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjUxOS43NDYzNTY6ZjAwNmNkNTA2MTBjZDFhZTk4ZTAzNzQ5NjMyNjkzNTFjNjY3MWQ1Yw=='}
2021-12-10 16:55:19,813-[test_login3.py - 69]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjUxO[64 chars]w=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjUxOS43NDYzNTY6ZjAwNmNkNTA2MTBjZDFhZTk4ZTAzNzQ5NjMyNjkzNTFjNjY3MWQ1Yw=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 65, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjUxO[64 chars]w=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjUxOS43NDYzNTY6ZjAwNmNkNTA2MTBjZDFhZTk4ZTAzNzQ5NjMyNjkzNTFjNjY3MWQ1Yw=='}
2021-12-10 16:55:19,886-[test_login3.py - 73]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-10 16:55:19,979-[test_login3.py - 73]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-10 16:55:20,057-[test_login3.py - 73]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-10 16:55:20,139-[test_login3.py - 68]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjUyMC4wNjQ1NjMzOmQyZWViNTAzYjk0NGZmNTRjOTk5NGVlMzk0YTEyYzFmMmZlYzQ5NzY='}
2021-12-10 16:55:20,139-[test_login3.py - 69]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjUyM[64 chars]zY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjUyMC4wNjQ1NjMzOmQyZWViNTAzYjk0NGZmNTRjOTk5NGVlMzk0YTEyYzFmMmZlYzQ5NzY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 65, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjUyM[64 chars]zY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjUyMC4wNjQ1NjMzOmQyZWViNTAzYjk0NGZmNTRjOTk5NGVlMzk0YTEyYzFmMmZlYzQ5NzY='}
2021-12-10 16:55:20,214-[test_login3.py - 73]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-10 16:55:20,284-[test_login3.py - 73]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-10 16:55:20,354-[test_login3.py - 73]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-11 11:35:32,872-[Ftest_register01.py - 28]-ERROR:测试编号1,测试用例测试主流程,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 11:35:32,873-[Ftest_register01.py - 29]-ERROR:{'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register01.py", line 25, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 11:38:47,611-[test_register02.py - 50]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-11 11:43:17,872-[test_register02.py - 51]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-11 11:46:38,504-[test_register02.py - 54]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-11 11:50:44,532-[test_register02.py - 57]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-11 15:32:47,854-[test_token_goodsinfo1.py - 36]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行失败!实际结果
2021-12-11 15:33:34,720-[test_register02.py - 57]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-11 15:38:54,205-[Ftest_register03.py - 73]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-11 15:39:29,257-[Ftest_register03.py - 73]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-11 15:39:29,362-[Ftest_register03.py - 73]-INFO:测试编号2,测试用例注册接口用户名为空的场景,成功！
2021-12-11 15:39:29,463-[Ftest_register03.py - 73]-INFO:测试编号3,测试用例注册接口用户名有限边界值的场景（6-8）,成功！
2021-12-11 15:39:29,563-[Ftest_register03.py - 73]-INFO:测试编号4,测试用例注册接口用户名无效边界值9位的场景,成功！
2021-12-11 15:39:29,663-[Ftest_register03.py - 73]-INFO:测试编号5,测试用例注册接口用户名非字母开头的场景,成功！
2021-12-11 15:39:29,764-[Ftest_register03.py - 73]-INFO:测试编号6,测试用例注册接口用户名包含符号或者汉字的场景,成功！
2021-12-11 15:39:29,887-[Ftest_register03.py - 73]-INFO:测试编号7,测试用例注册接口用户名已注册的场景,成功！
2021-12-11 15:39:30,009-[Ftest_register03.py - 73]-INFO:测试编号8,测试用例注册接口密码为空的场景,成功！
2021-12-11 15:39:30,125-[Ftest_register03.py - 73]-INFO:测试编号9,测试用例注册接口密码有限边界值的场景（7-11）,成功！
2021-12-11 15:39:30,222-[Ftest_register03.py - 73]-INFO:测试编号10,测试用例注册接口密码无效边界值6位的场景,成功！
2021-12-11 15:39:30,328-[Ftest_register03.py - 73]-INFO:测试编号11,测试用例注册接口密码无效边界值12位的场景,成功！
2021-12-11 15:39:30,430-[Ftest_register03.py - 73]-INFO:测试编号12,测试用例注册接口密码包含符号或汉字的场景,成功！
2021-12-11 15:39:30,526-[Ftest_register03.py - 73]-INFO:测试编号13,测试用例注册接口确认密码为空的场景,成功！
2021-12-11 15:39:30,618-[Ftest_register03.py - 73]-INFO:测试编号14,测试用例注册接口确认密码和密码不一致的场景,成功！
2021-12-11 15:39:30,719-[Ftest_register03.py - 73]-INFO:测试编号15,测试用例注册接口确认密码大小写区分的场景,成功！
2021-12-11 15:39:30,814-[Ftest_register03.py - 73]-INFO:测试编号16,测试用例注册接口手机号为空的场景,成功！
2021-12-11 15:39:30,946-[Ftest_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-11 15:39:30,947-[Ftest_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1008, 'msg': '手机号格式错误'}
?             ^          ^^^^^^^

+ {'code': 1000, 'msg': '注册成功'}
?             ^          ^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1008, 'msg': '手机号格式错误'}
?             ^          ^^^^^^^

+ {'code': 1000, 'msg': '注册成功'}
?             ^          ^^^^

2021-12-11 15:39:31,044-[Ftest_register03.py - 73]-INFO:测试编号18,测试用例注册接口手机号为非11位数字的场景,成功！
2021-12-11 15:39:31,161-[Ftest_register03.py - 73]-INFO:测试编号19,测试用例注册接口手机号为非数字的场景,成功！
2021-12-11 15:39:31,290-[Ftest_register03.py - 73]-INFO:测试编号20,测试用例注册接口性别为非枚举的场景,成功！
2021-12-11 15:39:31,398-[Ftest_register03.py - 73]-INFO:测试编号21,测试用例注册接口性别为男+女的场景,成功！
2021-12-11 15:39:31,494-[Ftest_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-11 15:39:31,494-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1010, 'msg': '生日格式错误'}
?            ^           ^^^^^^

+ {'code': 1000, 'msg': '注册成功'}
?            ^           ^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1010, 'msg': '生日格式错误'}
?            ^           ^^^^^^

+ {'code': 1000, 'msg': '注册成功'}
?            ^           ^^^^

2021-12-11 15:39:31,590-[Ftest_register03.py - 73]-INFO:测试编号23,测试用例注册接口生日年月日不完整的场景,成功！
2021-12-11 15:39:31,689-[Ftest_register03.py - 73]-INFO:测试编号24,测试用例注册接口生日输入非数字的场景,成功！
2021-12-11 15:39:31,798-[Ftest_register03.py - 73]-INFO:测试编号25,测试用例注册接口生日月份超过12月的场景,成功！
2021-12-11 15:39:31,898-[Ftest_register03.py - 73]-INFO:测试编号26,测试用例注册接口生日日期超过31的场景,成功！
2021-12-11 15:39:32,038-[Ftest_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:32,039-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:32,155-[Ftest_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:32,155-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:32,273-[Ftest_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:32,274-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:32,398-[Ftest_register03.py - 73]-INFO:测试编号30,测试用例注册接口QQ为非数字的场景,成功！
2021-12-11 15:39:32,516-[Ftest_register03.py - 73]-INFO:测试编号31,测试用例注册接口QQ为无效边界的场景（3、21）,成功！
2021-12-11 15:39:32,666-[Ftest_register03.py - 73]-INFO:测试编号32,测试用例注册接口邮箱已注册的场景,成功！
2021-12-11 15:39:32,764-[Ftest_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-11 15:39:32,764-[Ftest_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-11 15:39:41,769-[Ftest_register03.py - 73]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-11 15:39:41,874-[Ftest_register03.py - 73]-INFO:测试编号2,测试用例注册接口用户名为空的场景,成功！
2021-12-11 15:39:41,972-[Ftest_register03.py - 73]-INFO:测试编号3,测试用例注册接口用户名有限边界值的场景（6-8）,成功！
2021-12-11 15:39:42,064-[Ftest_register03.py - 73]-INFO:测试编号4,测试用例注册接口用户名无效边界值9位的场景,成功！
2021-12-11 15:39:42,153-[Ftest_register03.py - 73]-INFO:测试编号5,测试用例注册接口用户名非字母开头的场景,成功！
2021-12-11 15:39:42,248-[Ftest_register03.py - 73]-INFO:测试编号6,测试用例注册接口用户名包含符号或者汉字的场景,成功！
2021-12-11 15:39:42,368-[Ftest_register03.py - 73]-INFO:测试编号7,测试用例注册接口用户名已注册的场景,成功！
2021-12-11 15:39:42,467-[Ftest_register03.py - 73]-INFO:测试编号8,测试用例注册接口密码为空的场景,成功！
2021-12-11 15:39:42,564-[Ftest_register03.py - 73]-INFO:测试编号9,测试用例注册接口密码有限边界值的场景（7-11）,成功！
2021-12-11 15:39:42,654-[Ftest_register03.py - 73]-INFO:测试编号10,测试用例注册接口密码无效边界值6位的场景,成功！
2021-12-11 15:39:42,749-[Ftest_register03.py - 73]-INFO:测试编号11,测试用例注册接口密码无效边界值12位的场景,成功！
2021-12-11 15:39:42,846-[Ftest_register03.py - 73]-INFO:测试编号12,测试用例注册接口密码包含符号或汉字的场景,成功！
2021-12-11 15:39:42,946-[Ftest_register03.py - 73]-INFO:测试编号13,测试用例注册接口确认密码为空的场景,成功！
2021-12-11 15:39:43,046-[Ftest_register03.py - 73]-INFO:测试编号14,测试用例注册接口确认密码和密码不一致的场景,成功！
2021-12-11 15:39:43,135-[Ftest_register03.py - 73]-INFO:测试编号15,测试用例注册接口确认密码大小写区分的场景,成功！
2021-12-11 15:39:43,227-[Ftest_register03.py - 73]-INFO:测试编号16,测试用例注册接口手机号为空的场景,成功！
2021-12-11 15:39:43,349-[Ftest_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:39:43,350-[Ftest_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:39:43,450-[Ftest_register03.py - 73]-INFO:测试编号18,测试用例注册接口手机号为非11位数字的场景,成功！
2021-12-11 15:39:43,563-[Ftest_register03.py - 73]-INFO:测试编号19,测试用例注册接口手机号为非数字的场景,成功！
2021-12-11 15:39:43,670-[Ftest_register03.py - 73]-INFO:测试编号20,测试用例注册接口性别为非枚举的场景,成功！
2021-12-11 15:39:43,780-[Ftest_register03.py - 73]-INFO:测试编号21,测试用例注册接口性别为男+女的场景,成功！
2021-12-11 15:39:43,879-[Ftest_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:39:43,879-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:39:43,982-[Ftest_register03.py - 73]-INFO:测试编号23,测试用例注册接口生日年月日不完整的场景,成功！
2021-12-11 15:39:44,092-[Ftest_register03.py - 73]-INFO:测试编号24,测试用例注册接口生日输入非数字的场景,成功！
2021-12-11 15:39:44,205-[Ftest_register03.py - 73]-INFO:测试编号25,测试用例注册接口生日月份超过12月的场景,成功！
2021-12-11 15:39:44,344-[Ftest_register03.py - 73]-INFO:测试编号26,测试用例注册接口生日日期超过31的场景,成功！
2021-12-11 15:39:44,445-[Ftest_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:44,446-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:44,546-[Ftest_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:44,547-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:44,649-[Ftest_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:44,649-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:44,766-[Ftest_register03.py - 73]-INFO:测试编号30,测试用例注册接口QQ为非数字的场景,成功！
2021-12-11 15:39:44,877-[Ftest_register03.py - 73]-INFO:测试编号31,测试用例注册接口QQ为无效边界的场景（3、21）,成功！
2021-12-11 15:39:45,010-[Ftest_register03.py - 73]-INFO:测试编号32,测试用例注册接口邮箱已注册的场景,成功！
2021-12-11 15:39:45,182-[Ftest_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-11 15:39:45,182-[Ftest_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-11 15:41:33,261-[Ftest_register03.py - 73]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-11 15:41:33,358-[Ftest_register03.py - 73]-INFO:测试编号2,测试用例注册接口用户名为空的场景,成功！
2021-12-11 15:41:33,450-[Ftest_register03.py - 73]-INFO:测试编号3,测试用例注册接口用户名有限边界值的场景（6-8）,成功！
2021-12-11 15:41:33,540-[Ftest_register03.py - 73]-INFO:测试编号4,测试用例注册接口用户名无效边界值9位的场景,成功！
2021-12-11 15:41:33,629-[Ftest_register03.py - 73]-INFO:测试编号5,测试用例注册接口用户名非字母开头的场景,成功！
2021-12-11 15:41:33,715-[Ftest_register03.py - 73]-INFO:测试编号6,测试用例注册接口用户名包含符号或者汉字的场景,成功！
2021-12-11 15:41:33,837-[Ftest_register03.py - 73]-INFO:测试编号7,测试用例注册接口用户名已注册的场景,成功！
2021-12-11 15:41:33,928-[Ftest_register03.py - 73]-INFO:测试编号8,测试用例注册接口密码为空的场景,成功！
2021-12-11 15:41:34,045-[Ftest_register03.py - 73]-INFO:测试编号9,测试用例注册接口密码有限边界值的场景（7-11）,成功！
2021-12-11 15:41:34,132-[Ftest_register03.py - 73]-INFO:测试编号10,测试用例注册接口密码无效边界值6位的场景,成功！
2021-12-11 15:41:34,225-[Ftest_register03.py - 73]-INFO:测试编号11,测试用例注册接口密码无效边界值12位的场景,成功！
2021-12-11 15:41:34,331-[Ftest_register03.py - 73]-INFO:测试编号12,测试用例注册接口密码包含符号或汉字的场景,成功！
2021-12-11 15:41:34,440-[Ftest_register03.py - 73]-INFO:测试编号13,测试用例注册接口确认密码为空的场景,成功！
2021-12-11 15:41:34,540-[Ftest_register03.py - 73]-INFO:测试编号14,测试用例注册接口确认密码和密码不一致的场景,成功！
2021-12-11 15:41:34,630-[Ftest_register03.py - 73]-INFO:测试编号15,测试用例注册接口确认密码大小写区分的场景,成功！
2021-12-11 15:41:34,717-[Ftest_register03.py - 73]-INFO:测试编号16,测试用例注册接口手机号为空的场景,成功！
2021-12-11 15:41:34,836-[Ftest_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:41:34,836-[Ftest_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:41:34,944-[Ftest_register03.py - 73]-INFO:测试编号18,测试用例注册接口手机号为非11位数字的场景,成功！
2021-12-11 15:41:35,048-[Ftest_register03.py - 73]-INFO:测试编号19,测试用例注册接口手机号为非数字的场景,成功！
2021-12-11 15:41:35,151-[Ftest_register03.py - 73]-INFO:测试编号20,测试用例注册接口性别为非枚举的场景,成功！
2021-12-11 15:41:35,260-[Ftest_register03.py - 73]-INFO:测试编号21,测试用例注册接口性别为男+女的场景,成功！
2021-12-11 15:41:35,388-[Ftest_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:41:35,389-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:41:35,478-[Ftest_register03.py - 73]-INFO:测试编号23,测试用例注册接口生日年月日不完整的场景,成功！
2021-12-11 15:41:35,565-[Ftest_register03.py - 73]-INFO:测试编号24,测试用例注册接口生日输入非数字的场景,成功！
2021-12-11 15:41:35,673-[Ftest_register03.py - 73]-INFO:测试编号25,测试用例注册接口生日月份超过12月的场景,成功！
2021-12-11 15:41:35,787-[Ftest_register03.py - 73]-INFO:测试编号26,测试用例注册接口生日日期超过31的场景,成功！
2021-12-11 15:41:35,886-[Ftest_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:41:35,886-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:41:35,984-[Ftest_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:41:35,984-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:41:36,121-[Ftest_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:41:36,121-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:41:36,213-[Ftest_register03.py - 73]-INFO:测试编号30,测试用例注册接口QQ为非数字的场景,成功！
2021-12-11 15:41:36,298-[Ftest_register03.py - 73]-INFO:测试编号31,测试用例注册接口QQ为无效边界的场景（3、21）,成功！
2021-12-11 15:41:36,419-[Ftest_register03.py - 73]-INFO:测试编号32,测试用例注册接口邮箱已注册的场景,成功！
2021-12-11 15:41:36,517-[Ftest_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-11 15:41:36,517-[Ftest_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-11 15:44:09,275-[Ftest_register03.py - 73]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-11 15:44:09,368-[Ftest_register03.py - 73]-INFO:测试编号2,测试用例注册接口用户名为空的场景,成功！
2021-12-11 15:44:09,460-[Ftest_register03.py - 73]-INFO:测试编号3,测试用例注册接口用户名有限边界值的场景（6-8）,成功！
2021-12-11 15:44:09,548-[Ftest_register03.py - 73]-INFO:测试编号4,测试用例注册接口用户名无效边界值9位的场景,成功！
2021-12-11 15:44:09,637-[Ftest_register03.py - 73]-INFO:测试编号5,测试用例注册接口用户名非字母开头的场景,成功！
2021-12-11 15:44:09,724-[Ftest_register03.py - 73]-INFO:测试编号6,测试用例注册接口用户名包含符号或者汉字的场景,成功！
2021-12-11 15:44:09,819-[Ftest_register03.py - 73]-INFO:测试编号7,测试用例注册接口用户名已注册的场景,成功！
2021-12-11 15:44:09,904-[Ftest_register03.py - 73]-INFO:测试编号8,测试用例注册接口密码为空的场景,成功！
2021-12-11 15:44:10,008-[Ftest_register03.py - 73]-INFO:测试编号9,测试用例注册接口密码有限边界值的场景（7-11）,成功！
2021-12-11 15:44:10,095-[Ftest_register03.py - 73]-INFO:测试编号10,测试用例注册接口密码无效边界值6位的场景,成功！
2021-12-11 15:44:10,182-[Ftest_register03.py - 73]-INFO:测试编号11,测试用例注册接口密码无效边界值12位的场景,成功！
2021-12-11 15:44:10,286-[Ftest_register03.py - 73]-INFO:测试编号12,测试用例注册接口密码包含符号或汉字的场景,成功！
2021-12-11 15:44:10,387-[Ftest_register03.py - 73]-INFO:测试编号13,测试用例注册接口确认密码为空的场景,成功！
2021-12-11 15:44:10,503-[Ftest_register03.py - 73]-INFO:测试编号14,测试用例注册接口确认密码和密码不一致的场景,成功！
2021-12-11 15:44:10,591-[Ftest_register03.py - 73]-INFO:测试编号15,测试用例注册接口确认密码大小写区分的场景,成功！
2021-12-11 15:44:10,678-[Ftest_register03.py - 73]-INFO:测试编号16,测试用例注册接口手机号为空的场景,成功！
2021-12-11 15:44:10,781-[Ftest_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:44:10,781-[Ftest_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:44:10,870-[Ftest_register03.py - 73]-INFO:测试编号18,测试用例注册接口手机号为非11位数字的场景,成功！
2021-12-11 15:44:10,957-[Ftest_register03.py - 73]-INFO:测试编号19,测试用例注册接口手机号为非数字的场景,成功！
2021-12-11 15:44:11,056-[Ftest_register03.py - 73]-INFO:测试编号20,测试用例注册接口性别为非枚举的场景,成功！
2021-12-11 15:44:11,146-[Ftest_register03.py - 73]-INFO:测试编号21,测试用例注册接口性别为男+女的场景,成功！
2021-12-11 15:44:11,239-[Ftest_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:44:11,239-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:44:11,327-[Ftest_register03.py - 73]-INFO:测试编号23,测试用例注册接口生日年月日不完整的场景,成功！
2021-12-11 15:44:11,415-[Ftest_register03.py - 73]-INFO:测试编号24,测试用例注册接口生日输入非数字的场景,成功！
2021-12-11 15:44:11,518-[Ftest_register03.py - 73]-INFO:测试编号25,测试用例注册接口生日月份超过12月的场景,成功！
2021-12-11 15:44:11,622-[Ftest_register03.py - 73]-INFO:测试编号26,测试用例注册接口生日日期超过31的场景,成功！
2021-12-11 15:44:11,720-[Ftest_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:44:11,720-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:44:11,823-[Ftest_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:44:11,823-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:44:11,927-[Ftest_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:44:11,927-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:44:12,018-[Ftest_register03.py - 73]-INFO:测试编号30,测试用例注册接口QQ为非数字的场景,成功！
2021-12-11 15:44:12,105-[Ftest_register03.py - 73]-INFO:测试编号31,测试用例注册接口QQ为无效边界的场景（3、21）,成功！
2021-12-11 15:44:12,216-[Ftest_register03.py - 73]-INFO:测试编号32,测试用例注册接口邮箱已注册的场景,成功！
2021-12-11 15:44:12,338-[Ftest_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-11 15:44:12,339-[Ftest_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-11 15:44:26,075-[test_token_goodsinfo2.py - 42]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行失败!实际结果
2021-12-11 15:44:38,377-[test_token_goodsinfo2.py - 42]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行失败!实际结果
2021-12-11 15:46:05,960-[test_register03.py - 73]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-11 15:46:06,043-[test_register03.py - 73]-INFO:测试编号2,测试用例注册接口用户名为空的场景,成功！
2021-12-11 15:46:06,133-[test_register03.py - 73]-INFO:测试编号3,测试用例注册接口用户名有限边界值的场景（6-8）,成功！
2021-12-11 15:46:06,218-[test_register03.py - 73]-INFO:测试编号4,测试用例注册接口用户名无效边界值9位的场景,成功！
2021-12-11 15:46:06,301-[test_register03.py - 73]-INFO:测试编号5,测试用例注册接口用户名非字母开头的场景,成功！
2021-12-11 15:46:06,388-[test_register03.py - 73]-INFO:测试编号6,测试用例注册接口用户名包含符号或者汉字的场景,成功！
2021-12-11 15:46:06,500-[test_register03.py - 73]-INFO:测试编号7,测试用例注册接口用户名已注册的场景,成功！
2021-12-11 15:46:06,594-[test_register03.py - 73]-INFO:测试编号8,测试用例注册接口密码为空的场景,成功！
2021-12-11 15:46:06,682-[test_register03.py - 73]-INFO:测试编号9,测试用例注册接口密码有限边界值的场景（7-11）,成功！
2021-12-11 15:46:06,767-[test_register03.py - 73]-INFO:测试编号10,测试用例注册接口密码无效边界值6位的场景,成功！
2021-12-11 15:46:06,852-[test_register03.py - 73]-INFO:测试编号11,测试用例注册接口密码无效边界值12位的场景,成功！
2021-12-11 15:46:06,943-[test_register03.py - 73]-INFO:测试编号12,测试用例注册接口密码包含符号或汉字的场景,成功！
2021-12-11 15:46:07,027-[test_register03.py - 73]-INFO:测试编号13,测试用例注册接口确认密码为空的场景,成功！
2021-12-11 15:46:07,111-[test_register03.py - 73]-INFO:测试编号14,测试用例注册接口确认密码和密码不一致的场景,成功！
2021-12-11 15:46:07,193-[test_register03.py - 73]-INFO:测试编号15,测试用例注册接口确认密码大小写区分的场景,成功！
2021-12-11 15:46:07,278-[test_register03.py - 73]-INFO:测试编号16,测试用例注册接口手机号为空的场景,成功！
2021-12-11 15:46:07,414-[test_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:46:07,414-[test_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:46:07,503-[test_register03.py - 73]-INFO:测试编号18,测试用例注册接口手机号为非11位数字的场景,成功！
2021-12-11 15:46:07,627-[test_register03.py - 73]-INFO:测试编号19,测试用例注册接口手机号为非数字的场景,成功！
2021-12-11 15:46:07,723-[test_register03.py - 73]-INFO:测试编号20,测试用例注册接口性别为非枚举的场景,成功！
2021-12-11 15:46:07,813-[test_register03.py - 73]-INFO:测试编号21,测试用例注册接口性别为男+女的场景,成功！
2021-12-11 15:46:07,900-[test_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:46:07,900-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:46:07,991-[test_register03.py - 73]-INFO:测试编号23,测试用例注册接口生日年月日不完整的场景,成功！
2021-12-11 15:46:08,094-[test_register03.py - 73]-INFO:测试编号24,测试用例注册接口生日输入非数字的场景,成功！
2021-12-11 15:46:08,176-[test_register03.py - 73]-INFO:测试编号25,测试用例注册接口生日月份超过12月的场景,成功！
2021-12-11 15:46:08,263-[test_register03.py - 73]-INFO:测试编号26,测试用例注册接口生日日期超过31的场景,成功！
2021-12-11 15:46:08,358-[test_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:46:08,359-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:46:08,445-[test_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:46:08,446-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:46:08,553-[test_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:46:08,553-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:46:08,645-[test_register03.py - 73]-INFO:测试编号30,测试用例注册接口QQ为非数字的场景,成功！
2021-12-11 15:46:08,734-[test_register03.py - 73]-INFO:测试编号31,测试用例注册接口QQ为无效边界的场景（3、21）,成功！
2021-12-11 15:46:08,900-[test_register03.py - 73]-INFO:测试编号32,测试用例注册接口邮箱已注册的场景,成功！
2021-12-11 15:46:09,029-[test_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-11 15:46:09,030-[test_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-11 15:47:22,138-[test_token_goodsinfo2.py - 42]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 16:05:18,616-[test_token_goodsinfo2.py - 42]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 16:25:25,121-[Ftest_register03.py - 73]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-11 16:25:25,211-[Ftest_register03.py - 73]-INFO:测试编号2,测试用例注册接口用户名为空的场景,成功！
2021-12-11 16:25:25,306-[Ftest_register03.py - 73]-INFO:测试编号3,测试用例注册接口用户名有限边界值的场景（6-8）,成功！
2021-12-11 16:25:25,394-[Ftest_register03.py - 73]-INFO:测试编号4,测试用例注册接口用户名无效边界值9位的场景,成功！
2021-12-11 16:25:25,493-[Ftest_register03.py - 73]-INFO:测试编号5,测试用例注册接口用户名非字母开头的场景,成功！
2021-12-11 16:25:25,581-[Ftest_register03.py - 73]-INFO:测试编号6,测试用例注册接口用户名包含符号或者汉字的场景,成功！
2021-12-11 16:25:25,687-[Ftest_register03.py - 73]-INFO:测试编号7,测试用例注册接口用户名已注册的场景,成功！
2021-12-11 16:25:25,787-[Ftest_register03.py - 73]-INFO:测试编号8,测试用例注册接口密码为空的场景,成功！
2021-12-11 16:25:25,880-[Ftest_register03.py - 73]-INFO:测试编号9,测试用例注册接口密码有限边界值的场景（7-11）,成功！
2021-12-11 16:25:25,966-[Ftest_register03.py - 73]-INFO:测试编号10,测试用例注册接口密码无效边界值6位的场景,成功！
2021-12-11 16:25:26,057-[Ftest_register03.py - 73]-INFO:测试编号11,测试用例注册接口密码无效边界值12位的场景,成功！
2021-12-11 16:25:26,151-[Ftest_register03.py - 73]-INFO:测试编号12,测试用例注册接口密码包含符号或汉字的场景,成功！
2021-12-11 16:25:26,250-[Ftest_register03.py - 73]-INFO:测试编号13,测试用例注册接口确认密码为空的场景,成功！
2021-12-11 16:25:26,335-[Ftest_register03.py - 73]-INFO:测试编号14,测试用例注册接口确认密码和密码不一致的场景,成功！
2021-12-11 16:25:26,421-[Ftest_register03.py - 73]-INFO:测试编号15,测试用例注册接口确认密码大小写区分的场景,成功！
2021-12-11 16:25:26,507-[Ftest_register03.py - 73]-INFO:测试编号16,测试用例注册接口手机号为空的场景,成功！
2021-12-11 16:25:26,610-[Ftest_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 16:25:26,610-[Ftest_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 16:25:26,699-[Ftest_register03.py - 73]-INFO:测试编号18,测试用例注册接口手机号为非11位数字的场景,成功！
2021-12-11 16:25:26,790-[Ftest_register03.py - 73]-INFO:测试编号19,测试用例注册接口手机号为非数字的场景,成功！
2021-12-11 16:25:26,890-[Ftest_register03.py - 73]-INFO:测试编号20,测试用例注册接口性别为非枚举的场景,成功！
2021-12-11 16:25:26,989-[Ftest_register03.py - 73]-INFO:测试编号21,测试用例注册接口性别为男+女的场景,成功！
2021-12-11 16:25:27,082-[Ftest_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 16:25:27,082-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 16:25:27,172-[Ftest_register03.py - 73]-INFO:测试编号23,测试用例注册接口生日年月日不完整的场景,成功！
2021-12-11 16:25:27,258-[Ftest_register03.py - 73]-INFO:测试编号24,测试用例注册接口生日输入非数字的场景,成功！
2021-12-11 16:25:27,348-[Ftest_register03.py - 73]-INFO:测试编号25,测试用例注册接口生日月份超过12月的场景,成功！
2021-12-11 16:25:27,459-[Ftest_register03.py - 73]-INFO:测试编号26,测试用例注册接口生日日期超过31的场景,成功！
2021-12-11 16:25:27,549-[Ftest_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 16:25:27,549-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 16:25:27,639-[Ftest_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 16:25:27,639-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 16:25:27,748-[Ftest_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 16:25:27,748-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 16:25:27,834-[Ftest_register03.py - 73]-INFO:测试编号30,测试用例注册接口QQ为非数字的场景,成功！
2021-12-11 16:25:27,922-[Ftest_register03.py - 73]-INFO:测试编号31,测试用例注册接口QQ为无效边界的场景（3、21）,成功！
2021-12-11 16:25:28,063-[Ftest_register03.py - 73]-INFO:测试编号32,测试用例注册接口邮箱已注册的场景,成功！
2021-12-11 16:25:28,175-[Ftest_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-11 16:25:28,175-[Ftest_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-11 16:26:20,387-[test_token_goodsinfo2.py - 42]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:32:30,175-[test_token_goodsinfo2.py - 42]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:32:30,300-[test_token_goodsinfo2.py - 36]-ERROR:测试案例2,测试用例标题token值为空的场景,执行失败!实际结果{'code': 1001, 'msg': 'token值不能为空'}
2021-12-11 17:32:30,300-[test_token_goodsinfo2.py - 37]-ERROR:'{"code": 1001, "msg": "token值不能为空"}' not found in "{'code': 1001, 'msg': 'token值不能为空'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 33, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1001, "msg": "token值不能为空"}' not found in "{'code': 1001, 'msg': 'token值不能为空'}"
2021-12-11 17:32:30,432-[test_token_goodsinfo2.py - 36]-ERROR:测试案例3,测试用例标题商品编号为5位数字的场景,执行失败!实际结果{'code': 1002, 'msg': '商品编号必须为6位数字'}
2021-12-11 17:32:30,433-[test_token_goodsinfo2.py - 37]-ERROR:'{"code":\xa01001,\xa0"msg":\xa0"token值不能为空"}' not found in "{'code': 1002, 'msg': '商品编号必须为6位数字'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 33, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code":\xa01001,\xa0"msg":\xa0"token值不能为空"}' not found in "{'code': 1002, 'msg': '商品编号必须为6位数字'}"
2021-12-11 17:32:30,562-[test_token_goodsinfo2.py - 36]-ERROR:测试案例4,测试用例标题商品编号为7位数字的场景,执行失败!实际结果{'code': 1002, 'msg': '商品编号必须为6位数字'}
2021-12-11 17:32:30,563-[test_token_goodsinfo2.py - 37]-ERROR:'{"code": 1002, "msg": "商品编号必须为6位数字"}' not found in "{'code': 1002, 'msg': '商品编号必须为6位数字'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 33, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1002, "msg": "商品编号必须为6位数字"}' not found in "{'code': 1002, 'msg': '商品编号必须为6位数字'}"
2021-12-11 17:32:30,699-[test_token_goodsinfo2.py - 36]-ERROR:测试案例5,测试用例标题商品编号为非6位纯数字的场景,执行失败!实际结果{'code': 1002, 'msg': '商品编号必须为6位数字'}
2021-12-11 17:32:30,700-[test_token_goodsinfo2.py - 37]-ERROR:'{"code":\xa01002,\xa0"msg":\xa0"商品编号必须为6位数字"}' not found in "{'code': 1002, 'msg': '商品编号必须为6位数字'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 33, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code":\xa01002,\xa0"msg":\xa0"商品编号必须为6位数字"}' not found in "{'code': 1002, 'msg': '商品编号必须为6位数字'}"
2021-12-11 17:32:30,812-[test_token_goodsinfo2.py - 36]-ERROR:测试案例6,测试用例标题销售状态非枚举的场景,执行失败!实际结果{'code': 1005, 'msg': '商品销售状态必须为0或者1'}
2021-12-11 17:32:30,812-[test_token_goodsinfo2.py - 37]-ERROR:'{"code":\xa01005,\xa0"msg":\xa0"商品销售状态必须为0或者1"}' not found in "{'code': 1005, 'msg': '商品销售状态必须为0或者1'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 33, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code":\xa01005,\xa0"msg":\xa0"商品销售状态必须为0或者1"}' not found in "{'code': 1005, 'msg': '商品销售状态必须为0或者1'}"
2021-12-11 17:32:30,931-[test_token_goodsinfo2.py - 36]-ERROR:测试案例7,测试用例标题销售不对应的场景,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-11 17:32:30,931-[test_token_goodsinfo2.py - 37]-ERROR:'{"code":\xa01008,\xa0"msg":\xa0"没有符合条件的数据"}' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 33, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code":\xa01008,\xa0"msg":\xa0"没有符合条件的数据"}' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-11 17:32:31,051-[test_token_goodsinfo2.py - 36]-ERROR:测试案例8,测试用例标题促销状态不对应的场景,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-11 17:32:31,051-[test_token_goodsinfo2.py - 37]-ERROR:'{"code":\xa01008,\xa0"msg":\xa0"没有符合条件的数据"}' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 33, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code":\xa01008,\xa0"msg":\xa0"没有符合条件的数据"}' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-11 17:32:31,172-[test_token_goodsinfo2.py - 36]-ERROR:测试案例9,测试用例标题促销状态非枚举的场景,执行失败!实际结果{'code': 1006, 'msg': '商品促销状态必须为0或者1'}
2021-12-11 17:32:31,172-[test_token_goodsinfo2.py - 37]-ERROR:'{"code":\xa01006,\xa0"msg":\xa0"商品促销状态必须为0或者1"}' not found in "{'code': 1006, 'msg': '商品促销状态必须为0或者1'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 33, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code":\xa01006,\xa0"msg":\xa0"商品促销状态必须为0或者1"}' not found in "{'code': 1006, 'msg': '商品促销状态必须为0或者1'}"
2021-12-11 17:35:54,090-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:35:54,192-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:35:54,342-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-11 17:39:45,954-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:39:46,061-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:39:46,181-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-11 17:41:40,109-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:41:40,250-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:42:05,725-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:42:05,833-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:43:20,138-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:43:20,244-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:44:27,289-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:44:27,412-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:45:22,896-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:45:23,055-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:45:54,133-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:45:54,241-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:48:41,890-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:48:41,995-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:48:42,103-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-11 17:49:04,441-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:49:04,563-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:49:04,664-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-11 17:49:04,796-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-11 17:49:48,760-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:49:48,879-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:49:48,983-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-11 17:49:49,084-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-11 17:51:06,664-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:51:06,764-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:51:06,889-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-11 17:51:07,005-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-11 17:51:37,741-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:51:37,868-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:51:37,974-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-11 17:51:38,094-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-11 17:51:38,199-[test_token_goodsinfo2.py - 45]-INFO:测试案例5,测试用例标题商品编号为非6位纯数字的场景,执行成功
2021-12-11 17:53:51,550-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:53:51,655-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:53:51,756-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-11 17:53:51,857-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-11 17:53:51,959-[test_token_goodsinfo2.py - 45]-INFO:测试案例5,测试用例标题商品编号为非6位纯数字的场景,执行成功
2021-12-11 17:54:45,857-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:54:45,973-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:54:46,076-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-11 17:54:46,177-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-11 17:54:46,277-[test_token_goodsinfo2.py - 45]-INFO:测试案例5,测试用例标题商品编号为非6位纯数字的场景,执行成功
2021-12-11 17:54:46,401-[test_token_goodsinfo2.py - 45]-INFO:测试案例6,测试用例标题销售状态非枚举的场景,执行成功
2021-12-11 17:55:52,567-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:55:52,685-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:55:52,791-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-11 17:55:52,892-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-11 17:55:52,993-[test_token_goodsinfo2.py - 45]-INFO:测试案例5,测试用例标题商品编号为非6位纯数字的场景,执行成功
2021-12-11 17:55:53,096-[test_token_goodsinfo2.py - 45]-INFO:测试案例6,测试用例标题销售状态非枚举的场景,执行成功
2021-12-11 17:55:53,203-[test_token_goodsinfo2.py - 45]-INFO:测试案例7,测试用例标题销售不对应的场景,执行成功
2021-12-11 17:55:53,309-[test_token_goodsinfo2.py - 45]-INFO:测试案例8,测试用例标题促销状态不对应的场景,执行成功
2021-12-11 17:55:53,413-[test_token_goodsinfo2.py - 39]-ERROR:测试案例9,测试用例标题促销状态非枚举的场景,执行失败!实际结果{'code': 1006, 'msg': '商品促销状态必须为0或者1'}
2021-12-11 17:55:53,414-[test_token_goodsinfo2.py - 40]-ERROR:{'code': 1005, 'msg': '商品销售状态必须为0或者1'} != {'code': 1006, 'msg': '商品促销状态必须为0或者1'}
- {'code': 1005, 'msg': '商品销售状态必须为0或者1'}
?             ^             -

+ {'code': 1006, 'msg': '商品促销状态必须为0或者1'}
?             ^            +
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 36, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': '商品销售状态必须为0或者1'} != {'code': 1006, 'msg': '商品促销状态必须为0或者1'}
- {'code': 1005, 'msg': '商品销售状态必须为0或者1'}
?             ^             -

+ {'code': 1006, 'msg': '商品促销状态必须为0或者1'}
?             ^            +

2021-12-11 17:56:23,539-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:56:23,649-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:56:23,749-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-11 17:56:23,850-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-11 17:56:23,969-[test_token_goodsinfo2.py - 45]-INFO:测试案例5,测试用例标题商品编号为非6位纯数字的场景,执行成功
2021-12-11 17:56:24,072-[test_token_goodsinfo2.py - 45]-INFO:测试案例6,测试用例标题销售状态非枚举的场景,执行成功
2021-12-11 17:56:24,189-[test_token_goodsinfo2.py - 45]-INFO:测试案例7,测试用例标题销售不对应的场景,执行成功
2021-12-11 17:56:24,305-[test_token_goodsinfo2.py - 45]-INFO:测试案例8,测试用例标题促销状态不对应的场景,执行成功
2021-12-11 17:56:24,411-[test_token_goodsinfo2.py - 39]-ERROR:测试案例9,测试用例标题促销状态非枚举的场景,执行失败!实际结果{'code': 1006, 'msg': '商品促销状态必须为0或者1'}
2021-12-11 17:56:24,411-[test_token_goodsinfo2.py - 40]-ERROR:{'code': 1006, 'msg': '商品销售状态必须为0或者1'} != {'code': 1006, 'msg': '商品促销状态必须为0或者1'}
- {'code': 1006, 'msg': '商品销售状态必须为0或者1'}
?                           -

+ {'code': 1006, 'msg': '商品促销状态必须为0或者1'}
?                          +
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 36, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1006, 'msg': '商品销售状态必须为0或者1'} != {'code': 1006, 'msg': '商品促销状态必须为0或者1'}
- {'code': 1006, 'msg': '商品销售状态必须为0或者1'}
?                           -

+ {'code': 1006, 'msg': '商品促销状态必须为0或者1'}
?                          +

2021-12-11 17:57:28,058-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:57:28,165-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:57:28,266-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-11 17:57:28,364-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-11 17:57:28,463-[test_token_goodsinfo2.py - 45]-INFO:测试案例5,测试用例标题商品编号为非6位纯数字的场景,执行成功
2021-12-11 17:57:28,575-[test_token_goodsinfo2.py - 45]-INFO:测试案例6,测试用例标题销售状态非枚举的场景,执行成功
2021-12-11 17:57:28,694-[test_token_goodsinfo2.py - 45]-INFO:测试案例7,测试用例标题销售不对应的场景,执行成功
2021-12-11 17:57:28,805-[test_token_goodsinfo2.py - 45]-INFO:测试案例8,测试用例标题促销状态不对应的场景,执行成功
2021-12-11 17:57:28,912-[test_token_goodsinfo2.py - 45]-INFO:测试案例9,测试用例标题促销状态非枚举的场景,执行成功
2021-12-11 17:58:10,226-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-11 17:58:10,330-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-11 17:58:10,453-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-11 17:58:10,555-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-11 17:58:10,659-[test_token_goodsinfo2.py - 45]-INFO:测试案例5,测试用例标题商品编号为非6位纯数字的场景,执行成功
2021-12-11 17:58:10,778-[test_token_goodsinfo2.py - 45]-INFO:测试案例6,测试用例标题销售状态非枚举的场景,执行成功
2021-12-11 17:58:10,905-[test_token_goodsinfo2.py - 45]-INFO:测试案例7,测试用例标题销售不对应的场景,执行成功
2021-12-11 17:58:11,017-[test_token_goodsinfo2.py - 45]-INFO:测试案例8,测试用例标题促销状态不对应的场景,执行成功
2021-12-11 17:58:11,123-[test_token_goodsinfo2.py - 45]-INFO:测试案例9,测试用例标题促销状态非枚举的场景,执行成功
2021-12-13 08:57:10,110-[Ftest_token_goodsinfo1.py - 36]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行失败!实际结果
2021-12-13 08:57:16,301-[Ftest_token_goodsinfo1.py - 36]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行失败!实际结果
2021-12-13 08:58:14,326-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-13 08:58:14,435-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-13 08:58:14,560-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-13 08:58:14,685-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-13 08:58:14,810-[test_token_goodsinfo2.py - 45]-INFO:测试案例5,测试用例标题商品编号为非6位纯数字的场景,执行成功
2021-12-13 08:58:14,919-[test_token_goodsinfo2.py - 45]-INFO:测试案例6,测试用例标题销售状态非枚举的场景,执行成功
2021-12-13 08:58:15,013-[test_token_goodsinfo2.py - 45]-INFO:测试案例7,测试用例标题销售不对应的场景,执行成功
2021-12-13 08:58:15,138-[test_token_goodsinfo2.py - 45]-INFO:测试案例8,测试用例标题促销状态不对应的场景,执行成功
2021-12-13 08:58:15,238-[test_token_goodsinfo2.py - 45]-INFO:测试案例9,测试用例标题促销状态非枚举的场景,执行成功
2021-12-13 08:58:34,686-[Ftest_token_goodsinfo1.py - 36]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功!
2021-12-13 09:07:40,844-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-13 09:07:40,942-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-13 09:07:41,054-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-13 09:07:41,167-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-13 09:07:41,277-[test_token_goodsinfo2.py - 45]-INFO:测试案例5,测试用例标题商品编号为非6位纯数字的场景,执行成功
2021-12-13 09:07:41,382-[test_token_goodsinfo2.py - 45]-INFO:测试案例6,测试用例标题销售状态非枚举的场景,执行成功
2021-12-13 09:07:41,484-[test_token_goodsinfo2.py - 45]-INFO:测试案例7,测试用例标题销售不对应的场景,执行成功
2021-12-13 09:07:41,585-[test_token_goodsinfo2.py - 45]-INFO:测试案例8,测试用例标题促销状态不对应的场景,执行成功
2021-12-13 09:07:41,682-[test_token_goodsinfo2.py - 45]-INFO:测试案例9,测试用例标题促销状态非枚举的场景,执行成功
2021-12-13 09:26:19,235-[Ftest_login3.py - 68]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-13 09:26:19,387-[Ftest_login3.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-13 09:26:19,504-[Ftest_login3.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-13 09:26:19,663-[Ftest_login3.py - 63]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM4ODc3OS41MTE2NDg6Y2VlZDU0ZDRmOWJiNTcwNTdiM2IwYWY4ZDY2M2I0ZDlkYTZiYTM0NQ=='}
2021-12-13 09:26:19,674-[Ftest_login3.py - 64]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM4ODc3O[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM4ODc3OS41MTE2NDg6Y2VlZDU0ZDRmOWJiNTcwNTdiM2IwYWY4ZDY2M2I0ZDlkYTZiYTM0NQ=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM4ODc3O[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM4ODc3OS41MTE2NDg6Y2VlZDU0ZDRmOWJiNTcwNTdiM2IwYWY4ZDY2M2I0ZDlkYTZiYTM0NQ=='}
2021-12-13 09:26:19,820-[Ftest_login3.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-13 09:26:19,943-[Ftest_login3.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-13 09:26:20,096-[Ftest_login3.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-13 09:26:20,225-[Ftest_login3.py - 63]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM4ODc4MC4xMDI2MDU4OjM3YTZhZjU3ZjljNTQ2ZDgwYWIzY2Y1Yzg5NWZiOTU0ODZiNTRkMjc='}
2021-12-13 09:26:20,225-[Ftest_login3.py - 64]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM4ODc4M[64 chars]jc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM4ODc4MC4xMDI2MDU4OjM3YTZhZjU3ZjljNTQ2ZDgwYWIzY2Y1Yzg5NWZiOTU0ODZiNTRkMjc='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM4ODc4M[64 chars]jc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM4ODc4MC4xMDI2MDU4OjM3YTZhZjU3ZjljNTQ2ZDgwYWIzY2Y1Yzg5NWZiOTU0ODZiNTRkMjc='}
2021-12-13 09:26:20,363-[Ftest_login3.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-13 09:26:20,475-[Ftest_login3.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-13 09:26:20,592-[Ftest_login3.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-13 09:48:04,403-[Ftest_login3.py - 69]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-13 09:48:04,548-[Ftest_login3.py - 69]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-13 09:48:04,653-[Ftest_login3.py - 69]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-13 09:48:04,799-[Ftest_login3.py - 64]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDA4NC42NTg4OTc0OmQ1MTU2N2UxY2E2ZDU5NjFhNzBmYjI5NDQwNTRmOTkxOGMzNWVlMGU='}
2021-12-13 09:48:04,799-[Ftest_login3.py - 65]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDA4N[64 chars]GU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDA4NC42NTg4OTc0OmQ1MTU2N2UxY2E2ZDU5NjFhNzBmYjI5NDQwNTRmOTkxOGMzNWVlMGU='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 61, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDA4N[64 chars]GU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDA4NC42NTg4OTc0OmQ1MTU2N2UxY2E2ZDU5NjFhNzBmYjI5NDQwNTRmOTkxOGMzNWVlMGU='}
2021-12-13 09:48:04,906-[Ftest_login3.py - 69]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-13 09:48:04,997-[Ftest_login3.py - 69]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-13 09:48:05,090-[Ftest_login3.py - 69]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-13 09:48:05,182-[Ftest_login3.py - 64]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDA4NS4wOTY4MDc1OjFlNWE0Nzk2MmEwYWZmZjFiOGZhMGI4MTgzNTM0NDRhZGZiNjk1MTY='}
2021-12-13 09:48:05,182-[Ftest_login3.py - 65]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDA4N[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDA4NS4wOTY4MDc1OjFlNWE0Nzk2MmEwYWZmZjFiOGZhMGI4MTgzNTM0NDRhZGZiNjk1MTY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 61, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDA4N[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDA4NS4wOTY4MDc1OjFlNWE0Nzk2MmEwYWZmZjFiOGZhMGI4MTgzNTM0NDRhZGZiNjk1MTY='}
2021-12-13 09:48:05,286-[Ftest_login3.py - 69]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-13 09:48:05,394-[Ftest_login3.py - 69]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-13 09:48:05,497-[Ftest_login3.py - 69]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-13 09:48:40,742-[Ftest_login3.py - 68]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-13 09:48:40,840-[Ftest_login3.py - 68]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-13 09:48:40,950-[Ftest_login3.py - 68]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-13 09:48:41,068-[Ftest_login3.py - 63]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDEyMC45NTc2Nzg2OjE1OWU1MDY3MjJhYjg5YjgxNmI5ODY1MTg0NTE3YWYwMmEzYzU0YWE='}
2021-12-13 09:48:41,069-[Ftest_login3.py - 64]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDEyM[64 chars]WE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDEyMC45NTc2Nzg2OjE1OWU1MDY3MjJhYjg5YjgxNmI5ODY1MTg0NTE3YWYwMmEzYzU0YWE='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDEyM[64 chars]WE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDEyMC45NTc2Nzg2OjE1OWU1MDY3MjJhYjg5YjgxNmI5ODY1MTg0NTE3YWYwMmEzYzU0YWE='}
2021-12-13 09:48:41,180-[Ftest_login3.py - 68]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-13 09:48:41,279-[Ftest_login3.py - 68]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-13 09:48:41,374-[Ftest_login3.py - 68]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-13 09:48:41,478-[Ftest_login3.py - 63]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDEyMS4zODEyNzIzOjRkZGIyMDYwNDIyNzFlN2QxY2Q2NThmODA3ZTYyYWQ1OGNhMDBiY2I='}
2021-12-13 09:48:41,478-[Ftest_login3.py - 64]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDEyM[64 chars]2I='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDEyMS4zODEyNzIzOjRkZGIyMDYwNDIyNzFlN2QxY2Q2NThmODA3ZTYyYWQ1OGNhMDBiY2I='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDEyM[64 chars]2I='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDEyMS4zODEyNzIzOjRkZGIyMDYwNDIyNzFlN2QxY2Q2NThmODA3ZTYyYWQ1OGNhMDBiY2I='}
2021-12-13 09:48:41,588-[Ftest_login3.py - 68]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-13 09:48:41,687-[Ftest_login3.py - 68]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-13 09:48:41,786-[Ftest_login3.py - 68]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-13 09:50:03,646-[Ftest_login4.py - 64]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-13 09:50:03,744-[Ftest_login4.py - 64]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-13 09:50:03,844-[Ftest_login4.py - 64]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-13 09:50:03,940-[Ftest_login4.py - 59]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDIwMy44NTAyOTE3OmI3Mjk3YWNmMjRkOTUyNGRiYzEwMTZhMjNhYTIyZTM0NWJiZDIyOWY='}
2021-12-13 09:50:03,941-[Ftest_login4.py - 60]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDIwM[64 chars]WY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDIwMy44NTAyOTE3OmI3Mjk3YWNmMjRkOTUyNGRiYzEwMTZhMjNhYTIyZTM0NWJiZDIyOWY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login4.py", line 56, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDIwM[64 chars]WY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDIwMy44NTAyOTE3OmI3Mjk3YWNmMjRkOTUyNGRiYzEwMTZhMjNhYTIyZTM0NWJiZDIyOWY='}
2021-12-13 09:50:04,038-[Ftest_login4.py - 64]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-13 09:50:04,131-[Ftest_login4.py - 64]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-13 09:50:04,240-[Ftest_login4.py - 64]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-13 09:50:04,337-[Ftest_login4.py - 59]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDIwNC4yNDU5NTY3OjRjZDQyNGUyMTc1MmMwODZlODg1NzY2MmIzYWE3OTc1NzM4ZmUyNmY='}
2021-12-13 09:50:04,337-[Ftest_login4.py - 60]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDIwN[64 chars]mY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDIwNC4yNDU5NTY3OjRjZDQyNGUyMTc1MmMwODZlODg1NzY2MmIzYWE3OTc1NzM4ZmUyNmY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login4.py", line 56, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDIwN[64 chars]mY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDIwNC4yNDU5NTY3OjRjZDQyNGUyMTc1MmMwODZlODg1NzY2MmIzYWE3OTc1NzM4ZmUyNmY='}
2021-12-13 09:50:04,437-[Ftest_login4.py - 64]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-13 09:50:04,533-[Ftest_login4.py - 64]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-13 09:50:04,643-[Ftest_login4.py - 64]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-13 10:28:27,572-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-13 10:28:27,704-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-13 10:28:27,842-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-13 10:28:27,971-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-13 10:28:28,084-[test_token_goodsinfo2.py - 45]-INFO:测试案例5,测试用例标题商品编号为非6位纯数字的场景,执行成功
2021-12-13 10:28:28,195-[test_token_goodsinfo2.py - 45]-INFO:测试案例6,测试用例标题销售状态非枚举的场景,执行成功
2021-12-13 10:28:28,302-[test_token_goodsinfo2.py - 45]-INFO:测试案例7,测试用例标题销售不对应的场景,执行成功
2021-12-13 10:28:28,443-[test_token_goodsinfo2.py - 45]-INFO:测试案例8,测试用例标题促销状态不对应的场景,执行成功
2021-12-13 10:28:28,547-[test_token_goodsinfo2.py - 45]-INFO:测试案例9,测试用例标题促销状态非枚举的场景,执行成功
2021-12-13 10:29:28,533-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-13 10:29:28,654-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-13 10:29:28,769-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-13 10:29:28,893-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-13 10:29:29,027-[test_token_goodsinfo2.py - 45]-INFO:测试案例5,测试用例标题商品编号为非6位纯数字的场景,执行成功
2021-12-13 10:29:29,140-[test_token_goodsinfo2.py - 45]-INFO:测试案例6,测试用例标题销售状态非枚举的场景,执行成功
2021-12-13 10:29:29,254-[test_token_goodsinfo2.py - 45]-INFO:测试案例7,测试用例标题销售不对应的场景,执行成功
2021-12-13 10:29:29,366-[test_token_goodsinfo2.py - 45]-INFO:测试案例8,测试用例标题促销状态不对应的场景,执行成功
2021-12-13 10:29:29,489-[test_token_goodsinfo2.py - 45]-INFO:测试案例9,测试用例标题促销状态非枚举的场景,执行成功
2021-12-13 10:29:29,598-[test_token_goodsinfo2.py - 45]-INFO:测试案例10,测试用例标题商品编号固定，销售状态非枚举的场景,执行成功
2021-12-13 10:30:01,082-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-13 10:30:01,194-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-13 10:30:01,299-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-13 10:30:01,404-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-13 10:30:01,534-[test_token_goodsinfo2.py - 45]-INFO:测试案例5,测试用例标题商品编号为非6位纯数字的场景,执行成功
2021-12-13 10:30:01,640-[test_token_goodsinfo2.py - 45]-INFO:测试案例6,测试用例标题销售状态非枚举的场景,执行成功
2021-12-13 10:30:01,775-[test_token_goodsinfo2.py - 45]-INFO:测试案例7,测试用例标题销售不对应的场景,执行成功
2021-12-13 10:30:01,906-[test_token_goodsinfo2.py - 45]-INFO:测试案例8,测试用例标题促销状态不对应的场景,执行成功
2021-12-13 10:30:02,010-[test_token_goodsinfo2.py - 45]-INFO:测试案例9,测试用例标题促销状态非枚举的场景,执行成功
2021-12-13 10:30:02,124-[test_token_goodsinfo2.py - 45]-INFO:测试案例10,测试用例标题商品编号固定，销售状态非枚举的场景,执行成功
2021-12-13 10:30:02,232-[test_token_goodsinfo2.py - 45]-INFO:测试案例11,测试用例标题商品编号固定，销售状态销售不对应的场景,执行成功
2021-12-13 10:32:29,214-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-13 10:32:29,325-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-13 10:32:29,435-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-13 10:32:29,563-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-13 10:32:29,691-[test_token_goodsinfo2.py - 45]-INFO:测试案例5,测试用例标题商品编号为非6位纯数字的场景,执行成功
2021-12-13 10:32:29,802-[test_token_goodsinfo2.py - 45]-INFO:测试案例6,测试用例标题销售状态非枚举的场景,执行成功
2021-12-13 10:32:29,909-[test_token_goodsinfo2.py - 45]-INFO:测试案例7,测试用例标题销售不对应的场景,执行成功
2021-12-13 10:32:30,032-[test_token_goodsinfo2.py - 45]-INFO:测试案例8,测试用例标题促销状态不对应的场景,执行成功
2021-12-13 10:32:30,168-[test_token_goodsinfo2.py - 45]-INFO:测试案例9,测试用例标题促销状态非枚举的场景,执行成功
2021-12-13 10:32:30,337-[test_token_goodsinfo2.py - 45]-INFO:测试案例10,测试用例标题商品编号固定，销售状态非枚举的场景,执行成功
2021-12-13 10:32:30,478-[test_token_goodsinfo2.py - 45]-INFO:测试案例11,测试用例标题商品编号固定，销售状态销售不对应的场景,执行成功
2021-12-13 10:32:30,640-[test_token_goodsinfo2.py - 45]-INFO:测试案例12,测试用例标题商品编号固定，促销状态销售不对应的场景,执行成功
2021-12-13 10:33:31,232-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-13 10:34:16,803-[test_token_goodsinfo2.py - 45]-INFO:测试案例2,测试用例标题token值为空的场景,执行成功
2021-12-13 10:34:44,193-[test_token_goodsinfo2.py - 45]-INFO:测试案例3,测试用例标题商品编号为5位数字的场景,执行成功
2021-12-13 10:35:26,208-[test_token_goodsinfo2.py - 45]-INFO:测试案例4,测试用例标题商品编号为7位数字的场景,执行成功
2021-12-13 11:22:01,663-[Ftest_login3.py - 69]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-13 11:22:01,763-[Ftest_login3.py - 69]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-13 11:22:01,864-[Ftest_login3.py - 69]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-13 11:22:01,966-[Ftest_login3.py - 64]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5NTcyMS44NzAwODQzOjMwZDVjNDkxYjQzYzM2YjgzMmRjNGFjYWIzMjFkNDNkMWJhNjZhMzY='}
2021-12-13 11:22:01,966-[Ftest_login3.py - 65]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5NTcyM[64 chars]zY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5NTcyMS44NzAwODQzOjMwZDVjNDkxYjQzYzM2YjgzMmRjNGFjYWIzMjFkNDNkMWJhNjZhMzY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 61, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5NTcyM[64 chars]zY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5NTcyMS44NzAwODQzOjMwZDVjNDkxYjQzYzM2YjgzMmRjNGFjYWIzMjFkNDNkMWJhNjZhMzY='}
2021-12-13 11:22:02,100-[Ftest_login3.py - 69]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-13 11:22:02,215-[Ftest_login3.py - 69]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-13 11:22:02,321-[Ftest_login3.py - 69]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-13 11:22:02,451-[Ftest_login3.py - 64]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5NTcyMi4zMjc4NTAzOmU4ZDFhZGQ2ZGI5ZDdiYTlkNTRiMzQ4ZTgwZGFlMmI4MDZjMjgyNzI='}
2021-12-13 11:22:02,451-[Ftest_login3.py - 65]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5NTcyM[64 chars]zI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5NTcyMi4zMjc4NTAzOmU4ZDFhZGQ2ZGI5ZDdiYTlkNTRiMzQ4ZTgwZGFlMmI4MDZjMjgyNzI='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 61, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5NTcyM[64 chars]zI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5NTcyMi4zMjc4NTAzOmU4ZDFhZGQ2ZGI5ZDdiYTlkNTRiMzQ4ZTgwZGFlMmI4MDZjMjgyNzI='}
2021-12-13 11:22:02,567-[Ftest_login3.py - 69]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-13 11:22:02,672-[Ftest_login3.py - 69]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-13 11:22:02,776-[Ftest_login3.py - 69]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-13 11:54:09,083-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-13 11:54:10,760-[test_token_goodsinfo2.py - 45]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-13 12:29:27,123-[test_token_goodsinfo2.py - 61]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-13 15:29:38,243-[test_token_goodsinfo3.py - 91]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-13 16:33:51,293-[Ftest_token_goodsinfo1.py - 36]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功!
2021-12-13 16:35:42,410-[Ftest_token_goodsinfo2.py - 55]-ERROR:测试案例1,测试用例标题商品信息查询主流程,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 16:35:42,410-[Ftest_token_goodsinfo2.py - 56]-ERROR:9 != 1
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\Ftest_token_goodsinfo2.py", line 48, in test_goods_info
    self.assertEqual(res_count, db_count)  # 响应体的商品条目数和数据库的商品条目数做对比
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 9 != 1
2021-12-13 16:35:52,347-[Ftest_token_goodsinfo2.py - 55]-ERROR:测试案例1,测试用例标题商品信息查询主流程,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 16:35:52,347-[Ftest_token_goodsinfo2.py - 56]-ERROR:9 != 1
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\Ftest_token_goodsinfo2.py", line 48, in test_goods_info
    self.assertEqual(res_count, db_count)  # 响应体的商品条目数和数据库的商品条目数做对比
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 9 != 1
2021-12-13 16:37:05,373-[Ftest_token_goodsinfo2.py - 61]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-13 16:37:44,352-[test_token_goodsinfo3.py - 91]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-13 16:37:44,461-[test_token_goodsinfo3.py - 91]-INFO:测试案例2,测试用例标题商品信息查询—token为空,执行成功
2021-12-13 16:37:44,585-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 16:37:44,585-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[677 chars]99}]}
Diff is 1481 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[677 chars]99}]}
Diff is 1481 characters long. Set self.maxDiff to None to see it.
2021-12-13 16:37:44,717-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 16:37:44,717-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[677 chars]99}]}
Diff is 1481 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[677 chars]99}]}
Diff is 1481 characters long. Set self.maxDiff to None to see it.
2021-12-13 16:37:44,845-[test_token_goodsinfo3.py - 91]-INFO:测试案例5,测试用例标题商品信息查询—（不带商品）销售状态为0,执行成功
2021-12-13 16:37:44,981-[test_token_goodsinfo3.py - 91]-INFO:测试案例6,测试用例标题商品信息查询—（不带商品）销售状态为1,执行成功
2021-12-13 16:37:45,112-[test_token_goodsinfo3.py - 91]-INFO:测试案例7,测试用例标题商品信息查询—（不带商品）促销状态为0,执行成功
2021-12-13 16:37:45,235-[test_token_goodsinfo3.py - 91]-INFO:测试案例8,测试用例标题商品信息查询—（不带商品）促销状态为1,执行成功
2021-12-13 16:37:45,362-[test_token_goodsinfo3.py - 91]-INFO:测试案例9,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为0,执行成功
2021-12-13 16:37:45,487-[test_token_goodsinfo3.py - 91]-INFO:测试案例10,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为1,执行成功
2021-12-13 16:37:45,635-[test_token_goodsinfo3.py - 91]-INFO:测试案例11,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为0,执行成功
2021-12-13 16:37:45,761-[test_token_goodsinfo3.py - 91]-INFO:测试案例12,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为1,执行成功
2021-12-13 16:37:45,890-[test_token_goodsinfo3.py - 85]-ERROR:测试案例13,测试用例标题商品信息查询—（带商品）销售状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:45,890-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:37:46,008-[test_token_goodsinfo3.py - 85]-ERROR:测试案例14,测试用例标题商品信息查询—（带商品）销售状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:46,009-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:37:46,163-[test_token_goodsinfo3.py - 85]-ERROR:测试案例15,测试用例标题商品信息查询—（带商品）促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:46,163-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:37:46,310-[test_token_goodsinfo3.py - 85]-ERROR:测试案例16,测试用例标题商品信息查询—（带商品）促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:46,310-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:37:46,445-[test_token_goodsinfo3.py - 85]-ERROR:测试案例17,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:46,445-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:37:46,585-[test_token_goodsinfo3.py - 85]-ERROR:测试案例18,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:46,585-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:37:46,714-[test_token_goodsinfo3.py - 85]-ERROR:测试案例19,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:46,714-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:37:46,848-[test_token_goodsinfo3.py - 85]-ERROR:测试案例20,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:46,848-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:37:46,976-[test_token_goodsinfo3.py - 91]-INFO:测试案例21,测试用例标题商品信息查询—销售状态为非枚举,执行成功
2021-12-13 16:37:47,099-[test_token_goodsinfo3.py - 91]-INFO:测试案例22,测试用例标题商品信息查询—促销状态为非枚举,执行成功
2021-12-13 16:37:47,244-[test_token_goodsinfo3.py - 85]-ERROR:测试案例23,测试用例标题商品信息查询—存在的商品编号（6位数字）,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:47,244-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:37:47,424-[test_token_goodsinfo3.py - 91]-INFO:测试案例24,测试用例标题商品信息查询—商品编号非6位数字,执行成功
2021-12-13 16:37:47,594-[test_token_goodsinfo3.py - 91]-INFO:测试案例25,测试用例标题商品信息查询—不存在的商品编号（6位数字）,执行成功
2021-12-13 16:38:30,468-[test_token_goodsinfo3.py - 91]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-13 16:38:30,612-[test_token_goodsinfo3.py - 91]-INFO:测试案例2,测试用例标题商品信息查询—token为空,执行成功
2021-12-13 16:38:30,748-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 16:38:30,749-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[677 chars]99}]}
Diff is 1481 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[677 chars]99}]}
Diff is 1481 characters long. Set self.maxDiff to None to see it.
2021-12-13 16:38:30,973-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 16:38:30,973-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[677 chars]99}]}
Diff is 1481 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[677 chars]99}]}
Diff is 1481 characters long. Set self.maxDiff to None to see it.
2021-12-13 16:38:31,095-[test_token_goodsinfo3.py - 91]-INFO:测试案例5,测试用例标题商品信息查询—（不带商品）销售状态为0,执行成功
2021-12-13 16:38:31,208-[test_token_goodsinfo3.py - 91]-INFO:测试案例6,测试用例标题商品信息查询—（不带商品）销售状态为1,执行成功
2021-12-13 16:38:31,322-[test_token_goodsinfo3.py - 91]-INFO:测试案例7,测试用例标题商品信息查询—（不带商品）促销状态为0,执行成功
2021-12-13 16:38:31,456-[test_token_goodsinfo3.py - 91]-INFO:测试案例8,测试用例标题商品信息查询—（不带商品）促销状态为1,执行成功
2021-12-13 16:38:31,601-[test_token_goodsinfo3.py - 91]-INFO:测试案例9,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为0,执行成功
2021-12-13 16:38:31,734-[test_token_goodsinfo3.py - 91]-INFO:测试案例10,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为1,执行成功
2021-12-13 16:38:31,890-[test_token_goodsinfo3.py - 91]-INFO:测试案例11,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为0,执行成功
2021-12-13 16:38:32,012-[test_token_goodsinfo3.py - 91]-INFO:测试案例12,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为1,执行成功
2021-12-13 16:38:32,130-[test_token_goodsinfo3.py - 91]-INFO:测试案例13,测试用例标题商品信息查询—（带商品）销售状态为0,执行成功
2021-12-13 16:38:32,260-[test_token_goodsinfo3.py - 91]-INFO:测试案例14,测试用例标题商品信息查询—（带商品）销售状态为1,执行成功
2021-12-13 16:38:32,387-[test_token_goodsinfo3.py - 91]-INFO:测试案例15,测试用例标题商品信息查询—（带商品）促销状态为0,执行成功
2021-12-13 16:38:32,506-[test_token_goodsinfo3.py - 91]-INFO:测试案例16,测试用例标题商品信息查询—（带商品）促销状态为1,执行成功
2021-12-13 16:38:32,627-[test_token_goodsinfo3.py - 91]-INFO:测试案例17,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为0,执行成功
2021-12-13 16:38:32,741-[test_token_goodsinfo3.py - 91]-INFO:测试案例18,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为1,执行成功
2021-12-13 16:38:32,859-[test_token_goodsinfo3.py - 91]-INFO:测试案例19,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为0,执行成功
2021-12-13 16:38:32,991-[test_token_goodsinfo3.py - 91]-INFO:测试案例20,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为1,执行成功
2021-12-13 16:38:33,124-[test_token_goodsinfo3.py - 91]-INFO:测试案例21,测试用例标题商品信息查询—销售状态为非枚举,执行成功
2021-12-13 16:38:33,244-[test_token_goodsinfo3.py - 91]-INFO:测试案例22,测试用例标题商品信息查询—促销状态为非枚举,执行成功
2021-12-13 16:38:33,371-[test_token_goodsinfo3.py - 91]-INFO:测试案例23,测试用例标题商品信息查询—存在的商品编号（6位数字）,执行成功
2021-12-13 16:38:33,506-[test_token_goodsinfo3.py - 91]-INFO:测试案例24,测试用例标题商品信息查询—商品编号非6位数字,执行成功
2021-12-13 16:38:33,649-[test_token_goodsinfo3.py - 91]-INFO:测试案例25,测试用例标题商品信息查询—不存在的商品编号（6位数字）,执行成功
2021-12-13 16:51:13,538-[test_business_items1.py - 30]-ERROR:测试案例1,测试用例标题订单信息查询接口,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 16:51:13,539-[test_business_items1.py - 31]-ERROR:'查询成功' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 16:52:33,950-[test_business_items1.py - 30]-ERROR:测试案例1,测试用例标题订单信息查询接口,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'name': 'AutoTrue', 'phone': '15911111111', 'status': '未支付', 'value': 5000.0, 'goods_tiems': [{'goods_name': '鸭绒大衣', 'goods_price': 5000.0}]}
2021-12-13 16:52:33,950-[test_business_items1.py - 31]-ERROR:'查询成功，查询无结果' not found in "{'code': 1000, 'msg': '查询成功', 'name': 'AutoTrue', 'phone': '15911111111', 'status': '未支付', 'value': 5000.0, 'goods_tiems': [{'goods_name': '鸭绒大衣', 'goods_price': 5000.0}]}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功，查询无结果' not found in "{'code': 1000, 'msg': '查询成功', 'name': 'AutoTrue', 'phone': '15911111111', 'status': '未支付', 'value': 5000.0, 'goods_tiems': [{'goods_name': '鸭绒大衣', 'goods_price': 5000.0}]}"
2021-12-13 16:52:52,143-[test_business_items1.py - 36]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-13 17:03:12,767-[test_business_items1.py - 36]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-13 17:03:12,915-[test_business_items1.py - 30]-ERROR:测试案例2,测试用例标题非正确的订单编号,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 17:03:12,916-[test_business_items1.py - 31]-ERROR:'{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 17:03:13,048-[test_business_items1.py - 30]-ERROR:测试案例3,测试用例标题订单编号4位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:03:13,048-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:03:13,174-[test_business_items1.py - 30]-ERROR:测试案例4,测试用例标题订单编号6位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:03:13,174-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:03:13,328-[test_business_items1.py - 30]-ERROR:测试案例5,测试用例标题订单编号为空的场景,执行失败!实际结果{'code': 1002, 'msg': '订单编号不能为空'}
2021-12-13 17:03:13,328-[test_business_items1.py - 31]-ERROR:'{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
2021-12-13 17:03:50,735-[test_business_items1.py - 36]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-13 17:03:50,875-[test_business_items1.py - 30]-ERROR:测试案例2,测试用例标题非正确的订单编号,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 17:03:50,875-[test_business_items1.py - 31]-ERROR:'{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 17:03:50,994-[test_business_items1.py - 30]-ERROR:测试案例3,测试用例标题订单编号4位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:03:50,995-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:03:51,119-[test_business_items1.py - 30]-ERROR:测试案例4,测试用例标题订单编号6位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:03:51,119-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:03:51,240-[test_business_items1.py - 30]-ERROR:测试案例5,测试用例标题订单编号为空的场景,执行失败!实际结果{'code': 1002, 'msg': '订单编号不能为空'}
2021-12-13 17:03:51,241-[test_business_items1.py - 31]-ERROR:'{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
2021-12-13 17:04:51,089-[test_business_items1.py - 36]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-13 17:04:51,222-[test_business_items1.py - 30]-ERROR:测试案例2,测试用例标题非正确的订单编号,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 17:04:51,222-[test_business_items1.py - 31]-ERROR:'"{\'code\': 1005, \'msg\': \'查询无结果\'}"' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '"{\'code\': 1005, \'msg\': \'查询无结果\'}"' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 17:09:03,913-[test_business_items1.py - 36]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-13 17:09:04,043-[test_business_items1.py - 30]-ERROR:测试案例2,测试用例标题非正确的订单编号,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 17:09:04,043-[test_business_items1.py - 31]-ERROR:'{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 17:09:04,167-[test_business_items1.py - 30]-ERROR:测试案例3,测试用例标题订单编号4位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:09:04,167-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:09:04,315-[test_business_items1.py - 30]-ERROR:测试案例4,测试用例标题订单编号6位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:09:04,315-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:09:04,467-[test_business_items1.py - 30]-ERROR:测试案例5,测试用例标题订单编号为空的场景,执行失败!实际结果{'code': 1002, 'msg': '订单编号不能为空'}
2021-12-13 17:09:04,467-[test_business_items1.py - 31]-ERROR:'{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
2021-12-13 17:11:23,749-[test_business_items1.py - 36]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-13 17:11:23,885-[test_business_items1.py - 30]-ERROR:测试案例2,测试用例标题非正确的订单编号,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 17:11:23,885-[test_business_items1.py - 31]-ERROR:'{"code": 1005, \'msg\': \'查询无结果\'}' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1005, \'msg\': \'查询无结果\'}' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 17:11:24,017-[test_business_items1.py - 30]-ERROR:测试案例3,测试用例标题订单编号4位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:11:24,017-[test_business_items1.py - 31]-ERROR:'{"code": 1003, \'msg\': \'订单编号格式不正确\'}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, \'msg\': \'订单编号格式不正确\'}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:11:24,137-[test_business_items1.py - 30]-ERROR:测试案例4,测试用例标题订单编号6位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:11:24,137-[test_business_items1.py - 31]-ERROR:'{"code": 1003, \'msg\': \'订单编号格式不正确\'}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, \'msg\': \'订单编号格式不正确\'}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:11:24,255-[test_business_items1.py - 30]-ERROR:测试案例5,测试用例标题订单编号为空的场景,执行失败!实际结果{'code': 1002, 'msg': '订单编号不能为空'}
2021-12-13 17:11:24,255-[test_business_items1.py - 31]-ERROR:'{"code": 1002, \'msg\': \'订单编号不能为空\'}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1002, \'msg\': \'订单编号不能为空\'}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
2021-12-13 17:13:07,408-[test_business_items1.py - 36]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-13 17:13:07,533-[test_business_items1.py - 30]-ERROR:测试案例2,测试用例标题非正确的订单编号,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 17:13:07,533-[test_business_items1.py - 31]-ERROR:'{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 17:13:07,671-[test_business_items1.py - 30]-ERROR:测试案例3,测试用例标题订单编号4位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:13:07,671-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:13:07,842-[test_business_items1.py - 30]-ERROR:测试案例4,测试用例标题订单编号6位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:13:07,843-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:13:07,999-[test_business_items1.py - 30]-ERROR:测试案例5,测试用例标题订单编号为空的场景,执行失败!实际结果{'code': 1002, 'msg': '订单编号不能为空'}
2021-12-13 17:13:07,999-[test_business_items1.py - 31]-ERROR:'{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
2021-12-13 17:13:45,504-[test_business_items1.py - 36]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-13 17:13:45,631-[test_business_items1.py - 30]-ERROR:测试案例2,测试用例标题非正确的订单编号,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 17:13:45,631-[test_business_items1.py - 31]-ERROR:'{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 17:13:45,774-[test_business_items1.py - 30]-ERROR:测试案例3,测试用例标题订单编号4位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:13:45,775-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:13:45,908-[test_business_items1.py - 30]-ERROR:测试案例4,测试用例标题订单编号6位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:13:45,908-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:13:46,024-[test_business_items1.py - 30]-ERROR:测试案例5,测试用例标题订单编号为空的场景,执行失败!实际结果{'code': 1002, 'msg': '订单编号不能为空'}
2021-12-13 17:13:46,024-[test_business_items1.py - 31]-ERROR:'{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
2021-12-13 17:14:17,243-[test_business_items1.py - 36]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-13 17:22:47,307-[test_business_items1.py - 36]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-13 17:23:03,505-[test_business_items1.py - 36]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-13 17:23:03,639-[test_business_items1.py - 30]-ERROR:测试案例2,测试用例标题非正确的订单编号,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 17:23:03,639-[test_business_items1.py - 31]-ERROR:'{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 17:24:39,928-[test_business_items1.py - 39]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-13 17:24:40,051-[test_business_items1.py - 39]-INFO:测试案例2,测试用例标题非正确的订单编号,执行成功!
2021-12-13 17:25:38,328-[test_business_items1.py - 39]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-13 17:25:38,444-[test_business_items1.py - 39]-INFO:测试案例2,测试用例标题非正确的订单编号,执行成功!
2021-12-13 17:25:38,559-[test_business_items1.py - 39]-INFO:测试案例3,测试用例标题订单编号4位数的场景,执行成功!
2021-12-13 17:25:38,671-[test_business_items1.py - 39]-INFO:测试案例4,测试用例标题订单编号6位数的场景,执行成功!
2021-12-13 17:25:38,798-[test_business_items1.py - 39]-INFO:测试案例5,测试用例标题订单编号为空的场景,执行成功!
2021-12-13 17:45:00,365-[test_business_items1.py - 39]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-13 17:45:00,485-[test_business_items1.py - 39]-INFO:测试案例2,测试用例标题非正确的订单编号,执行成功!
2021-12-13 17:45:00,603-[test_business_items1.py - 39]-INFO:测试案例3,测试用例标题订单编号4位数的场景,执行成功!
2021-12-13 17:45:00,754-[test_business_items1.py - 39]-INFO:测试案例4,测试用例标题订单编号6位数的场景,执行成功!
2021-12-13 17:45:00,881-[test_business_items1.py - 39]-INFO:测试案例5,测试用例标题订单编号为空的场景,执行成功!
2021-12-13 17:55:42,919-[test_business_items1.py - 53]-INFO:测试案例2,测试用例标题非正确的订单编号,执行成功!
2021-12-13 17:55:43,038-[test_business_items1.py - 53]-INFO:测试案例3,测试用例标题订单编号4位数的场景,执行成功!
2021-12-13 17:55:43,155-[test_business_items1.py - 53]-INFO:测试案例4,测试用例标题订单编号6位数的场景,执行成功!
2021-12-13 17:55:43,292-[test_business_items1.py - 53]-INFO:测试案例5,测试用例标题订单编号为空的场景,执行成功!
2021-12-13 17:55:54,087-[test_business_items1.py - 53]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-13 17:55:54,215-[test_business_items1.py - 53]-INFO:测试案例2,测试用例标题非正确的订单编号,执行成功!
2021-12-13 17:55:54,353-[test_business_items1.py - 53]-INFO:测试案例3,测试用例标题订单编号4位数的场景,执行成功!
2021-12-13 17:55:54,473-[test_business_items1.py - 53]-INFO:测试案例4,测试用例标题订单编号6位数的场景,执行成功!
2021-12-13 17:55:54,587-[test_business_items1.py - 53]-INFO:测试案例5,测试用例标题订单编号为空的场景,执行成功!
2021-12-13 18:02:31,935-[test_business_items1.py - 53]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-13 18:02:32,053-[test_business_items1.py - 53]-INFO:测试案例2,测试用例标题非正确的订单编号,执行成功!
2021-12-13 18:02:32,183-[test_business_items1.py - 53]-INFO:测试案例3,测试用例标题订单编号4位数的场景,执行成功!
2021-12-13 18:02:32,318-[test_business_items1.py - 53]-INFO:测试案例4,测试用例标题订单编号6位数的场景,执行成功!
2021-12-13 18:02:32,433-[test_business_items1.py - 53]-INFO:测试案例5,测试用例标题订单编号为空的场景,执行成功!
2021-12-13 18:55:17,706-[Ftest_token_goodsinfo2.py - 55]-ERROR:测试案例1,测试用例标题商品信息查询主流程,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 18:55:17,706-[Ftest_token_goodsinfo2.py - 56]-ERROR:9 != (9,)
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\Ftest_token_goodsinfo2.py", line 48, in test_goods_info
    self.assertEqual(res_count, db_count)  # 响应体的商品条目数和数据库的商品条目数做对比
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 9 != (9,)
2021-12-13 18:56:24,644-[Ftest_token_goodsinfo2.py - 55]-ERROR:测试案例1,测试用例标题商品信息查询主流程,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 18:56:24,644-[Ftest_token_goodsinfo2.py - 56]-ERROR:9 != (9,)
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\Ftest_token_goodsinfo2.py", line 48, in test_goods_info
    self.assertEqual(res_count, db_count)  # 响应体的商品条目数和数据库的商品条目数做对比
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 9 != (9,)
2021-12-13 18:56:33,683-[Ftest_token_goodsinfo2.py - 55]-ERROR:测试案例1,测试用例标题商品信息查询主流程,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 18:56:33,683-[Ftest_token_goodsinfo2.py - 56]-ERROR:9 != 1
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\Ftest_token_goodsinfo2.py", line 48, in test_goods_info
    self.assertEqual(res_count, db_count)  # 响应体的商品条目数和数据库的商品条目数做对比
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 9 != 1
2021-12-13 18:56:44,376-[Ftest_token_goodsinfo2.py - 61]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-13 19:45:36,163-[Ftest_login5.py - 72]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-13 19:45:36,298-[Ftest_login5.py - 72]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-13 19:45:36,405-[Ftest_login5.py - 72]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-13 19:45:36,517-[Ftest_login5.py - 67]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTQyNTkzNi40MTI0OTc6N2RkNTE2OGRlYzMwMzM5MjQ2ZjdmOTdjYjc1Zjc4NmI5ODY0MzVkNg=='}
2021-12-13 19:45:36,517-[Ftest_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTQyNTkzN[64 chars]g=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTQyNTkzNi40MTI0OTc6N2RkNTE2OGRlYzMwMzM5MjQ2ZjdmOTdjYjc1Zjc4NmI5ODY0MzVkNg=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTQyNTkzN[64 chars]g=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTQyNTkzNi40MTI0OTc6N2RkNTE2OGRlYzMwMzM5MjQ2ZjdmOTdjYjc1Zjc4NmI5ODY0MzVkNg=='}
2021-12-13 19:45:36,629-[Ftest_login5.py - 72]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-13 19:45:36,737-[Ftest_login5.py - 72]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-13 19:45:36,845-[Ftest_login5.py - 72]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-13 19:45:36,956-[Ftest_login5.py - 67]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTQyNTkzNi44NTA0OTk6MDI1NDJhYTY3OGEyYzc4MjNmY2EwN2M5YTMzMjU4OGNhYWY1ODhiMQ=='}
2021-12-13 19:45:36,956-[Ftest_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTQyNTkzN[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTQyNTkzNi44NTA0OTk6MDI1NDJhYTY3OGEyYzc4MjNmY2EwN2M5YTMzMjU4OGNhYWY1ODhiMQ=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTQyNTkzN[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTQyNTkzNi44NTA0OTk6MDI1NDJhYTY3OGEyYzc4MjNmY2EwN2M5YTMzMjU4OGNhYWY1ODhiMQ=='}
2021-12-13 19:45:37,077-[Ftest_login5.py - 72]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-13 19:45:37,202-[Ftest_login5.py - 72]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-13 19:45:37,322-[Ftest_login5.py - 72]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-14 12:16:26,282-[test_business_items1.py - 65]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-14 12:35:02,621-[test_business_items2.py - 72]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-14 12:35:02,871-[test_business_items2.py - 72]-INFO:测试案例2,测试用例标题订单编号为空的场景,执行成功!
2021-12-14 12:35:03,147-[test_business_items2.py - 72]-INFO:测试案例3,测试用例标题订单编号非5位数字字符场景,执行成功!
2021-12-14 12:35:03,391-[test_business_items2.py - 72]-INFO:测试案例4,测试用例标题订单编号不存在的场景,执行成功!
2021-12-14 12:35:03,656-[test_business_items2.py - 72]-INFO:测试案例5,测试用例标题订单编号非5位数字的场景,执行成功!
2021-12-14 12:35:06,659-[test_business_items2.py - 72]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-14 12:35:06,778-[test_business_items2.py - 72]-INFO:测试案例2,测试用例标题订单编号为空的场景,执行成功!
2021-12-14 12:35:06,898-[test_business_items2.py - 72]-INFO:测试案例3,测试用例标题订单编号非5位数字字符场景,执行成功!
2021-12-14 12:35:07,015-[test_business_items2.py - 72]-INFO:测试案例4,测试用例标题订单编号不存在的场景,执行成功!
2021-12-14 12:35:07,134-[test_business_items2.py - 72]-INFO:测试案例5,测试用例标题订单编号非5位数字的场景,执行成功!
2021-12-14 12:35:42,570-[test_business_items2.py - 72]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-14 12:35:42,716-[test_business_items2.py - 72]-INFO:测试案例2,测试用例标题订单编号为空的场景,执行成功!
2021-12-14 12:35:42,839-[test_business_items2.py - 72]-INFO:测试案例3,测试用例标题订单编号非5位数字字符场景,执行成功!
2021-12-14 12:35:42,963-[test_business_items2.py - 72]-INFO:测试案例4,测试用例标题订单编号不存在的场景,执行成功!
2021-12-14 12:35:43,082-[test_business_items2.py - 72]-INFO:测试案例5,测试用例标题订单编号非5位数字的场景,执行成功!
2021-12-14 13:21:50,565-[test_business_items2.py - 72]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-14 13:21:50,689-[test_business_items2.py - 72]-INFO:测试案例2,测试用例标题订单编号为空的场景,执行成功!
2021-12-14 13:21:50,812-[test_business_items2.py - 72]-INFO:测试案例3,测试用例标题订单编号非5位数字字符场景,执行成功!
2021-12-14 13:21:50,943-[test_business_items2.py - 72]-INFO:测试案例4,测试用例标题订单编号不存在的场景,执行成功!
2021-12-14 13:21:51,063-[test_business_items2.py - 72]-INFO:测试案例5,测试用例标题订单编号非5位数字的场景,执行成功!
2021-12-14 13:57:21,361-[test_business_items1.py - 65]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-14 16:03:02,857-[test_business_token_goods_input01.py - 30]-ERROR:测试案例1,测试标题商品信息录入主流程,执行失败!实际结果{'code': 1013, 'msg': '产品名称不能重复'}
2021-12-14 16:03:02,857-[test_business_token_goods_input01.py - 31]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input01.py", line 27, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^

2021-12-14 16:03:22,452-[test_business_token_goods_input01.py - 36]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-14 16:21:09,500-[test_business_token_goods_input02.py - 53]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-14 16:26:03,322-[test_business_token_goods_input02.py - 58]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-14 16:31:05,026-[test_business_token_goods_input02.py - 58]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-14 16:55:19,386-[test_business_token_goods_input02.py - 59]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-14 17:35:53,771-[test_business_token_goods_input02.py - 59]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-14 17:35:53,977-[test_business_token_goods_input02.py - 53]-ERROR:测试案例2,测试标题商品名为空的场景,执行失败!实际结果{'code': 1002, 'msg': '商品名称goodsName值不能为空'}
2021-12-14 17:35:53,978-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:35:54,117-[test_business_token_goods_input02.py - 53]-ERROR:测试案例3,测试标题商品名2位字符的场景,执行失败!实际结果{'code': 1006, 'msg': '商品名称格式不正确'}
2021-12-14 17:35:54,117-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:35:54,265-[test_business_token_goods_input02.py - 53]-ERROR:测试案例4,测试标题商品名16位字符的场景,执行失败!实际结果{'code': 1006, 'msg': '商品名称格式不正确'}
2021-12-14 17:35:54,266-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:35:54,405-[test_business_token_goods_input02.py - 59]-INFO:测试案例5,测试标题商品分类为空的场景,执行成功!
2021-12-14 17:35:54,538-[test_business_token_goods_input02.py - 59]-INFO:测试案例6,测试标题商品分类非5位数字长度的场景,执行成功!
2021-12-14 17:35:54,670-[test_business_token_goods_input02.py - 59]-INFO:测试案例7,测试标题商品分类5位数字长度分类不存在的场景,执行成功!
2021-12-14 17:35:54,813-[test_business_token_goods_input02.py - 59]-INFO:测试案例8,测试标题商品库存为空的场景,执行成功!
2021-12-14 17:35:54,948-[test_business_token_goods_input02.py - 59]-INFO:测试案例9,测试标题商品库存超过8位数字,执行成功!
2021-12-14 17:37:02,720-[test_business_token_goods_input02.py - 59]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-14 17:37:02,849-[test_business_token_goods_input02.py - 59]-INFO:测试案例2,测试标题商品名已存在的场景,执行成功!
2021-12-14 17:37:02,998-[test_business_token_goods_input02.py - 53]-ERROR:测试案例3,测试标题商品名为空的场景,执行失败!实际结果{'code': 1002, 'msg': '商品名称goodsName值不能为空'}
2021-12-14 17:37:02,998-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:37:03,151-[test_business_token_goods_input02.py - 53]-ERROR:测试案例4,测试标题商品名2位字符的场景,执行失败!实际结果{'code': 1006, 'msg': '商品名称格式不正确'}
2021-12-14 17:37:03,151-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:37:03,285-[test_business_token_goods_input02.py - 53]-ERROR:测试案例5,测试标题商品名16位字符的场景,执行失败!实际结果{'code': 1006, 'msg': '商品名称格式不正确'}
2021-12-14 17:37:03,285-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:37:03,428-[test_business_token_goods_input02.py - 59]-INFO:测试案例6,测试标题商品分类为空的场景,执行成功!
2021-12-14 17:37:03,595-[test_business_token_goods_input02.py - 59]-INFO:测试案例7,测试标题商品分类非5位数字长度的场景,执行成功!
2021-12-14 17:37:03,753-[test_business_token_goods_input02.py - 59]-INFO:测试案例8,测试标题商品分类5位数字长度分类不存在的场景,执行成功!
2021-12-14 17:37:03,887-[test_business_token_goods_input02.py - 59]-INFO:测试案例9,测试标题商品库存为空的场景,执行成功!
2021-12-14 17:37:04,021-[test_business_token_goods_input02.py - 59]-INFO:测试案例10,测试标题商品库存超过8位数字,执行成功!
2021-12-14 17:37:21,829-[test_business_token_goods_input02.py - 59]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-14 17:37:21,979-[test_business_token_goods_input02.py - 59]-INFO:测试案例2,测试标题商品名已存在的场景,执行成功!
2021-12-14 17:37:22,130-[test_business_token_goods_input02.py - 53]-ERROR:测试案例3,测试标题商品名为空的场景,执行失败!实际结果{'code': 1002, 'msg': '商品名称goodsName值不能为空'}
2021-12-14 17:37:22,130-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:37:22,262-[test_business_token_goods_input02.py - 53]-ERROR:测试案例4,测试标题商品名2位字符的场景,执行失败!实际结果{'code': 1006, 'msg': '商品名称格式不正确'}
2021-12-14 17:37:22,262-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:37:22,394-[test_business_token_goods_input02.py - 53]-ERROR:测试案例5,测试标题商品名16位字符的场景,执行失败!实际结果{'code': 1006, 'msg': '商品名称格式不正确'}
2021-12-14 17:37:22,394-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:37:22,538-[test_business_token_goods_input02.py - 59]-INFO:测试案例6,测试标题商品分类为空的场景,执行成功!
2021-12-14 17:37:22,670-[test_business_token_goods_input02.py - 59]-INFO:测试案例7,测试标题商品分类非5位数字长度的场景,执行成功!
2021-12-14 17:37:22,810-[test_business_token_goods_input02.py - 59]-INFO:测试案例8,测试标题商品分类5位数字长度分类不存在的场景,执行成功!
2021-12-14 17:37:22,974-[test_business_token_goods_input02.py - 59]-INFO:测试案例9,测试标题商品库存为空的场景,执行成功!
2021-12-14 17:37:23,144-[test_business_token_goods_input02.py - 59]-INFO:测试案例10,测试标题商品库存超过8位数字,执行成功!
2021-12-14 17:44:06,886-[test_business_token_goods_input02.py - 60]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-14 17:44:19,905-[test_business_token_goods_input02.py - 60]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-14 17:44:20,033-[test_business_token_goods_input02.py - 60]-INFO:测试案例2,测试标题商品名已存在的场景,执行成功!
2021-12-14 17:44:20,163-[test_business_token_goods_input02.py - 60]-INFO:测试案例3,测试标题商品名为空的场景,执行成功!
2021-12-14 17:44:20,311-[test_business_token_goods_input02.py - 60]-INFO:测试案例4,测试标题商品名2位字符的场景,执行成功!
2021-12-14 17:44:20,446-[test_business_token_goods_input02.py - 60]-INFO:测试案例5,测试标题商品名16位字符的场景,执行成功!
2021-12-14 17:44:20,606-[test_business_token_goods_input02.py - 60]-INFO:测试案例6,测试标题商品分类为空的场景,执行成功!
2021-12-14 17:44:20,756-[test_business_token_goods_input02.py - 60]-INFO:测试案例7,测试标题商品分类非5位数字长度的场景,执行成功!
2021-12-14 17:44:20,885-[test_business_token_goods_input02.py - 60]-INFO:测试案例8,测试标题商品分类5位数字长度分类不存在的场景,执行成功!
2021-12-14 17:44:21,015-[test_business_token_goods_input02.py - 60]-INFO:测试案例9,测试标题商品库存为空的场景,执行成功!
2021-12-14 17:44:21,140-[test_business_token_goods_input02.py - 60]-INFO:测试案例10,测试标题商品库存超过8位数字,执行成功!
2021-12-14 17:56:14,614-[test_business_items1.py - 65]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-14 17:56:24,731-[test_business_token_goods_input02.py - 60]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-14 17:56:24,863-[test_business_token_goods_input02.py - 60]-INFO:测试案例2,测试标题商品名已存在的场景,执行成功!
2021-12-14 17:56:24,989-[test_business_token_goods_input02.py - 60]-INFO:测试案例3,测试标题商品名为空的场景,执行成功!
2021-12-14 17:56:25,112-[test_business_token_goods_input02.py - 60]-INFO:测试案例4,测试标题商品名2位字符的场景,执行成功!
2021-12-14 17:56:25,272-[test_business_token_goods_input02.py - 60]-INFO:测试案例5,测试标题商品名16位字符的场景,执行成功!
2021-12-14 17:56:25,397-[test_business_token_goods_input02.py - 60]-INFO:测试案例6,测试标题商品分类为空的场景,执行成功!
2021-12-14 17:56:25,528-[test_business_token_goods_input02.py - 60]-INFO:测试案例7,测试标题商品分类非5位数字长度的场景,执行成功!
2021-12-14 17:56:25,653-[test_business_token_goods_input02.py - 60]-INFO:测试案例8,测试标题商品分类5位数字长度分类不存在的场景,执行成功!
2021-12-14 17:56:25,800-[test_business_token_goods_input02.py - 60]-INFO:测试案例9,测试标题商品库存为空的场景,执行成功!
2021-12-14 17:56:25,945-[test_business_token_goods_input02.py - 60]-INFO:测试案例10,测试标题商品库存超过8位数字,执行成功!
2021-12-14 17:56:26,076-[test_business_token_goods_input02.py - 60]-INFO:测试案例11,测试标题商品价格为空的场景,执行成功!
2021-12-14 17:56:26,232-[test_business_token_goods_input02.py - 54]-ERROR:测试案例12,测试标题商品价格为0.00,执行失败!实际结果{'code': 1013, 'msg': '产品名称不能重复'}
2021-12-14 17:56:26,233-[test_business_token_goods_input02.py - 55]-ERROR:{'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 44, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-12-14 19:04:35,259-[test_business_token_goods_input02.py - 60]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-14 19:04:35,389-[test_business_token_goods_input02.py - 60]-INFO:测试案例2,测试标题商品名已存在的场景,执行成功!
2021-12-14 19:04:35,512-[test_business_token_goods_input02.py - 60]-INFO:测试案例3,测试标题商品名为空的场景,执行成功!
2021-12-14 19:04:35,657-[test_business_token_goods_input02.py - 60]-INFO:测试案例4,测试标题商品名2位字符的场景,执行成功!
2021-12-14 19:04:35,781-[test_business_token_goods_input02.py - 60]-INFO:测试案例5,测试标题商品名16位字符的场景,执行成功!
2021-12-14 19:04:35,906-[test_business_token_goods_input02.py - 60]-INFO:测试案例6,测试标题商品分类为空的场景,执行成功!
2021-12-14 19:04:36,042-[test_business_token_goods_input02.py - 60]-INFO:测试案例7,测试标题商品分类非5位数字长度的场景,执行成功!
2021-12-14 19:04:36,191-[test_business_token_goods_input02.py - 60]-INFO:测试案例8,测试标题商品分类5位数字长度分类不存在的场景,执行成功!
2021-12-14 19:04:36,322-[test_business_token_goods_input02.py - 60]-INFO:测试案例9,测试标题商品库存为空的场景,执行成功!
2021-12-14 19:04:36,447-[test_business_token_goods_input02.py - 60]-INFO:测试案例10,测试标题商品库存超过8位数字,执行成功!
2021-12-14 19:04:36,573-[test_business_token_goods_input02.py - 60]-INFO:测试案例11,测试标题商品价格为空的场景,执行成功!
2021-12-14 19:04:36,715-[test_business_token_goods_input02.py - 54]-ERROR:测试案例12,测试标题商品价格为0.00,执行失败!实际结果{'code': 1013, 'msg': '产品名称不能重复'}
2021-12-14 19:04:36,715-[test_business_token_goods_input02.py - 55]-ERROR:{'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 44, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-12-14 19:04:51,622-[test_business_token_goods_input02.py - 60]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-14 19:04:51,751-[test_business_token_goods_input02.py - 60]-INFO:测试案例2,测试标题商品名已存在的场景,执行成功!
2021-12-14 19:04:51,905-[test_business_token_goods_input02.py - 60]-INFO:测试案例3,测试标题商品名为空的场景,执行成功!
2021-12-14 19:04:52,055-[test_business_token_goods_input02.py - 60]-INFO:测试案例4,测试标题商品名2位字符的场景,执行成功!
2021-12-14 19:04:52,184-[test_business_token_goods_input02.py - 60]-INFO:测试案例5,测试标题商品名16位字符的场景,执行成功!
2021-12-14 19:04:52,307-[test_business_token_goods_input02.py - 60]-INFO:测试案例6,测试标题商品分类为空的场景,执行成功!
2021-12-14 19:04:52,433-[test_business_token_goods_input02.py - 60]-INFO:测试案例7,测试标题商品分类非5位数字长度的场景,执行成功!
2021-12-14 19:04:52,574-[test_business_token_goods_input02.py - 60]-INFO:测试案例8,测试标题商品分类5位数字长度分类不存在的场景,执行成功!
2021-12-14 19:04:52,701-[test_business_token_goods_input02.py - 60]-INFO:测试案例9,测试标题商品库存为空的场景,执行成功!
2021-12-14 19:04:52,823-[test_business_token_goods_input02.py - 60]-INFO:测试案例10,测试标题商品库存超过8位数字,执行成功!
2021-12-14 19:04:52,959-[test_business_token_goods_input02.py - 60]-INFO:测试案例11,测试标题商品价格为空的场景,执行成功!
2021-12-14 19:04:53,149-[test_business_token_goods_input02.py - 54]-ERROR:测试案例12,测试标题商品价格为0.00,执行失败!实际结果{'code': 1013, 'msg': '产品名称不能重复'}
2021-12-14 19:04:53,150-[test_business_token_goods_input02.py - 55]-ERROR:{'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 44, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-12-14 19:05:00,413-[test_business_token_goods_input02.py - 60]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-14 19:05:00,578-[test_business_token_goods_input02.py - 60]-INFO:测试案例2,测试标题商品名已存在的场景,执行成功!
2021-12-14 19:05:00,709-[test_business_token_goods_input02.py - 60]-INFO:测试案例3,测试标题商品名为空的场景,执行成功!
2021-12-14 19:05:00,833-[test_business_token_goods_input02.py - 60]-INFO:测试案例4,测试标题商品名2位字符的场景,执行成功!
2021-12-14 19:05:00,955-[test_business_token_goods_input02.py - 60]-INFO:测试案例5,测试标题商品名16位字符的场景,执行成功!
2021-12-14 19:05:01,119-[test_business_token_goods_input02.py - 60]-INFO:测试案例6,测试标题商品分类为空的场景,执行成功!
2021-12-14 19:05:01,244-[test_business_token_goods_input02.py - 60]-INFO:测试案例7,测试标题商品分类非5位数字长度的场景,执行成功!
2021-12-14 19:05:01,414-[test_business_token_goods_input02.py - 60]-INFO:测试案例8,测试标题商品分类5位数字长度分类不存在的场景,执行成功!
2021-12-14 19:05:01,544-[test_business_token_goods_input02.py - 60]-INFO:测试案例9,测试标题商品库存为空的场景,执行成功!
2021-12-14 19:05:01,702-[test_business_token_goods_input02.py - 60]-INFO:测试案例10,测试标题商品库存超过8位数字,执行成功!
2021-12-14 19:05:01,846-[test_business_token_goods_input02.py - 60]-INFO:测试案例11,测试标题商品价格为空的场景,执行成功!
2021-12-14 19:05:01,990-[test_business_token_goods_input02.py - 54]-ERROR:测试案例12,测试标题商品价格为0.00,执行失败!实际结果{'code': 1013, 'msg': '产品名称不能重复'}
2021-12-14 19:05:01,991-[test_business_token_goods_input02.py - 55]-ERROR:{'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 44, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-12-14 19:06:05,639-[test_business_token_goods_input02.py - 60]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-14 19:06:05,785-[test_business_token_goods_input02.py - 60]-INFO:测试案例2,测试标题商品名已存在的场景,执行成功!
2021-12-14 19:06:05,945-[test_business_token_goods_input02.py - 60]-INFO:测试案例3,测试标题商品名为空的场景,执行成功!
2021-12-14 19:06:06,070-[test_business_token_goods_input02.py - 60]-INFO:测试案例4,测试标题商品名2位字符的场景,执行成功!
2021-12-14 19:06:06,196-[test_business_token_goods_input02.py - 60]-INFO:测试案例5,测试标题商品名16位字符的场景,执行成功!
2021-12-14 19:06:06,323-[test_business_token_goods_input02.py - 60]-INFO:测试案例6,测试标题商品分类为空的场景,执行成功!
2021-12-14 19:06:06,471-[test_business_token_goods_input02.py - 60]-INFO:测试案例7,测试标题商品分类非5位数字长度的场景,执行成功!
2021-12-14 19:06:06,611-[test_business_token_goods_input02.py - 60]-INFO:测试案例8,测试标题商品分类5位数字长度分类不存在的场景,执行成功!
2021-12-14 19:06:06,736-[test_business_token_goods_input02.py - 60]-INFO:测试案例9,测试标题商品库存为空的场景,执行成功!
2021-12-14 19:06:06,862-[test_business_token_goods_input02.py - 60]-INFO:测试案例10,测试标题商品库存超过8位数字,执行成功!
2021-12-14 19:06:07,015-[test_business_token_goods_input02.py - 60]-INFO:测试案例11,测试标题商品价格为空的场景,执行成功!
2021-12-14 19:06:07,159-[test_business_token_goods_input02.py - 54]-ERROR:测试案例12,测试标题商品价格为0.00,执行失败!实际结果{'code': 1013, 'msg': '产品名称不能重复'}
2021-12-14 19:06:07,159-[test_business_token_goods_input02.py - 55]-ERROR:{'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 44, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-12-14 19:07:34,870-[test_business_token_goods_input02.py - 60]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-14 19:07:35,018-[test_business_token_goods_input02.py - 60]-INFO:测试案例2,测试标题商品名已存在的场景,执行成功!
2021-12-14 19:07:35,159-[test_business_token_goods_input02.py - 60]-INFO:测试案例3,测试标题商品名为空的场景,执行成功!
2021-12-14 19:07:35,306-[test_business_token_goods_input02.py - 60]-INFO:测试案例4,测试标题商品名2位字符的场景,执行成功!
2021-12-14 19:07:35,479-[test_business_token_goods_input02.py - 60]-INFO:测试案例5,测试标题商品名16位字符的场景,执行成功!
2021-12-14 19:07:35,604-[test_business_token_goods_input02.py - 60]-INFO:测试案例6,测试标题商品分类为空的场景,执行成功!
2021-12-14 19:07:35,729-[test_business_token_goods_input02.py - 60]-INFO:测试案例7,测试标题商品分类非5位数字长度的场景,执行成功!
2021-12-14 19:07:35,858-[test_business_token_goods_input02.py - 60]-INFO:测试案例8,测试标题商品分类5位数字长度分类不存在的场景,执行成功!
2021-12-14 19:07:36,007-[test_business_token_goods_input02.py - 60]-INFO:测试案例9,测试标题商品库存为空的场景,执行成功!
2021-12-14 19:07:36,148-[test_business_token_goods_input02.py - 60]-INFO:测试案例10,测试标题商品库存超过8位数字,执行成功!
2021-12-14 19:07:36,310-[test_business_token_goods_input02.py - 60]-INFO:测试案例11,测试标题商品价格为空的场景,执行成功!
2021-12-14 19:07:36,454-[test_business_token_goods_input02.py - 54]-ERROR:测试案例12,测试标题商品价格为0.00,执行失败!实际结果{'code': 1000, 'msg': '商品录入成功'}
2021-12-14 19:07:36,455-[test_business_token_goods_input02.py - 55]-ERROR:{'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1000, 'msg': '商品录入成功'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?            ^             ^^^ ^^^

+ {'code': 1000, 'msg': '商品录入成功'}
?            ^             ^ ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 44, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1000, 'msg': '商品录入成功'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?            ^             ^^^ ^^^

+ {'code': 1000, 'msg': '商品录入成功'}
?            ^             ^ ^^

2021-12-15 11:52:33,908-[test_business_token_goods_input02.py - 60]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-15 12:33:52,008-[test_business_token_goods_input03.py - 65]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-15 12:33:52,157-[test_business_token_goods_input03.py - 65]-INFO:测试案例2,测试标题商品录入接口主流程全入参的场景,执行成功!
2021-12-15 12:33:52,301-[test_business_token_goods_input03.py - 65]-INFO:测试案例3,测试标题商品录入接口商品名有效边界值3位的场景,执行成功!
2021-12-15 12:33:52,445-[test_business_token_goods_input03.py - 65]-INFO:测试案例4,测试标题商品录入接口商品名有效边界值15位的场景,执行成功!
2021-12-15 12:33:52,601-[test_business_token_goods_input03.py - 65]-INFO:测试案例5,测试标题商品录入接口商品名无效边界值2位的场景,执行成功!
2021-12-15 12:33:52,769-[test_business_token_goods_input03.py - 65]-INFO:测试案例6,测试标题商品录入接口商品名无效边界值16位的场景,执行成功!
2021-12-15 12:33:52,914-[test_business_token_goods_input03.py - 59]-ERROR:测试案例7,测试标题商品录入接口商品名重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 12:33:52,916-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?             ^          ^ ^^ ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?             ^          ^ ^^ ^^

2021-12-15 12:33:53,075-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 12:33:53,075-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 12:33:53,224-[test_business_token_goods_input03.py - 65]-INFO:测试案例9,测试标题商品录入接口商品名为空的场景,执行成功!
2021-12-15 12:33:53,400-[test_business_token_goods_input03.py - 65]-INFO:测试案例10,测试标题商品录入接口商品名含空格的场景,执行成功!
2021-12-15 12:33:53,555-[test_business_token_goods_input03.py - 65]-INFO:测试案例11,测试标题商品录入接口商品名含特殊符号的场景,执行成功!
2021-12-15 12:33:53,706-[test_business_token_goods_input03.py - 65]-INFO:测试案例12,测试标题商品录入接口商品分类id为空的场景,执行成功!
2021-12-15 12:33:53,873-[test_business_token_goods_input03.py - 65]-INFO:测试案例13,测试标题商品录入接口商品分类id不存在的场景,执行成功!
2021-12-15 12:33:54,059-[test_business_token_goods_input03.py - 65]-INFO:测试案例14,测试标题商品录入接口无效边界值4位的场景,执行成功!
2021-12-15 12:33:54,202-[test_business_token_goods_input03.py - 65]-INFO:测试案例15,测试标题商品录入接口无效边界值6位的场景,执行成功!
2021-12-15 12:33:54,350-[test_business_token_goods_input03.py - 65]-INFO:测试案例16,测试标题商品录入接口商品描述有效边界值10位的场景,执行成功!
2021-12-15 12:33:54,511-[test_business_token_goods_input03.py - 65]-INFO:测试案例17,测试标题商品录入接口商品描述有效边界值155位的场景,执行成功!
2021-12-15 12:33:54,681-[test_business_token_goods_input03.py - 65]-INFO:测试案例18,测试标题商品录入接口商品描述无效边界值9位的场景,执行成功!
2021-12-15 12:33:54,826-[test_business_token_goods_input03.py - 65]-INFO:测试案例19,测试标题商品录入接口商品描述无效边界值156位的场景,执行成功!
2021-12-15 12:33:55,005-[test_business_token_goods_input03.py - 65]-INFO:测试案例20,测试标题商品录入接口商品描述有特殊符号的场景,执行成功!
2021-12-15 12:33:55,190-[test_business_token_goods_input03.py - 65]-INFO:测试案例21,测试标题商品录入接口商品库存有效边界值8位的场景,执行成功!
2021-12-15 12:33:55,343-[test_business_token_goods_input03.py - 65]-INFO:测试案例22,测试标题商品录入接口商品库存有效边界值1位的场景,执行成功!
2021-12-15 12:33:55,489-[test_business_token_goods_input03.py - 65]-INFO:测试案例23,测试标题商品录入接口商品库存为0的场景,执行成功!
2021-12-15 12:33:55,671-[test_business_token_goods_input03.py - 65]-INFO:测试案例24,测试标题商品录入接口商品库存为负数的场景,执行成功!
2021-12-15 12:33:55,833-[test_business_token_goods_input03.py - 65]-INFO:测试案例25,测试标题商品录入接口商品库存无效边界值9位的场景,执行成功!
2021-12-15 12:33:55,973-[test_business_token_goods_input03.py - 65]-INFO:测试案例26,测试标题商品录入接口商品库存为空的场景,执行成功!
2021-12-15 12:33:56,113-[test_business_token_goods_input03.py - 65]-INFO:测试案例27,测试标题商品录入接口商品价格为空的场景,执行成功!
2021-12-15 12:33:56,252-[test_business_token_goods_input03.py - 65]-INFO:测试案例28,测试标题商品录入接口商品价格为整数的有效边界值8位的场景,执行成功!
2021-12-15 12:33:56,435-[test_business_token_goods_input03.py - 65]-INFO:测试案例29,测试标题商品录入接口商品价格为整数的有效边界值1位的场景,执行成功!
2021-12-15 12:33:56,598-[test_business_token_goods_input03.py - 65]-INFO:测试案例30,测试标题商品录入接口商品价格为整数的无效边界值9位的场景,执行成功!
2021-12-15 12:33:56,771-[test_business_token_goods_input03.py - 65]-INFO:测试案例31,测试标题商品录入接口商品价格为两位小数的有效边界值8位的场景,执行成功!
2021-12-15 12:33:56,919-[test_business_token_goods_input03.py - 65]-INFO:测试案例32,测试标题商品录入接口商品价格为两位小数的有效边界值1位的场景,执行成功!
2021-12-15 12:33:57,061-[test_business_token_goods_input03.py - 65]-INFO:测试案例33,测试标题商品录入接口商品价格为两位小数的无效边界值9位的场景,执行成功!
2021-12-15 12:33:57,212-[test_business_token_goods_input03.py - 65]-INFO:测试案例34,测试标题商品录入接口商品价格为负数的场景,执行成功!
2021-12-15 12:33:57,364-[test_business_token_goods_input03.py - 65]-INFO:测试案例35,测试标题商品录入接口商品价格为两位小数的负数的场景,执行成功!
2021-12-15 12:33:57,504-[test_business_token_goods_input03.py - 65]-INFO:测试案例36,测试标题商品录入接口商品价格为三位小数的有效边界值8位的场景,执行成功!
2021-12-15 12:33:57,665-[test_business_token_goods_input03.py - 65]-INFO:测试案例37,测试标题商品录入接口商品价格为三位小数的有效边界值1位的场景,执行成功!
2021-12-15 12:33:57,829-[test_business_token_goods_input03.py - 65]-INFO:测试案例38,测试标题商品录入接口商品价格为三位小数的无效边界值9位的场景,执行成功!
2021-12-15 12:33:58,007-[test_business_token_goods_input03.py - 65]-INFO:测试案例39,测试标题商品录入接口商品价格为一位小数的有效边界值8位的场景,执行成功!
2021-12-15 12:33:58,149-[test_business_token_goods_input03.py - 65]-INFO:测试案例40,测试标题商品录入接口商品价格为一位小数的有效边界值1位的场景,执行成功!
2021-12-15 12:33:58,285-[test_business_token_goods_input03.py - 65]-INFO:测试案例41,测试标题商品录入接口商品价格为一位小数的无效边界值9位的场景,执行成功!
2021-12-15 12:33:58,425-[test_business_token_goods_input03.py - 65]-INFO:测试案例42,测试标题商品录入接口商品价格非数字的场景,执行成功!
2021-12-15 12:33:58,567-[test_business_token_goods_input03.py - 65]-INFO:测试案例43,测试标题商品录入接口商品价格为0的场景,执行成功!
2021-12-15 12:33:58,765-[test_business_token_goods_input03.py - 65]-INFO:测试案例44,测试标题商品录入接口商品价格为0.00的场景,执行成功!
2021-12-15 12:34:18,431-[test_business_token_goods_input03.py - 65]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-15 12:34:18,653-[test_business_token_goods_input03.py - 65]-INFO:测试案例2,测试标题商品录入接口主流程全入参的场景,执行成功!
2021-12-15 12:34:18,815-[test_business_token_goods_input03.py - 65]-INFO:测试案例3,测试标题商品录入接口商品名有效边界值3位的场景,执行成功!
2021-12-15 12:34:18,961-[test_business_token_goods_input03.py - 65]-INFO:测试案例4,测试标题商品录入接口商品名有效边界值15位的场景,执行成功!
2021-12-15 12:34:19,102-[test_business_token_goods_input03.py - 65]-INFO:测试案例5,测试标题商品录入接口商品名无效边界值2位的场景,执行成功!
2021-12-15 12:34:19,246-[test_business_token_goods_input03.py - 65]-INFO:测试案例6,测试标题商品录入接口商品名无效边界值16位的场景,执行成功!
2021-12-15 12:34:19,439-[test_business_token_goods_input03.py - 59]-ERROR:测试案例7,测试标题商品录入接口商品名重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 12:34:19,439-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?             ^          ^ ^^ ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?             ^          ^ ^^ ^^

2021-12-15 12:34:19,588-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 12:34:19,588-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 12:34:19,732-[test_business_token_goods_input03.py - 65]-INFO:测试案例9,测试标题商品录入接口商品名为空的场景,执行成功!
2021-12-15 12:34:19,933-[test_business_token_goods_input03.py - 65]-INFO:测试案例10,测试标题商品录入接口商品名含空格的场景,执行成功!
2021-12-15 12:34:20,087-[test_business_token_goods_input03.py - 65]-INFO:测试案例11,测试标题商品录入接口商品名含特殊符号的场景,执行成功!
2021-12-15 12:34:20,232-[test_business_token_goods_input03.py - 65]-INFO:测试案例12,测试标题商品录入接口商品分类id为空的场景,执行成功!
2021-12-15 12:34:20,373-[test_business_token_goods_input03.py - 65]-INFO:测试案例13,测试标题商品录入接口商品分类id不存在的场景,执行成功!
2021-12-15 12:34:20,511-[test_business_token_goods_input03.py - 65]-INFO:测试案例14,测试标题商品录入接口无效边界值4位的场景,执行成功!
2021-12-15 12:34:20,655-[test_business_token_goods_input03.py - 65]-INFO:测试案例15,测试标题商品录入接口无效边界值6位的场景,执行成功!
2021-12-15 12:34:20,802-[test_business_token_goods_input03.py - 65]-INFO:测试案例16,测试标题商品录入接口商品描述有效边界值10位的场景,执行成功!
2021-12-15 12:34:20,949-[test_business_token_goods_input03.py - 65]-INFO:测试案例17,测试标题商品录入接口商品描述有效边界值155位的场景,执行成功!
2021-12-15 12:34:21,109-[test_business_token_goods_input03.py - 65]-INFO:测试案例18,测试标题商品录入接口商品描述无效边界值9位的场景,执行成功!
2021-12-15 12:34:21,283-[test_business_token_goods_input03.py - 65]-INFO:测试案例19,测试标题商品录入接口商品描述无效边界值156位的场景,执行成功!
2021-12-15 12:34:21,441-[test_business_token_goods_input03.py - 65]-INFO:测试案例20,测试标题商品录入接口商品描述有特殊符号的场景,执行成功!
2021-12-15 12:34:21,592-[test_business_token_goods_input03.py - 65]-INFO:测试案例21,测试标题商品录入接口商品库存有效边界值8位的场景,执行成功!
2021-12-15 12:34:21,762-[test_business_token_goods_input03.py - 65]-INFO:测试案例22,测试标题商品录入接口商品库存有效边界值1位的场景,执行成功!
2021-12-15 12:34:21,908-[test_business_token_goods_input03.py - 65]-INFO:测试案例23,测试标题商品录入接口商品库存为0的场景,执行成功!
2021-12-15 12:34:22,049-[test_business_token_goods_input03.py - 65]-INFO:测试案例24,测试标题商品录入接口商品库存为负数的场景,执行成功!
2021-12-15 12:34:22,191-[test_business_token_goods_input03.py - 65]-INFO:测试案例25,测试标题商品录入接口商品库存无效边界值9位的场景,执行成功!
2021-12-15 12:34:22,352-[test_business_token_goods_input03.py - 65]-INFO:测试案例26,测试标题商品录入接口商品库存为空的场景,执行成功!
2021-12-15 12:34:22,512-[test_business_token_goods_input03.py - 65]-INFO:测试案例27,测试标题商品录入接口商品价格为空的场景,执行成功!
2021-12-15 12:34:22,651-[test_business_token_goods_input03.py - 65]-INFO:测试案例28,测试标题商品录入接口商品价格为整数的有效边界值8位的场景,执行成功!
2021-12-15 12:34:22,807-[test_business_token_goods_input03.py - 65]-INFO:测试案例29,测试标题商品录入接口商品价格为整数的有效边界值1位的场景,执行成功!
2021-12-15 12:34:22,949-[test_business_token_goods_input03.py - 65]-INFO:测试案例30,测试标题商品录入接口商品价格为整数的无效边界值9位的场景,执行成功!
2021-12-15 12:34:23,107-[test_business_token_goods_input03.py - 65]-INFO:测试案例31,测试标题商品录入接口商品价格为两位小数的有效边界值8位的场景,执行成功!
2021-12-15 12:34:23,252-[test_business_token_goods_input03.py - 65]-INFO:测试案例32,测试标题商品录入接口商品价格为两位小数的有效边界值1位的场景,执行成功!
2021-12-15 12:34:23,391-[test_business_token_goods_input03.py - 65]-INFO:测试案例33,测试标题商品录入接口商品价格为两位小数的无效边界值9位的场景,执行成功!
2021-12-15 12:34:23,569-[test_business_token_goods_input03.py - 65]-INFO:测试案例34,测试标题商品录入接口商品价格为负数的场景,执行成功!
2021-12-15 12:34:23,733-[test_business_token_goods_input03.py - 65]-INFO:测试案例35,测试标题商品录入接口商品价格为两位小数的负数的场景,执行成功!
2021-12-15 12:34:23,875-[test_business_token_goods_input03.py - 65]-INFO:测试案例36,测试标题商品录入接口商品价格为三位小数的有效边界值8位的场景,执行成功!
2021-12-15 12:34:24,014-[test_business_token_goods_input03.py - 65]-INFO:测试案例37,测试标题商品录入接口商品价格为三位小数的有效边界值1位的场景,执行成功!
2021-12-15 12:34:24,177-[test_business_token_goods_input03.py - 65]-INFO:测试案例38,测试标题商品录入接口商品价格为三位小数的无效边界值9位的场景,执行成功!
2021-12-15 12:34:24,333-[test_business_token_goods_input03.py - 65]-INFO:测试案例39,测试标题商品录入接口商品价格为一位小数的有效边界值8位的场景,执行成功!
2021-12-15 12:34:24,490-[test_business_token_goods_input03.py - 65]-INFO:测试案例40,测试标题商品录入接口商品价格为一位小数的有效边界值1位的场景,执行成功!
2021-12-15 12:34:24,630-[test_business_token_goods_input03.py - 65]-INFO:测试案例41,测试标题商品录入接口商品价格为一位小数的无效边界值9位的场景,执行成功!
2021-12-15 12:34:24,777-[test_business_token_goods_input03.py - 65]-INFO:测试案例42,测试标题商品录入接口商品价格非数字的场景,执行成功!
2021-12-15 12:34:24,945-[test_business_token_goods_input03.py - 65]-INFO:测试案例43,测试标题商品录入接口商品价格为0的场景,执行成功!
2021-12-15 12:34:25,131-[test_business_token_goods_input03.py - 65]-INFO:测试案例44,测试标题商品录入接口商品价格为0.00的场景,执行成功!
2021-12-15 13:52:51,395-[test_business_token_goods_input03.py - 65]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-15 13:52:51,545-[test_business_token_goods_input03.py - 65]-INFO:测试案例2,测试标题商品录入接口主流程全入参的场景,执行成功!
2021-12-15 13:52:51,703-[test_business_token_goods_input03.py - 65]-INFO:测试案例3,测试标题商品录入接口商品名有效边界值3位的场景,执行成功!
2021-12-15 13:52:51,855-[test_business_token_goods_input03.py - 65]-INFO:测试案例4,测试标题商品录入接口商品名有效边界值15位的场景,执行成功!
2021-12-15 13:52:51,996-[test_business_token_goods_input03.py - 65]-INFO:测试案例5,测试标题商品录入接口商品名无效边界值2位的场景,执行成功!
2021-12-15 13:52:52,139-[test_business_token_goods_input03.py - 65]-INFO:测试案例6,测试标题商品录入接口商品名无效边界值16位的场景,执行成功!
2021-12-15 13:52:52,314-[test_business_token_goods_input03.py - 59]-ERROR:测试案例7,测试标题商品录入接口商品名重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 13:52:52,314-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?             ^          ^ ^^ ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?             ^          ^ ^^ ^^

2021-12-15 13:52:52,465-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 13:52:52,465-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 13:52:52,604-[test_business_token_goods_input03.py - 65]-INFO:测试案例9,测试标题商品录入接口商品名为空的场景,执行成功!
2021-12-15 13:52:52,778-[test_business_token_goods_input03.py - 65]-INFO:测试案例10,测试标题商品录入接口商品名含空格的场景,执行成功!
2021-12-15 13:52:52,922-[test_business_token_goods_input03.py - 65]-INFO:测试案例11,测试标题商品录入接口商品名含特殊符号的场景,执行成功!
2021-12-15 13:52:53,063-[test_business_token_goods_input03.py - 65]-INFO:测试案例12,测试标题商品录入接口商品分类id为空的场景,执行成功!
2021-12-15 13:52:53,201-[test_business_token_goods_input03.py - 65]-INFO:测试案例13,测试标题商品录入接口商品分类id不存在的场景,执行成功!
2021-12-15 13:52:53,340-[test_business_token_goods_input03.py - 65]-INFO:测试案例14,测试标题商品录入接口无效边界值4位的场景,执行成功!
2021-12-15 13:52:53,496-[test_business_token_goods_input03.py - 65]-INFO:测试案例15,测试标题商品录入接口无效边界值6位的场景,执行成功!
2021-12-15 13:52:53,661-[test_business_token_goods_input03.py - 65]-INFO:测试案例16,测试标题商品录入接口商品描述有效边界值10位的场景,执行成功!
2021-12-15 13:52:53,806-[test_business_token_goods_input03.py - 65]-INFO:测试案例17,测试标题商品录入接口商品描述有效边界值155位的场景,执行成功!
2021-12-15 13:52:53,946-[test_business_token_goods_input03.py - 65]-INFO:测试案例18,测试标题商品录入接口商品描述无效边界值9位的场景,执行成功!
2021-12-15 13:52:54,102-[test_business_token_goods_input03.py - 65]-INFO:测试案例19,测试标题商品录入接口商品描述无效边界值156位的场景,执行成功!
2021-12-15 13:52:54,274-[test_business_token_goods_input03.py - 65]-INFO:测试案例20,测试标题商品录入接口商品描述有特殊符号的场景,执行成功!
2021-12-15 13:52:54,417-[test_business_token_goods_input03.py - 65]-INFO:测试案例21,测试标题商品录入接口商品库存有效边界值8位的场景,执行成功!
2021-12-15 13:52:54,560-[test_business_token_goods_input03.py - 65]-INFO:测试案例22,测试标题商品录入接口商品库存有效边界值1位的场景,执行成功!
2021-12-15 13:52:54,728-[test_business_token_goods_input03.py - 65]-INFO:测试案例23,测试标题商品录入接口商品库存为0的场景,执行成功!
2021-12-15 13:52:54,878-[test_business_token_goods_input03.py - 65]-INFO:测试案例24,测试标题商品录入接口商品库存为负数的场景,执行成功!
2021-12-15 13:52:55,016-[test_business_token_goods_input03.py - 65]-INFO:测试案例25,测试标题商品录入接口商品库存无效边界值9位的场景,执行成功!
2021-12-15 13:52:55,156-[test_business_token_goods_input03.py - 65]-INFO:测试案例26,测试标题商品录入接口商品库存为空的场景,执行成功!
2021-12-15 13:52:55,294-[test_business_token_goods_input03.py - 65]-INFO:测试案例27,测试标题商品录入接口商品价格为空的场景,执行成功!
2021-12-15 13:52:55,431-[test_business_token_goods_input03.py - 65]-INFO:测试案例28,测试标题商品录入接口商品价格为整数的有效边界值8位的场景,执行成功!
2021-12-15 13:52:55,586-[test_business_token_goods_input03.py - 65]-INFO:测试案例29,测试标题商品录入接口商品价格为整数的有效边界值1位的场景,执行成功!
2021-12-15 13:52:55,725-[test_business_token_goods_input03.py - 65]-INFO:测试案例30,测试标题商品录入接口商品价格为整数的无效边界值9位的场景,执行成功!
2021-12-15 13:52:55,898-[test_business_token_goods_input03.py - 65]-INFO:测试案例31,测试标题商品录入接口商品价格为两位小数的有效边界值8位的场景,执行成功!
2021-12-15 13:52:56,067-[test_business_token_goods_input03.py - 65]-INFO:测试案例32,测试标题商品录入接口商品价格为两位小数的有效边界值1位的场景,执行成功!
2021-12-15 13:52:56,209-[test_business_token_goods_input03.py - 65]-INFO:测试案例33,测试标题商品录入接口商品价格为两位小数的无效边界值9位的场景,执行成功!
2021-12-15 13:52:56,360-[test_business_token_goods_input03.py - 65]-INFO:测试案例34,测试标题商品录入接口商品价格为负数的场景,执行成功!
2021-12-15 13:52:56,499-[test_business_token_goods_input03.py - 65]-INFO:测试案例35,测试标题商品录入接口商品价格为两位小数的负数的场景,执行成功!
2021-12-15 13:52:56,637-[test_business_token_goods_input03.py - 65]-INFO:测试案例36,测试标题商品录入接口商品价格为三位小数的有效边界值8位的场景,执行成功!
2021-12-15 13:52:56,773-[test_business_token_goods_input03.py - 65]-INFO:测试案例37,测试标题商品录入接口商品价格为三位小数的有效边界值1位的场景,执行成功!
2021-12-15 13:52:56,929-[test_business_token_goods_input03.py - 65]-INFO:测试案例38,测试标题商品录入接口商品价格为三位小数的无效边界值9位的场景,执行成功!
2021-12-15 13:52:57,087-[test_business_token_goods_input03.py - 65]-INFO:测试案例39,测试标题商品录入接口商品价格为一位小数的有效边界值8位的场景,执行成功!
2021-12-15 13:52:57,259-[test_business_token_goods_input03.py - 65]-INFO:测试案例40,测试标题商品录入接口商品价格为一位小数的有效边界值1位的场景,执行成功!
2021-12-15 13:52:57,404-[test_business_token_goods_input03.py - 65]-INFO:测试案例41,测试标题商品录入接口商品价格为一位小数的无效边界值9位的场景,执行成功!
2021-12-15 13:52:57,543-[test_business_token_goods_input03.py - 65]-INFO:测试案例42,测试标题商品录入接口商品价格非数字的场景,执行成功!
2021-12-15 13:52:57,682-[test_business_token_goods_input03.py - 65]-INFO:测试案例43,测试标题商品录入接口商品价格为0的场景,执行成功!
2021-12-15 13:52:57,838-[test_business_token_goods_input03.py - 65]-INFO:测试案例44,测试标题商品录入接口商品价格为0.00的场景,执行成功!
2021-12-15 13:53:55,417-[test_business_token_goods_input03.py - 65]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-15 13:53:55,559-[test_business_token_goods_input03.py - 65]-INFO:测试案例2,测试标题商品录入接口主流程全入参的场景,执行成功!
2021-12-15 13:53:55,701-[test_business_token_goods_input03.py - 65]-INFO:测试案例3,测试标题商品录入接口商品名有效边界值3位的场景,执行成功!
2021-12-15 13:53:55,840-[test_business_token_goods_input03.py - 65]-INFO:测试案例4,测试标题商品录入接口商品名有效边界值15位的场景,执行成功!
2021-12-15 13:53:55,979-[test_business_token_goods_input03.py - 65]-INFO:测试案例5,测试标题商品录入接口商品名无效边界值2位的场景,执行成功!
2021-12-15 13:53:56,116-[test_business_token_goods_input03.py - 65]-INFO:测试案例6,测试标题商品录入接口商品名无效边界值16位的场景,执行成功!
2021-12-15 13:53:56,254-[test_business_token_goods_input03.py - 59]-ERROR:测试案例7,测试标题商品录入接口商品名重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 13:53:56,254-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?             ^          ^ ^^ ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?             ^          ^ ^^ ^^

2021-12-15 13:53:56,400-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 13:53:56,401-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 13:53:56,574-[test_business_token_goods_input03.py - 65]-INFO:测试案例9,测试标题商品录入接口商品名为空的场景,执行成功!
2021-12-15 13:53:56,810-[test_business_token_goods_input03.py - 65]-INFO:测试案例10,测试标题商品录入接口商品名含空格的场景,执行成功!
2021-12-15 13:53:56,965-[test_business_token_goods_input03.py - 65]-INFO:测试案例11,测试标题商品录入接口商品名含特殊符号的场景,执行成功!
2021-12-15 13:53:57,101-[test_business_token_goods_input03.py - 65]-INFO:测试案例12,测试标题商品录入接口商品分类id为空的场景,执行成功!
2021-12-15 13:53:57,237-[test_business_token_goods_input03.py - 65]-INFO:测试案例13,测试标题商品录入接口商品分类id不存在的场景,执行成功!
2021-12-15 13:53:57,372-[test_business_token_goods_input03.py - 65]-INFO:测试案例14,测试标题商品录入接口无效边界值4位的场景,执行成功!
2021-12-15 13:53:57,515-[test_business_token_goods_input03.py - 65]-INFO:测试案例15,测试标题商品录入接口无效边界值6位的场景,执行成功!
2021-12-15 13:53:57,699-[test_business_token_goods_input03.py - 65]-INFO:测试案例16,测试标题商品录入接口商品描述有效边界值10位的场景,执行成功!
2021-12-15 13:53:57,878-[test_business_token_goods_input03.py - 65]-INFO:测试案例17,测试标题商品录入接口商品描述有效边界值155位的场景,执行成功!
2021-12-15 13:53:58,039-[test_business_token_goods_input03.py - 65]-INFO:测试案例18,测试标题商品录入接口商品描述无效边界值9位的场景,执行成功!
2021-12-15 13:53:58,204-[test_business_token_goods_input03.py - 65]-INFO:测试案例19,测试标题商品录入接口商品描述无效边界值156位的场景,执行成功!
2021-12-15 13:53:58,358-[test_business_token_goods_input03.py - 65]-INFO:测试案例20,测试标题商品录入接口商品描述有特殊符号的场景,执行成功!
2021-12-15 13:53:58,517-[test_business_token_goods_input03.py - 65]-INFO:测试案例21,测试标题商品录入接口商品库存有效边界值8位的场景,执行成功!
2021-12-15 13:53:58,668-[test_business_token_goods_input03.py - 65]-INFO:测试案例22,测试标题商品录入接口商品库存有效边界值1位的场景,执行成功!
2021-12-15 13:53:58,818-[test_business_token_goods_input03.py - 65]-INFO:测试案例23,测试标题商品录入接口商品库存为0的场景,执行成功!
2021-12-15 13:53:58,991-[test_business_token_goods_input03.py - 65]-INFO:测试案例24,测试标题商品录入接口商品库存为负数的场景,执行成功!
2021-12-15 13:53:59,149-[test_business_token_goods_input03.py - 65]-INFO:测试案例25,测试标题商品录入接口商品库存无效边界值9位的场景,执行成功!
2021-12-15 13:53:59,289-[test_business_token_goods_input03.py - 65]-INFO:测试案例26,测试标题商品录入接口商品库存为空的场景,执行成功!
2021-12-15 13:53:59,442-[test_business_token_goods_input03.py - 65]-INFO:测试案例27,测试标题商品录入接口商品价格为空的场景,执行成功!
2021-12-15 13:53:59,579-[test_business_token_goods_input03.py - 65]-INFO:测试案例28,测试标题商品录入接口商品价格为整数的有效边界值8位的场景,执行成功!
2021-12-15 13:53:59,733-[test_business_token_goods_input03.py - 65]-INFO:测试案例29,测试标题商品录入接口商品价格为整数的有效边界值1位的场景,执行成功!
2021-12-15 13:53:59,870-[test_business_token_goods_input03.py - 65]-INFO:测试案例30,测试标题商品录入接口商品价格为整数的无效边界值9位的场景,执行成功!
2021-12-15 13:54:00,042-[test_business_token_goods_input03.py - 65]-INFO:测试案例31,测试标题商品录入接口商品价格为两位小数的有效边界值8位的场景,执行成功!
2021-12-15 13:54:00,244-[test_business_token_goods_input03.py - 65]-INFO:测试案例32,测试标题商品录入接口商品价格为两位小数的有效边界值1位的场景,执行成功!
2021-12-15 13:54:00,445-[test_business_token_goods_input03.py - 65]-INFO:测试案例33,测试标题商品录入接口商品价格为两位小数的无效边界值9位的场景,执行成功!
2021-12-15 13:54:00,612-[test_business_token_goods_input03.py - 65]-INFO:测试案例34,测试标题商品录入接口商品价格为负数的场景,执行成功!
2021-12-15 13:54:00,803-[test_business_token_goods_input03.py - 65]-INFO:测试案例35,测试标题商品录入接口商品价格为两位小数的负数的场景,执行成功!
2021-12-15 13:54:00,965-[test_business_token_goods_input03.py - 65]-INFO:测试案例36,测试标题商品录入接口商品价格为三位小数的有效边界值8位的场景,执行成功!
2021-12-15 13:54:01,102-[test_business_token_goods_input03.py - 65]-INFO:测试案例37,测试标题商品录入接口商品价格为三位小数的有效边界值1位的场景,执行成功!
2021-12-15 13:54:01,266-[test_business_token_goods_input03.py - 65]-INFO:测试案例38,测试标题商品录入接口商品价格为三位小数的无效边界值9位的场景,执行成功!
2021-12-15 13:54:01,406-[test_business_token_goods_input03.py - 65]-INFO:测试案例39,测试标题商品录入接口商品价格为一位小数的有效边界值8位的场景,执行成功!
2021-12-15 13:54:01,570-[test_business_token_goods_input03.py - 65]-INFO:测试案例40,测试标题商品录入接口商品价格为一位小数的有效边界值1位的场景,执行成功!
2021-12-15 13:54:01,731-[test_business_token_goods_input03.py - 65]-INFO:测试案例41,测试标题商品录入接口商品价格为一位小数的无效边界值9位的场景,执行成功!
2021-12-15 13:54:01,895-[test_business_token_goods_input03.py - 65]-INFO:测试案例42,测试标题商品录入接口商品价格非数字的场景,执行成功!
2021-12-15 13:54:02,127-[test_business_token_goods_input03.py - 65]-INFO:测试案例43,测试标题商品录入接口商品价格为0的场景,执行成功!
2021-12-15 13:54:02,347-[test_business_token_goods_input03.py - 65]-INFO:测试案例44,测试标题商品录入接口商品价格为0.00的场景,执行成功!
2021-12-15 13:54:38,790-[test_business_token_goods_input03.py - 65]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-15 13:54:38,958-[test_business_token_goods_input03.py - 65]-INFO:测试案例2,测试标题商品录入接口主流程全入参的场景,执行成功!
2021-12-15 13:54:39,097-[test_business_token_goods_input03.py - 65]-INFO:测试案例3,测试标题商品录入接口商品名有效边界值3位的场景,执行成功!
2021-12-15 13:54:39,238-[test_business_token_goods_input03.py - 65]-INFO:测试案例4,测试标题商品录入接口商品名有效边界值15位的场景,执行成功!
2021-12-15 13:54:39,372-[test_business_token_goods_input03.py - 65]-INFO:测试案例5,测试标题商品录入接口商品名无效边界值2位的场景,执行成功!
2021-12-15 13:54:39,507-[test_business_token_goods_input03.py - 65]-INFO:测试案例6,测试标题商品录入接口商品名无效边界值16位的场景,执行成功!
2021-12-15 13:54:39,644-[test_business_token_goods_input03.py - 65]-INFO:测试案例7,测试标题商品录入接口商品名重复的场景,执行成功!
2021-12-15 13:54:39,783-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 13:54:39,784-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 13:54:39,929-[test_business_token_goods_input03.py - 65]-INFO:测试案例9,测试标题商品录入接口商品名为空的场景,执行成功!
2021-12-15 13:54:40,120-[test_business_token_goods_input03.py - 65]-INFO:测试案例10,测试标题商品录入接口商品名含空格的场景,执行成功!
2021-12-15 13:54:40,257-[test_business_token_goods_input03.py - 65]-INFO:测试案例11,测试标题商品录入接口商品名含特殊符号的场景,执行成功!
2021-12-15 13:54:40,403-[test_business_token_goods_input03.py - 65]-INFO:测试案例12,测试标题商品录入接口商品分类id为空的场景,执行成功!
2021-12-15 13:54:40,541-[test_business_token_goods_input03.py - 65]-INFO:测试案例13,测试标题商品录入接口商品分类id不存在的场景,执行成功!
2021-12-15 13:54:40,712-[test_business_token_goods_input03.py - 65]-INFO:测试案例14,测试标题商品录入接口无效边界值4位的场景,执行成功!
2021-12-15 13:54:40,852-[test_business_token_goods_input03.py - 65]-INFO:测试案例15,测试标题商品录入接口无效边界值6位的场景,执行成功!
2021-12-15 13:54:41,034-[test_business_token_goods_input03.py - 65]-INFO:测试案例16,测试标题商品录入接口商品描述有效边界值10位的场景,执行成功!
2021-12-15 13:54:41,185-[test_business_token_goods_input03.py - 65]-INFO:测试案例17,测试标题商品录入接口商品描述有效边界值155位的场景,执行成功!
2021-12-15 13:54:41,366-[test_business_token_goods_input03.py - 65]-INFO:测试案例18,测试标题商品录入接口商品描述无效边界值9位的场景,执行成功!
2021-12-15 13:54:41,530-[test_business_token_goods_input03.py - 65]-INFO:测试案例19,测试标题商品录入接口商品描述无效边界值156位的场景,执行成功!
2021-12-15 13:54:41,704-[test_business_token_goods_input03.py - 65]-INFO:测试案例20,测试标题商品录入接口商品描述有特殊符号的场景,执行成功!
2021-12-15 13:54:41,843-[test_business_token_goods_input03.py - 65]-INFO:测试案例21,测试标题商品录入接口商品库存有效边界值8位的场景,执行成功!
2021-12-15 13:54:41,985-[test_business_token_goods_input03.py - 65]-INFO:测试案例22,测试标题商品录入接口商品库存有效边界值1位的场景,执行成功!
2021-12-15 13:54:42,126-[test_business_token_goods_input03.py - 65]-INFO:测试案例23,测试标题商品录入接口商品库存为0的场景,执行成功!
2021-12-15 13:54:42,260-[test_business_token_goods_input03.py - 65]-INFO:测试案例24,测试标题商品录入接口商品库存为负数的场景,执行成功!
2021-12-15 13:54:42,414-[test_business_token_goods_input03.py - 65]-INFO:测试案例25,测试标题商品录入接口商品库存无效边界值9位的场景,执行成功!
2021-12-15 13:54:42,578-[test_business_token_goods_input03.py - 65]-INFO:测试案例26,测试标题商品录入接口商品库存为空的场景,执行成功!
2021-12-15 13:54:42,717-[test_business_token_goods_input03.py - 65]-INFO:测试案例27,测试标题商品录入接口商品价格为空的场景,执行成功!
2021-12-15 13:54:42,856-[test_business_token_goods_input03.py - 65]-INFO:测试案例28,测试标题商品录入接口商品价格为整数的有效边界值8位的场景,执行成功!
2021-12-15 13:54:43,007-[test_business_token_goods_input03.py - 65]-INFO:测试案例29,测试标题商品录入接口商品价格为整数的有效边界值1位的场景,执行成功!
2021-12-15 13:54:43,144-[test_business_token_goods_input03.py - 65]-INFO:测试案例30,测试标题商品录入接口商品价格为整数的无效边界值9位的场景,执行成功!
2021-12-15 13:54:43,296-[test_business_token_goods_input03.py - 65]-INFO:测试案例31,测试标题商品录入接口商品价格为两位小数的有效边界值8位的场景,执行成功!
2021-12-15 13:54:43,436-[test_business_token_goods_input03.py - 65]-INFO:测试案例32,测试标题商品录入接口商品价格为两位小数的有效边界值1位的场景,执行成功!
2021-12-15 13:54:43,570-[test_business_token_goods_input03.py - 65]-INFO:测试案例33,测试标题商品录入接口商品价格为两位小数的无效边界值9位的场景,执行成功!
2021-12-15 13:54:43,736-[test_business_token_goods_input03.py - 65]-INFO:测试案例34,测试标题商品录入接口商品价格为负数的场景,执行成功!
2021-12-15 13:54:43,889-[test_business_token_goods_input03.py - 65]-INFO:测试案例35,测试标题商品录入接口商品价格为两位小数的负数的场景,执行成功!
2021-12-15 13:54:44,027-[test_business_token_goods_input03.py - 65]-INFO:测试案例36,测试标题商品录入接口商品价格为三位小数的有效边界值8位的场景,执行成功!
2021-12-15 13:54:44,165-[test_business_token_goods_input03.py - 65]-INFO:测试案例37,测试标题商品录入接口商品价格为三位小数的有效边界值1位的场景,执行成功!
2021-12-15 13:54:44,316-[test_business_token_goods_input03.py - 65]-INFO:测试案例38,测试标题商品录入接口商品价格为三位小数的无效边界值9位的场景,执行成功!
2021-12-15 13:54:44,449-[test_business_token_goods_input03.py - 65]-INFO:测试案例39,测试标题商品录入接口商品价格为一位小数的有效边界值8位的场景,执行成功!
2021-12-15 13:54:44,583-[test_business_token_goods_input03.py - 65]-INFO:测试案例40,测试标题商品录入接口商品价格为一位小数的有效边界值1位的场景,执行成功!
2021-12-15 13:54:44,736-[test_business_token_goods_input03.py - 65]-INFO:测试案例41,测试标题商品录入接口商品价格为一位小数的无效边界值9位的场景,执行成功!
2021-12-15 13:54:44,882-[test_business_token_goods_input03.py - 65]-INFO:测试案例42,测试标题商品录入接口商品价格非数字的场景,执行成功!
2021-12-15 13:54:45,041-[test_business_token_goods_input03.py - 65]-INFO:测试案例43,测试标题商品录入接口商品价格为0的场景,执行成功!
2021-12-15 13:54:45,184-[test_business_token_goods_input03.py - 65]-INFO:测试案例44,测试标题商品录入接口商品价格为0.00的场景,执行成功!
2021-12-15 14:03:25,362-[test_business_token_goods_input01.py - 33]-ERROR:测试案例1,测试标题商品信息录入主流程,执行失败!实际结果{'code': 1013, 'msg': '产品名称不能重复'}
2021-12-15 14:03:25,362-[test_business_token_goods_input01.py - 34]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input01.py", line 30, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^

2021-12-15 14:03:25,502-[test_business_token_goods_input02.py - 60]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-15 14:03:25,648-[test_business_token_goods_input03.py - 65]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-15 14:03:25,804-[test_business_token_goods_input03.py - 65]-INFO:测试案例2,测试标题商品录入接口主流程全入参的场景,执行成功!
2021-12-15 14:03:25,945-[test_business_token_goods_input03.py - 65]-INFO:测试案例3,测试标题商品录入接口商品名有效边界值3位的场景,执行成功!
2021-12-15 14:03:26,101-[test_business_token_goods_input03.py - 65]-INFO:测试案例4,测试标题商品录入接口商品名有效边界值15位的场景,执行成功!
2021-12-15 14:03:26,262-[test_business_token_goods_input03.py - 65]-INFO:测试案例5,测试标题商品录入接口商品名无效边界值2位的场景,执行成功!
2021-12-15 14:03:26,424-[test_business_token_goods_input03.py - 65]-INFO:测试案例6,测试标题商品录入接口商品名无效边界值16位的场景,执行成功!
2021-12-15 14:03:26,558-[test_business_token_goods_input03.py - 65]-INFO:测试案例7,测试标题商品录入接口商品名重复的场景,执行成功!
2021-12-15 14:03:26,692-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 14:03:26,692-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 14:03:26,837-[test_business_token_goods_input03.py - 65]-INFO:测试案例9,测试标题商品录入接口商品名为空的场景,执行成功!
2021-12-15 14:03:26,982-[test_business_token_goods_input03.py - 65]-INFO:测试案例10,测试标题商品录入接口商品名含空格的场景,执行成功!
2021-12-15 14:03:27,124-[test_business_token_goods_input03.py - 65]-INFO:测试案例11,测试标题商品录入接口商品名含特殊符号的场景,执行成功!
2021-12-15 14:03:27,261-[test_business_token_goods_input03.py - 65]-INFO:测试案例12,测试标题商品录入接口商品分类id为空的场景,执行成功!
2021-12-15 14:03:27,407-[test_business_token_goods_input03.py - 65]-INFO:测试案例13,测试标题商品录入接口商品分类id不存在的场景,执行成功!
2021-12-15 14:03:27,565-[test_business_token_goods_input03.py - 65]-INFO:测试案例14,测试标题商品录入接口无效边界值4位的场景,执行成功!
2021-12-15 14:03:27,717-[test_business_token_goods_input03.py - 65]-INFO:测试案例15,测试标题商品录入接口无效边界值6位的场景,执行成功!
2021-12-15 14:03:27,854-[test_business_token_goods_input03.py - 65]-INFO:测试案例16,测试标题商品录入接口商品描述有效边界值10位的场景,执行成功!
2021-12-15 14:03:27,995-[test_business_token_goods_input03.py - 65]-INFO:测试案例17,测试标题商品录入接口商品描述有效边界值155位的场景,执行成功!
2021-12-15 14:03:28,130-[test_business_token_goods_input03.py - 65]-INFO:测试案例18,测试标题商品录入接口商品描述无效边界值9位的场景,执行成功!
2021-12-15 14:03:28,264-[test_business_token_goods_input03.py - 65]-INFO:测试案例19,测试标题商品录入接口商品描述无效边界值156位的场景,执行成功!
2021-12-15 14:03:28,475-[test_business_token_goods_input03.py - 65]-INFO:测试案例20,测试标题商品录入接口商品描述有特殊符号的场景,执行成功!
2021-12-15 14:03:28,625-[test_business_token_goods_input03.py - 65]-INFO:测试案例21,测试标题商品录入接口商品库存有效边界值8位的场景,执行成功!
2021-12-15 14:03:28,791-[test_business_token_goods_input03.py - 65]-INFO:测试案例22,测试标题商品录入接口商品库存有效边界值1位的场景,执行成功!
2021-12-15 14:03:28,929-[test_business_token_goods_input03.py - 65]-INFO:测试案例23,测试标题商品录入接口商品库存为0的场景,执行成功!
2021-12-15 14:03:29,079-[test_business_token_goods_input03.py - 65]-INFO:测试案例24,测试标题商品录入接口商品库存为负数的场景,执行成功!
2021-12-15 14:03:29,211-[test_business_token_goods_input03.py - 65]-INFO:测试案例25,测试标题商品录入接口商品库存无效边界值9位的场景,执行成功!
2021-12-15 14:03:29,351-[test_business_token_goods_input03.py - 65]-INFO:测试案例26,测试标题商品录入接口商品库存为空的场景,执行成功!
2021-12-15 14:03:29,483-[test_business_token_goods_input03.py - 65]-INFO:测试案例27,测试标题商品录入接口商品价格为空的场景,执行成功!
2021-12-15 14:03:29,616-[test_business_token_goods_input03.py - 65]-INFO:测试案例28,测试标题商品录入接口商品价格为整数的有效边界值8位的场景,执行成功!
2021-12-15 14:03:29,747-[test_business_token_goods_input03.py - 65]-INFO:测试案例29,测试标题商品录入接口商品价格为整数的有效边界值1位的场景,执行成功!
2021-12-15 14:03:29,888-[test_business_token_goods_input03.py - 65]-INFO:测试案例30,测试标题商品录入接口商品价格为整数的无效边界值9位的场景,执行成功!
2021-12-15 14:03:30,048-[test_business_token_goods_input03.py - 65]-INFO:测试案例31,测试标题商品录入接口商品价格为两位小数的有效边界值8位的场景,执行成功!
2021-12-15 14:03:30,190-[test_business_token_goods_input03.py - 65]-INFO:测试案例32,测试标题商品录入接口商品价格为两位小数的有效边界值1位的场景,执行成功!
2021-12-15 14:03:30,324-[test_business_token_goods_input03.py - 65]-INFO:测试案例33,测试标题商品录入接口商品价格为两位小数的无效边界值9位的场景,执行成功!
2021-12-15 14:03:30,473-[test_business_token_goods_input03.py - 65]-INFO:测试案例34,测试标题商品录入接口商品价格为负数的场景,执行成功!
2021-12-15 14:03:30,606-[test_business_token_goods_input03.py - 65]-INFO:测试案例35,测试标题商品录入接口商品价格为两位小数的负数的场景,执行成功!
2021-12-15 14:03:30,740-[test_business_token_goods_input03.py - 65]-INFO:测试案例36,测试标题商品录入接口商品价格为三位小数的有效边界值8位的场景,执行成功!
2021-12-15 14:03:30,878-[test_business_token_goods_input03.py - 65]-INFO:测试案例37,测试标题商品录入接口商品价格为三位小数的有效边界值1位的场景,执行成功!
2021-12-15 14:03:31,011-[test_business_token_goods_input03.py - 65]-INFO:测试案例38,测试标题商品录入接口商品价格为三位小数的无效边界值9位的场景,执行成功!
2021-12-15 14:03:31,165-[test_business_token_goods_input03.py - 65]-INFO:测试案例39,测试标题商品录入接口商品价格为一位小数的有效边界值8位的场景,执行成功!
2021-12-15 14:03:31,315-[test_business_token_goods_input03.py - 65]-INFO:测试案例40,测试标题商品录入接口商品价格为一位小数的有效边界值1位的场景,执行成功!
2021-12-15 14:03:31,449-[test_business_token_goods_input03.py - 65]-INFO:测试案例41,测试标题商品录入接口商品价格为一位小数的无效边界值9位的场景,执行成功!
2021-12-15 14:03:31,583-[test_business_token_goods_input03.py - 65]-INFO:测试案例42,测试标题商品录入接口商品价格非数字的场景,执行成功!
2021-12-15 14:03:31,730-[test_business_token_goods_input03.py - 65]-INFO:测试案例43,测试标题商品录入接口商品价格为0的场景,执行成功!
2021-12-15 14:03:31,883-[test_business_token_goods_input03.py - 65]-INFO:测试案例44,测试标题商品录入接口商品价格为0.00的场景,执行成功!
2021-12-15 14:03:32,032-[test_business_items1.py - 65]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-15 14:03:32,198-[test_business_items2.py - 72]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-15 14:03:32,353-[test_business_items2.py - 72]-INFO:测试案例2,测试用例标题订单编号为空的场景,执行成功!
2021-12-15 14:03:32,519-[test_business_items2.py - 72]-INFO:测试案例3,测试用例标题订单编号非5位数字字符场景,执行成功!
2021-12-15 14:03:32,648-[test_business_items2.py - 72]-INFO:测试案例4,测试用例标题订单编号不存在的场景,执行成功!
2021-12-15 14:03:32,785-[test_business_items2.py - 72]-INFO:测试案例5,测试用例标题订单编号非5位数字的场景,执行成功!
2021-12-15 14:05:21,841-[test_token_goodsinfo3.py - 91]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-15 14:05:21,970-[test_token_goodsinfo3.py - 91]-INFO:测试案例2,测试用例标题商品信息查询—token为空,执行成功
2021-12-15 14:05:22,160-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下第一辣条', 'shopPrice': 30.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-15 14:05:22,161-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
2021-12-15 14:05:22,348-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下第一辣条', 'shopPrice': 30.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-15 14:05:22,348-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
2021-12-15 14:05:22,551-[test_token_goodsinfo3.py - 91]-INFO:测试案例5,测试用例标题商品信息查询—（不带商品）销售状态为0,执行成功
2021-12-15 14:05:22,713-[test_token_goodsinfo3.py - 91]-INFO:测试案例6,测试用例标题商品信息查询—（不带商品）销售状态为1,执行成功
2021-12-15 14:05:22,870-[test_token_goodsinfo3.py - 91]-INFO:测试案例7,测试用例标题商品信息查询—（不带商品）促销状态为0,执行成功
2021-12-15 14:05:23,026-[test_token_goodsinfo3.py - 91]-INFO:测试案例8,测试用例标题商品信息查询—（不带商品）促销状态为1,执行成功
2021-12-15 14:05:23,194-[test_token_goodsinfo3.py - 91]-INFO:测试案例9,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为0,执行成功
2021-12-15 14:05:23,340-[test_token_goodsinfo3.py - 91]-INFO:测试案例10,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为1,执行成功
2021-12-15 14:05:23,485-[test_token_goodsinfo3.py - 91]-INFO:测试案例11,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为0,执行成功
2021-12-15 14:05:23,620-[test_token_goodsinfo3.py - 91]-INFO:测试案例12,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为1,执行成功
2021-12-15 14:05:23,794-[test_token_goodsinfo3.py - 91]-INFO:测试案例13,测试用例标题商品信息查询—（带商品）销售状态为0,执行成功
2021-12-15 14:05:23,936-[test_token_goodsinfo3.py - 91]-INFO:测试案例14,测试用例标题商品信息查询—（带商品）销售状态为1,执行成功
2021-12-15 14:05:24,094-[test_token_goodsinfo3.py - 91]-INFO:测试案例15,测试用例标题商品信息查询—（带商品）促销状态为0,执行成功
2021-12-15 14:05:24,255-[test_token_goodsinfo3.py - 91]-INFO:测试案例16,测试用例标题商品信息查询—（带商品）促销状态为1,执行成功
2021-12-15 14:05:24,419-[test_token_goodsinfo3.py - 91]-INFO:测试案例17,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为0,执行成功
2021-12-15 14:05:24,564-[test_token_goodsinfo3.py - 91]-INFO:测试案例18,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为1,执行成功
2021-12-15 14:05:24,700-[test_token_goodsinfo3.py - 91]-INFO:测试案例19,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为0,执行成功
2021-12-15 14:05:24,834-[test_token_goodsinfo3.py - 91]-INFO:测试案例20,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为1,执行成功
2021-12-15 14:05:25,006-[test_token_goodsinfo3.py - 91]-INFO:测试案例21,测试用例标题商品信息查询—销售状态为非枚举,执行成功
2021-12-15 14:05:25,154-[test_token_goodsinfo3.py - 91]-INFO:测试案例22,测试用例标题商品信息查询—促销状态为非枚举,执行成功
2021-12-15 14:05:25,298-[test_token_goodsinfo3.py - 91]-INFO:测试案例23,测试用例标题商品信息查询—存在的商品编号（6位数字）,执行成功
2021-12-15 14:05:25,451-[test_token_goodsinfo3.py - 91]-INFO:测试案例24,测试用例标题商品信息查询—商品编号非6位数字,执行成功
2021-12-15 14:05:25,584-[test_token_goodsinfo3.py - 91]-INFO:测试案例25,测试用例标题商品信息查询—不存在的商品编号（6位数字）,执行成功
2021-12-15 14:05:25,715-[test_login5.py - 72]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-15 14:05:25,859-[test_login5.py - 72]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-15 14:05:25,984-[test_login5.py - 72]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-15 14:05:26,112-[test_login5.py - 67]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODMyNS45OTA0Mjg0OjgxMzkyYzA3ZmJmOGMxOGJmMWI2MmM3YzdmZjgwNjUwNTQ2NGJkYjc='}
2021-12-15 14:05:26,112-[test_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODMyN[64 chars]jc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU3ODMyNS45OTA0Mjg0OjgxMzkyYzA3ZmJmOGMxOGJmMWI2MmM3YzdmZjgwNjUwNTQ2NGJkYjc='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\test_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODMyN[64 chars]jc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU3ODMyNS45OTA0Mjg0OjgxMzkyYzA3ZmJmOGMxOGJmMWI2MmM3YzdmZjgwNjUwNTQ2NGJkYjc='}
2021-12-15 14:05:26,266-[test_login5.py - 72]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-15 14:05:26,434-[test_login5.py - 72]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-15 14:05:26,563-[test_login5.py - 72]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-15 14:05:26,691-[test_login5.py - 67]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODMyNi41NjkwMTI0OjliNGNjMjdkYjIzMDI5ZGY2MWYzZDkyODFmNWI3OGVlYjk0MGI3MGY='}
2021-12-15 14:05:26,691-[test_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODMyN[64 chars]GY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU3ODMyNi41NjkwMTI0OjliNGNjMjdkYjIzMDI5ZGY2MWYzZDkyODFmNWI3OGVlYjk0MGI3MGY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\test_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODMyN[64 chars]GY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU3ODMyNi41NjkwMTI0OjliNGNjMjdkYjIzMDI5ZGY2MWYzZDkyODFmNWI3OGVlYjk0MGI3MGY='}
2021-12-15 14:05:26,816-[test_login5.py - 72]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-15 14:05:26,946-[test_login5.py - 72]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-15 14:05:27,097-[test_login5.py - 72]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-15 14:05:27,243-[test_register03.py - 73]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-15 14:05:27,365-[test_register03.py - 73]-INFO:测试编号2,测试用例注册接口用户名为空的场景,成功！
2021-12-15 14:05:27,539-[test_register03.py - 73]-INFO:测试编号3,测试用例注册接口用户名有限边界值的场景（6-8）,成功！
2021-12-15 14:05:27,669-[test_register03.py - 73]-INFO:测试编号4,测试用例注册接口用户名无效边界值9位的场景,成功！
2021-12-15 14:05:27,796-[test_register03.py - 73]-INFO:测试编号5,测试用例注册接口用户名非字母开头的场景,成功！
2021-12-15 14:05:27,922-[test_register03.py - 73]-INFO:测试编号6,测试用例注册接口用户名包含符号或者汉字的场景,成功！
2021-12-15 14:05:28,081-[test_register03.py - 73]-INFO:测试编号7,测试用例注册接口用户名已注册的场景,成功！
2021-12-15 14:05:28,206-[test_register03.py - 73]-INFO:测试编号8,测试用例注册接口密码为空的场景,成功！
2021-12-15 14:05:28,367-[test_register03.py - 73]-INFO:测试编号9,测试用例注册接口密码有限边界值的场景（7-11）,成功！
2021-12-15 14:05:28,487-[test_register03.py - 73]-INFO:测试编号10,测试用例注册接口密码无效边界值6位的场景,成功！
2021-12-15 14:05:28,623-[test_register03.py - 73]-INFO:测试编号11,测试用例注册接口密码无效边界值12位的场景,成功！
2021-12-15 14:05:28,767-[test_register03.py - 73]-INFO:测试编号12,测试用例注册接口密码包含符号或汉字的场景,成功！
2021-12-15 14:05:28,920-[test_register03.py - 73]-INFO:测试编号13,测试用例注册接口确认密码为空的场景,成功！
2021-12-15 14:05:29,051-[test_register03.py - 73]-INFO:测试编号14,测试用例注册接口确认密码和密码不一致的场景,成功！
2021-12-15 14:05:29,181-[test_register03.py - 73]-INFO:测试编号15,测试用例注册接口确认密码大小写区分的场景,成功！
2021-12-15 14:05:29,302-[test_register03.py - 73]-INFO:测试编号16,测试用例注册接口手机号为空的场景,成功！
2021-12-15 14:05:29,454-[test_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-15 14:05:29,454-[test_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-15 14:05:29,579-[test_register03.py - 73]-INFO:测试编号18,测试用例注册接口手机号为非11位数字的场景,成功！
2021-12-15 14:05:29,708-[test_register03.py - 73]-INFO:测试编号19,测试用例注册接口手机号为非数字的场景,成功！
2021-12-15 14:05:29,847-[test_register03.py - 73]-INFO:测试编号20,测试用例注册接口性别为非枚举的场景,成功！
2021-12-15 14:05:29,994-[test_register03.py - 73]-INFO:测试编号21,测试用例注册接口性别为男+女的场景,成功！
2021-12-15 14:05:30,121-[test_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-15 14:05:30,121-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-15 14:05:30,261-[test_register03.py - 73]-INFO:测试编号23,测试用例注册接口生日年月日不完整的场景,成功！
2021-12-15 14:05:30,392-[test_register03.py - 73]-INFO:测试编号24,测试用例注册接口生日输入非数字的场景,成功！
2021-12-15 14:05:30,516-[test_register03.py - 73]-INFO:测试编号25,测试用例注册接口生日月份超过12月的场景,成功！
2021-12-15 14:05:30,653-[test_register03.py - 73]-INFO:测试编号26,测试用例注册接口生日日期超过31的场景,成功！
2021-12-15 14:05:30,810-[test_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:05:30,810-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:05:30,955-[test_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:05:30,955-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:05:31,110-[test_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:05:31,110-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:05:31,261-[test_register03.py - 73]-INFO:测试编号30,测试用例注册接口QQ为非数字的场景,成功！
2021-12-15 14:05:31,397-[test_register03.py - 73]-INFO:测试编号31,测试用例注册接口QQ为无效边界的场景（3、21）,成功！
2021-12-15 14:05:31,560-[test_register03.py - 73]-INFO:测试编号32,测试用例注册接口邮箱已注册的场景,成功！
2021-12-15 14:05:31,694-[test_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-15 14:05:31,694-[test_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-15 14:05:31,835-[test_business_token_goods_input03.py - 65]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-15 14:05:32,013-[test_business_token_goods_input03.py - 65]-INFO:测试案例2,测试标题商品录入接口主流程全入参的场景,执行成功!
2021-12-15 14:05:32,170-[test_business_token_goods_input03.py - 65]-INFO:测试案例3,测试标题商品录入接口商品名有效边界值3位的场景,执行成功!
2021-12-15 14:05:32,324-[test_business_token_goods_input03.py - 65]-INFO:测试案例4,测试标题商品录入接口商品名有效边界值15位的场景,执行成功!
2021-12-15 14:05:32,509-[test_business_token_goods_input03.py - 65]-INFO:测试案例5,测试标题商品录入接口商品名无效边界值2位的场景,执行成功!
2021-12-15 14:05:32,644-[test_business_token_goods_input03.py - 65]-INFO:测试案例6,测试标题商品录入接口商品名无效边界值16位的场景,执行成功!
2021-12-15 14:05:32,788-[test_business_token_goods_input03.py - 65]-INFO:测试案例7,测试标题商品录入接口商品名重复的场景,执行成功!
2021-12-15 14:05:32,930-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 14:05:32,930-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 14:05:33,080-[test_business_token_goods_input03.py - 65]-INFO:测试案例9,测试标题商品录入接口商品名为空的场景,执行成功!
2021-12-15 14:05:33,246-[test_business_token_goods_input03.py - 65]-INFO:测试案例10,测试标题商品录入接口商品名含空格的场景,执行成功!
2021-12-15 14:05:33,392-[test_business_token_goods_input03.py - 65]-INFO:测试案例11,测试标题商品录入接口商品名含特殊符号的场景,执行成功!
2021-12-15 14:05:33,552-[test_business_token_goods_input03.py - 65]-INFO:测试案例12,测试标题商品录入接口商品分类id为空的场景,执行成功!
2021-12-15 14:05:33,727-[test_business_token_goods_input03.py - 65]-INFO:测试案例13,测试标题商品录入接口商品分类id不存在的场景,执行成功!
2021-12-15 14:05:33,866-[test_business_token_goods_input03.py - 65]-INFO:测试案例14,测试标题商品录入接口无效边界值4位的场景,执行成功!
2021-12-15 14:05:34,032-[test_business_token_goods_input03.py - 65]-INFO:测试案例15,测试标题商品录入接口无效边界值6位的场景,执行成功!
2021-12-15 14:05:34,176-[test_business_token_goods_input03.py - 65]-INFO:测试案例16,测试标题商品录入接口商品描述有效边界值10位的场景,执行成功!
2021-12-15 14:05:34,316-[test_business_token_goods_input03.py - 65]-INFO:测试案例17,测试标题商品录入接口商品描述有效边界值155位的场景,执行成功!
2021-12-15 14:05:34,467-[test_business_token_goods_input03.py - 65]-INFO:测试案例18,测试标题商品录入接口商品描述无效边界值9位的场景,执行成功!
2021-12-15 14:05:34,600-[test_business_token_goods_input03.py - 65]-INFO:测试案例19,测试标题商品录入接口商品描述无效边界值156位的场景,执行成功!
2021-12-15 14:05:34,754-[test_business_token_goods_input03.py - 65]-INFO:测试案例20,测试标题商品录入接口商品描述有特殊符号的场景,执行成功!
2021-12-15 14:05:34,936-[test_business_token_goods_input03.py - 65]-INFO:测试案例21,测试标题商品录入接口商品库存有效边界值8位的场景,执行成功!
2021-12-15 14:05:35,082-[test_business_token_goods_input03.py - 65]-INFO:测试案例22,测试标题商品录入接口商品库存有效边界值1位的场景,执行成功!
2021-12-15 14:05:35,225-[test_business_token_goods_input03.py - 65]-INFO:测试案例23,测试标题商品录入接口商品库存为0的场景,执行成功!
2021-12-15 14:05:35,363-[test_business_token_goods_input03.py - 65]-INFO:测试案例24,测试标题商品录入接口商品库存为负数的场景,执行成功!
2021-12-15 14:05:35,493-[test_business_token_goods_input03.py - 65]-INFO:测试案例25,测试标题商品录入接口商品库存无效边界值9位的场景,执行成功!
2021-12-15 14:05:35,630-[test_business_token_goods_input03.py - 65]-INFO:测试案例26,测试标题商品录入接口商品库存为空的场景,执行成功!
2021-12-15 14:05:35,774-[test_business_token_goods_input03.py - 65]-INFO:测试案例27,测试标题商品录入接口商品价格为空的场景,执行成功!
2021-12-15 14:05:35,912-[test_business_token_goods_input03.py - 65]-INFO:测试案例28,测试标题商品录入接口商品价格为整数的有效边界值8位的场景,执行成功!
2021-12-15 14:05:36,057-[test_business_token_goods_input03.py - 65]-INFO:测试案例29,测试标题商品录入接口商品价格为整数的有效边界值1位的场景,执行成功!
2021-12-15 14:05:36,230-[test_business_token_goods_input03.py - 65]-INFO:测试案例30,测试标题商品录入接口商品价格为整数的无效边界值9位的场景,执行成功!
2021-12-15 14:05:36,389-[test_business_token_goods_input03.py - 65]-INFO:测试案例31,测试标题商品录入接口商品价格为两位小数的有效边界值8位的场景,执行成功!
2021-12-15 14:05:36,528-[test_business_token_goods_input03.py - 65]-INFO:测试案例32,测试标题商品录入接口商品价格为两位小数的有效边界值1位的场景,执行成功!
2021-12-15 14:05:36,674-[test_business_token_goods_input03.py - 65]-INFO:测试案例33,测试标题商品录入接口商品价格为两位小数的无效边界值9位的场景,执行成功!
2021-12-15 14:05:36,826-[test_business_token_goods_input03.py - 65]-INFO:测试案例34,测试标题商品录入接口商品价格为负数的场景,执行成功!
2021-12-15 14:05:36,959-[test_business_token_goods_input03.py - 65]-INFO:测试案例35,测试标题商品录入接口商品价格为两位小数的负数的场景,执行成功!
2021-12-15 14:05:37,114-[test_business_token_goods_input03.py - 65]-INFO:测试案例36,测试标题商品录入接口商品价格为三位小数的有效边界值8位的场景,执行成功!
2021-12-15 14:05:37,251-[test_business_token_goods_input03.py - 65]-INFO:测试案例37,测试标题商品录入接口商品价格为三位小数的有效边界值1位的场景,执行成功!
2021-12-15 14:05:37,410-[test_business_token_goods_input03.py - 65]-INFO:测试案例38,测试标题商品录入接口商品价格为三位小数的无效边界值9位的场景,执行成功!
2021-12-15 14:05:37,544-[test_business_token_goods_input03.py - 65]-INFO:测试案例39,测试标题商品录入接口商品价格为一位小数的有效边界值8位的场景,执行成功!
2021-12-15 14:05:37,695-[test_business_token_goods_input03.py - 65]-INFO:测试案例40,测试标题商品录入接口商品价格为一位小数的有效边界值1位的场景,执行成功!
2021-12-15 14:05:37,827-[test_business_token_goods_input03.py - 65]-INFO:测试案例41,测试标题商品录入接口商品价格为一位小数的无效边界值9位的场景,执行成功!
2021-12-15 14:05:37,961-[test_business_token_goods_input03.py - 65]-INFO:测试案例42,测试标题商品录入接口商品价格非数字的场景,执行成功!
2021-12-15 14:05:38,097-[test_business_token_goods_input03.py - 65]-INFO:测试案例43,测试标题商品录入接口商品价格为0的场景,执行成功!
2021-12-15 14:05:38,250-[test_business_token_goods_input03.py - 65]-INFO:测试案例44,测试标题商品录入接口商品价格为0.00的场景,执行成功!
2021-12-15 14:05:38,417-[test_business_items2.py - 72]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-15 14:05:38,617-[test_business_items2.py - 72]-INFO:测试案例2,测试用例标题订单编号为空的场景,执行成功!
2021-12-15 14:05:38,757-[test_business_items2.py - 72]-INFO:测试案例3,测试用例标题订单编号非5位数字字符场景,执行成功!
2021-12-15 14:05:38,893-[test_business_items2.py - 72]-INFO:测试案例4,测试用例标题订单编号不存在的场景,执行成功!
2021-12-15 14:05:39,040-[test_business_items2.py - 72]-INFO:测试案例5,测试用例标题订单编号非5位数字的场景,执行成功!
2021-12-15 14:10:58,792-[test_register03.py - 73]-INFO:测试编号23,测试用例注册接口生日年月日不完整的场景,成功！
2021-12-15 14:10:59,025-[test_register03.py - 73]-INFO:测试编号24,测试用例注册接口生日输入非数字的场景,成功！
2021-12-15 14:10:59,182-[test_register03.py - 73]-INFO:测试编号25,测试用例注册接口生日月份超过12月的场景,成功！
2021-12-15 14:10:59,319-[test_register03.py - 73]-INFO:测试编号26,测试用例注册接口生日日期超过31的场景,成功！
2021-12-15 14:10:59,445-[test_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:10:59,446-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:10:59,575-[test_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:10:59,575-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:10:59,740-[test_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:10:59,740-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:10:59,891-[test_register03.py - 73]-INFO:测试编号30,测试用例注册接口QQ为非数字的场景,成功！
2021-12-15 14:11:00,093-[test_register03.py - 73]-INFO:测试编号31,测试用例注册接口QQ为无效边界的场景（3、21）,成功！
2021-12-15 14:11:00,284-[test_register03.py - 73]-INFO:测试编号32,测试用例注册接口邮箱已注册的场景,成功！
2021-12-15 14:11:00,439-[test_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-15 14:11:00,439-[test_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-15 14:11:00,607-[test_business_token_goods_input03.py - 65]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-15 14:11:00,746-[test_business_token_goods_input03.py - 65]-INFO:测试案例2,测试标题商品录入接口主流程全入参的场景,执行成功!
2021-12-15 14:11:00,888-[test_business_token_goods_input03.py - 65]-INFO:测试案例3,测试标题商品录入接口商品名有效边界值3位的场景,执行成功!
2021-12-15 14:11:01,029-[test_business_token_goods_input03.py - 65]-INFO:测试案例4,测试标题商品录入接口商品名有效边界值15位的场景,执行成功!
2021-12-15 14:11:01,185-[test_business_token_goods_input03.py - 65]-INFO:测试案例5,测试标题商品录入接口商品名无效边界值2位的场景,执行成功!
2021-12-15 14:11:01,340-[test_business_token_goods_input03.py - 65]-INFO:测试案例6,测试标题商品录入接口商品名无效边界值16位的场景,执行成功!
2021-12-15 14:11:01,563-[test_business_token_goods_input03.py - 65]-INFO:测试案例7,测试标题商品录入接口商品名重复的场景,执行成功!
2021-12-15 14:11:01,699-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 14:11:01,699-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 14:11:01,875-[test_business_token_goods_input03.py - 65]-INFO:测试案例9,测试标题商品录入接口商品名为空的场景,执行成功!
2021-12-15 14:11:02,035-[test_business_token_goods_input03.py - 65]-INFO:测试案例10,测试标题商品录入接口商品名含空格的场景,执行成功!
2021-12-15 14:11:02,194-[test_business_token_goods_input03.py - 65]-INFO:测试案例11,测试标题商品录入接口商品名含特殊符号的场景,执行成功!
2021-12-15 14:11:02,352-[test_business_token_goods_input03.py - 65]-INFO:测试案例12,测试标题商品录入接口商品分类id为空的场景,执行成功!
2021-12-15 14:11:02,527-[test_business_token_goods_input03.py - 65]-INFO:测试案例13,测试标题商品录入接口商品分类id不存在的场景,执行成功!
2021-12-15 14:11:02,691-[test_business_token_goods_input03.py - 65]-INFO:测试案例14,测试标题商品录入接口无效边界值4位的场景,执行成功!
2021-12-15 14:11:02,825-[test_business_token_goods_input03.py - 65]-INFO:测试案例15,测试标题商品录入接口无效边界值6位的场景,执行成功!
2021-12-15 14:11:02,978-[test_business_token_goods_input03.py - 65]-INFO:测试案例16,测试标题商品录入接口商品描述有效边界值10位的场景,执行成功!
2021-12-15 14:11:03,177-[test_business_token_goods_input03.py - 65]-INFO:测试案例17,测试标题商品录入接口商品描述有效边界值155位的场景,执行成功!
2021-12-15 14:11:03,339-[test_business_token_goods_input03.py - 65]-INFO:测试案例18,测试标题商品录入接口商品描述无效边界值9位的场景,执行成功!
2021-12-15 14:11:03,505-[test_business_token_goods_input03.py - 65]-INFO:测试案例19,测试标题商品录入接口商品描述无效边界值156位的场景,执行成功!
2021-12-15 14:11:03,655-[test_business_token_goods_input03.py - 65]-INFO:测试案例20,测试标题商品录入接口商品描述有特殊符号的场景,执行成功!
2021-12-15 14:11:03,845-[test_business_token_goods_input03.py - 65]-INFO:测试案例21,测试标题商品录入接口商品库存有效边界值8位的场景,执行成功!
2021-12-15 14:11:04,007-[test_business_token_goods_input03.py - 65]-INFO:测试案例22,测试标题商品录入接口商品库存有效边界值1位的场景,执行成功!
2021-12-15 14:11:04,183-[test_business_token_goods_input03.py - 65]-INFO:测试案例23,测试标题商品录入接口商品库存为0的场景,执行成功!
2021-12-15 14:11:04,347-[test_business_token_goods_input03.py - 65]-INFO:测试案例24,测试标题商品录入接口商品库存为负数的场景,执行成功!
2021-12-15 14:11:04,500-[test_business_token_goods_input03.py - 65]-INFO:测试案例25,测试标题商品录入接口商品库存无效边界值9位的场景,执行成功!
2021-12-15 14:11:04,666-[test_business_token_goods_input03.py - 65]-INFO:测试案例26,测试标题商品录入接口商品库存为空的场景,执行成功!
2021-12-15 14:11:04,813-[test_business_token_goods_input03.py - 65]-INFO:测试案例27,测试标题商品录入接口商品价格为空的场景,执行成功!
2021-12-15 14:11:04,962-[test_business_token_goods_input03.py - 65]-INFO:测试案例28,测试标题商品录入接口商品价格为整数的有效边界值8位的场景,执行成功!
2021-12-15 14:11:05,163-[test_business_token_goods_input03.py - 65]-INFO:测试案例29,测试标题商品录入接口商品价格为整数的有效边界值1位的场景,执行成功!
2021-12-15 14:11:05,306-[test_business_token_goods_input03.py - 65]-INFO:测试案例30,测试标题商品录入接口商品价格为整数的无效边界值9位的场景,执行成功!
2021-12-15 14:11:05,499-[test_business_token_goods_input03.py - 65]-INFO:测试案例31,测试标题商品录入接口商品价格为两位小数的有效边界值8位的场景,执行成功!
2021-12-15 14:11:05,633-[test_business_token_goods_input03.py - 65]-INFO:测试案例32,测试标题商品录入接口商品价格为两位小数的有效边界值1位的场景,执行成功!
2021-12-15 14:11:05,813-[test_business_token_goods_input03.py - 65]-INFO:测试案例33,测试标题商品录入接口商品价格为两位小数的无效边界值9位的场景,执行成功!
2021-12-15 14:11:06,028-[test_business_token_goods_input03.py - 65]-INFO:测试案例34,测试标题商品录入接口商品价格为负数的场景,执行成功!
2021-12-15 14:11:06,213-[test_business_token_goods_input03.py - 65]-INFO:测试案例35,测试标题商品录入接口商品价格为两位小数的负数的场景,执行成功!
2021-12-15 14:11:06,365-[test_business_token_goods_input03.py - 65]-INFO:测试案例36,测试标题商品录入接口商品价格为三位小数的有效边界值8位的场景,执行成功!
2021-12-15 14:11:06,508-[test_business_token_goods_input03.py - 65]-INFO:测试案例37,测试标题商品录入接口商品价格为三位小数的有效边界值1位的场景,执行成功!
2021-12-15 14:11:06,682-[test_business_token_goods_input03.py - 65]-INFO:测试案例38,测试标题商品录入接口商品价格为三位小数的无效边界值9位的场景,执行成功!
2021-12-15 14:11:06,834-[test_business_token_goods_input03.py - 65]-INFO:测试案例39,测试标题商品录入接口商品价格为一位小数的有效边界值8位的场景,执行成功!
2021-12-15 14:11:06,966-[test_business_token_goods_input03.py - 65]-INFO:测试案例40,测试标题商品录入接口商品价格为一位小数的有效边界值1位的场景,执行成功!
2021-12-15 14:11:07,102-[test_business_token_goods_input03.py - 65]-INFO:测试案例41,测试标题商品录入接口商品价格为一位小数的无效边界值9位的场景,执行成功!
2021-12-15 14:11:07,243-[test_business_token_goods_input03.py - 65]-INFO:测试案例42,测试标题商品录入接口商品价格非数字的场景,执行成功!
2021-12-15 14:11:07,391-[test_business_token_goods_input03.py - 65]-INFO:测试案例43,测试标题商品录入接口商品价格为0的场景,执行成功!
2021-12-15 14:11:07,607-[test_business_token_goods_input03.py - 65]-INFO:测试案例44,测试标题商品录入接口商品价格为0.00的场景,执行成功!
2021-12-15 14:11:07,789-[test_business_items2.py - 72]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-15 14:11:07,928-[test_business_items2.py - 72]-INFO:测试案例2,测试用例标题订单编号为空的场景,执行成功!
2021-12-15 14:11:08,078-[test_business_items2.py - 72]-INFO:测试案例3,测试用例标题订单编号非5位数字字符场景,执行成功!
2021-12-15 14:11:08,244-[test_business_items2.py - 72]-INFO:测试案例4,测试用例标题订单编号不存在的场景,执行成功!
2021-12-15 14:11:08,379-[test_business_items2.py - 72]-INFO:测试案例5,测试用例标题订单编号非5位数字的场景,执行成功!
2021-12-15 14:11:18,648-[test_token_goodsinfo3.py - 91]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-15 14:11:18,798-[test_token_goodsinfo3.py - 91]-INFO:测试案例2,测试用例标题商品信息查询—token为空,执行成功
2021-12-15 14:11:18,978-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下第一辣条', 'shopPrice': 30.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-15 14:11:18,979-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
2021-12-15 14:11:19,150-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下第一辣条', 'shopPrice': 30.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-15 14:11:19,150-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
2021-12-15 14:11:19,343-[test_token_goodsinfo3.py - 91]-INFO:测试案例5,测试用例标题商品信息查询—（不带商品）销售状态为0,执行成功
2021-12-15 14:11:19,509-[test_token_goodsinfo3.py - 91]-INFO:测试案例6,测试用例标题商品信息查询—（不带商品）销售状态为1,执行成功
2021-12-15 14:11:19,653-[test_token_goodsinfo3.py - 91]-INFO:测试案例7,测试用例标题商品信息查询—（不带商品）促销状态为0,执行成功
2021-12-15 14:11:19,918-[test_token_goodsinfo3.py - 91]-INFO:测试案例8,测试用例标题商品信息查询—（不带商品）促销状态为1,执行成功
2021-12-15 14:11:20,050-[test_token_goodsinfo3.py - 91]-INFO:测试案例9,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为0,执行成功
2021-12-15 14:11:20,246-[test_token_goodsinfo3.py - 91]-INFO:测试案例10,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为1,执行成功
2021-12-15 14:11:20,455-[test_token_goodsinfo3.py - 91]-INFO:测试案例11,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为0,执行成功
2021-12-15 14:11:20,622-[test_token_goodsinfo3.py - 91]-INFO:测试案例12,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为1,执行成功
2021-12-15 14:11:20,760-[test_token_goodsinfo3.py - 91]-INFO:测试案例13,测试用例标题商品信息查询—（带商品）销售状态为0,执行成功
2021-12-15 14:11:20,916-[test_token_goodsinfo3.py - 91]-INFO:测试案例14,测试用例标题商品信息查询—（带商品）销售状态为1,执行成功
2021-12-15 14:11:21,055-[test_token_goodsinfo3.py - 91]-INFO:测试案例15,测试用例标题商品信息查询—（带商品）促销状态为0,执行成功
2021-12-15 14:11:21,191-[test_token_goodsinfo3.py - 91]-INFO:测试案例16,测试用例标题商品信息查询—（带商品）促销状态为1,执行成功
2021-12-15 14:11:21,344-[test_token_goodsinfo3.py - 91]-INFO:测试案例17,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为0,执行成功
2021-12-15 14:11:21,499-[test_token_goodsinfo3.py - 91]-INFO:测试案例18,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为1,执行成功
2021-12-15 14:11:21,663-[test_token_goodsinfo3.py - 91]-INFO:测试案例19,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为0,执行成功
2021-12-15 14:11:21,806-[test_token_goodsinfo3.py - 91]-INFO:测试案例20,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为1,执行成功
2021-12-15 14:11:21,964-[test_token_goodsinfo3.py - 91]-INFO:测试案例21,测试用例标题商品信息查询—销售状态为非枚举,执行成功
2021-12-15 14:11:22,108-[test_token_goodsinfo3.py - 91]-INFO:测试案例22,测试用例标题商品信息查询—促销状态为非枚举,执行成功
2021-12-15 14:11:22,268-[test_token_goodsinfo3.py - 91]-INFO:测试案例23,测试用例标题商品信息查询—存在的商品编号（6位数字）,执行成功
2021-12-15 14:11:22,407-[test_token_goodsinfo3.py - 91]-INFO:测试案例24,测试用例标题商品信息查询—商品编号非6位数字,执行成功
2021-12-15 14:11:22,566-[test_token_goodsinfo3.py - 91]-INFO:测试案例25,测试用例标题商品信息查询—不存在的商品编号（6位数字）,执行成功
2021-12-15 14:11:22,723-[test_login5.py - 72]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-15 14:11:22,922-[test_login5.py - 72]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-15 14:11:23,082-[test_login5.py - 72]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-15 14:11:23,236-[test_login5.py - 67]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODY4My4wODc3NDc4OjRkZjllZWM3YjM2OWY2ZDJjMjc2NjcwNWEzYzM2YjcyMTNkNGEyOWQ='}
2021-12-15 14:11:23,236-[test_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODY4M[64 chars]WQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU3ODY4My4wODc3NDc4OjRkZjllZWM3YjM2OWY2ZDJjMjc2NjcwNWEzYzM2YjcyMTNkNGEyOWQ='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\test_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODY4M[64 chars]WQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU3ODY4My4wODc3NDc4OjRkZjllZWM3YjM2OWY2ZDJjMjc2NjcwNWEzYzM2YjcyMTNkNGEyOWQ='}
2021-12-15 14:11:23,392-[test_login5.py - 72]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-15 14:11:23,533-[test_login5.py - 72]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-15 14:11:23,677-[test_login5.py - 72]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-15 14:11:23,828-[test_login5.py - 67]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODY4My42ODIxNTgyOjg3N2FmNmQ5ZTRjNzE3NWFiMTE5YmI3MDc3YWYyOTY1ZjgyMGZkMWM='}
2021-12-15 14:11:23,828-[test_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODY4M[64 chars]WM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU3ODY4My42ODIxNTgyOjg3N2FmNmQ5ZTRjNzE3NWFiMTE5YmI3MDc3YWYyOTY1ZjgyMGZkMWM='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\test_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODY4M[64 chars]WM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU3ODY4My42ODIxNTgyOjg3N2FmNmQ5ZTRjNzE3NWFiMTE5YmI3MDc3YWYyOTY1ZjgyMGZkMWM='}
2021-12-15 14:11:23,968-[test_login5.py - 72]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-15 14:11:24,150-[test_login5.py - 72]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-15 14:11:24,322-[test_login5.py - 72]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-15 14:11:24,466-[test_register03.py - 73]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-15 14:11:24,605-[test_register03.py - 73]-INFO:测试编号2,测试用例注册接口用户名为空的场景,成功！
2021-12-15 14:11:24,764-[test_register03.py - 73]-INFO:测试编号3,测试用例注册接口用户名有限边界值的场景（6-8）,成功！
2021-12-15 14:11:24,892-[test_register03.py - 73]-INFO:测试编号4,测试用例注册接口用户名无效边界值9位的场景,成功！
2021-12-15 14:11:25,032-[test_register03.py - 73]-INFO:测试编号5,测试用例注册接口用户名非字母开头的场景,成功！
2021-12-15 14:11:25,199-[test_register03.py - 73]-INFO:测试编号6,测试用例注册接口用户名包含符号或者汉字的场景,成功！
2021-12-15 14:11:25,373-[test_register03.py - 73]-INFO:测试编号7,测试用例注册接口用户名已注册的场景,成功！
2021-12-15 14:11:25,535-[test_register03.py - 73]-INFO:测试编号8,测试用例注册接口密码为空的场景,成功！
2021-12-15 14:11:25,700-[test_register03.py - 73]-INFO:测试编号9,测试用例注册接口密码有限边界值的场景（7-11）,成功！
2021-12-15 14:11:25,839-[test_register03.py - 73]-INFO:测试编号10,测试用例注册接口密码无效边界值6位的场景,成功！
2021-12-15 14:11:25,977-[test_register03.py - 73]-INFO:测试编号11,测试用例注册接口密码无效边界值12位的场景,成功！
2021-12-15 14:11:26,142-[test_register03.py - 73]-INFO:测试编号12,测试用例注册接口密码包含符号或汉字的场景,成功！
2021-12-15 14:11:26,292-[test_register03.py - 73]-INFO:测试编号13,测试用例注册接口确认密码为空的场景,成功！
2021-12-15 14:11:26,457-[test_register03.py - 73]-INFO:测试编号14,测试用例注册接口确认密码和密码不一致的场景,成功！
2021-12-15 14:11:26,622-[test_register03.py - 73]-INFO:测试编号15,测试用例注册接口确认密码大小写区分的场景,成功！
2021-12-15 14:11:26,789-[test_register03.py - 73]-INFO:测试编号16,测试用例注册接口手机号为空的场景,成功！
2021-12-15 14:11:26,941-[test_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-15 14:11:26,941-[test_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-15 14:11:27,106-[test_register03.py - 73]-INFO:测试编号18,测试用例注册接口手机号为非11位数字的场景,成功！
2021-12-15 14:11:27,267-[test_register03.py - 73]-INFO:测试编号19,测试用例注册接口手机号为非数字的场景,成功！
2021-12-15 14:11:27,415-[test_register03.py - 73]-INFO:测试编号20,测试用例注册接口性别为非枚举的场景,成功！
2021-12-15 14:11:27,552-[test_register03.py - 73]-INFO:测试编号21,测试用例注册接口性别为男+女的场景,成功！
2021-12-15 14:11:27,705-[test_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-15 14:11:27,705-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-15 14:11:27,853-[test_register03.py - 73]-INFO:测试编号23,测试用例注册接口生日年月日不完整的场景,成功！
2021-12-15 14:11:28,010-[test_register03.py - 73]-INFO:测试编号24,测试用例注册接口生日输入非数字的场景,成功！
2021-12-15 14:11:28,148-[test_register03.py - 73]-INFO:测试编号25,测试用例注册接口生日月份超过12月的场景,成功！
2021-12-15 14:11:28,309-[test_register03.py - 73]-INFO:测试编号26,测试用例注册接口生日日期超过31的场景,成功！
2021-12-15 14:11:28,442-[test_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:11:28,442-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:11:28,592-[test_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:11:28,593-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:11:28,742-[test_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:11:28,742-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:11:28,899-[test_register03.py - 73]-INFO:测试编号30,测试用例注册接口QQ为非数字的场景,成功！
2021-12-15 14:11:29,069-[test_register03.py - 73]-INFO:测试编号31,测试用例注册接口QQ为无效边界的场景（3、21）,成功！
2021-12-15 14:11:29,226-[test_register03.py - 73]-INFO:测试编号32,测试用例注册接口邮箱已注册的场景,成功！
2021-12-15 14:11:29,369-[test_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-15 14:11:29,369-[test_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-15 14:11:29,548-[test_business_token_goods_input03.py - 65]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-15 14:11:29,718-[test_business_token_goods_input03.py - 65]-INFO:测试案例2,测试标题商品录入接口主流程全入参的场景,执行成功!
2021-12-15 14:11:29,866-[test_business_token_goods_input03.py - 65]-INFO:测试案例3,测试标题商品录入接口商品名有效边界值3位的场景,执行成功!
2021-12-15 14:11:30,053-[test_business_token_goods_input03.py - 65]-INFO:测试案例4,测试标题商品录入接口商品名有效边界值15位的场景,执行成功!
2021-12-15 14:11:30,232-[test_business_token_goods_input03.py - 65]-INFO:测试案例5,测试标题商品录入接口商品名无效边界值2位的场景,执行成功!
2021-12-15 14:11:30,416-[test_business_token_goods_input03.py - 65]-INFO:测试案例6,测试标题商品录入接口商品名无效边界值16位的场景,执行成功!
2021-12-15 14:11:30,573-[test_business_token_goods_input03.py - 65]-INFO:测试案例7,测试标题商品录入接口商品名重复的场景,执行成功!
2021-12-15 14:11:30,727-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 14:11:30,728-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 14:11:30,900-[test_business_token_goods_input03.py - 65]-INFO:测试案例9,测试标题商品录入接口商品名为空的场景,执行成功!
2021-12-15 14:11:31,057-[test_business_token_goods_input03.py - 65]-INFO:测试案例10,测试标题商品录入接口商品名含空格的场景,执行成功!
2021-12-15 14:11:31,206-[test_business_token_goods_input03.py - 65]-INFO:测试案例11,测试标题商品录入接口商品名含特殊符号的场景,执行成功!
2021-12-15 14:11:31,370-[test_business_token_goods_input03.py - 65]-INFO:测试案例12,测试标题商品录入接口商品分类id为空的场景,执行成功!
2021-12-15 14:11:31,542-[test_business_token_goods_input03.py - 65]-INFO:测试案例13,测试标题商品录入接口商品分类id不存在的场景,执行成功!
2021-12-15 14:11:31,708-[test_business_token_goods_input03.py - 65]-INFO:测试案例14,测试标题商品录入接口无效边界值4位的场景,执行成功!
2021-12-15 14:11:31,873-[test_business_token_goods_input03.py - 65]-INFO:测试案例15,测试标题商品录入接口无效边界值6位的场景,执行成功!
2021-12-15 14:11:32,037-[test_business_token_goods_input03.py - 65]-INFO:测试案例16,测试标题商品录入接口商品描述有效边界值10位的场景,执行成功!
2021-12-15 14:11:32,193-[test_business_token_goods_input03.py - 65]-INFO:测试案例17,测试标题商品录入接口商品描述有效边界值155位的场景,执行成功!
2021-12-15 14:11:32,341-[test_business_token_goods_input03.py - 65]-INFO:测试案例18,测试标题商品录入接口商品描述无效边界值9位的场景,执行成功!
2021-12-15 14:11:32,478-[test_business_token_goods_input03.py - 65]-INFO:测试案例19,测试标题商品录入接口商品描述无效边界值156位的场景,执行成功!
2021-12-15 14:11:32,628-[test_business_token_goods_input03.py - 65]-INFO:测试案例20,测试标题商品录入接口商品描述有特殊符号的场景,执行成功!
2021-12-15 14:11:32,820-[test_business_token_goods_input03.py - 65]-INFO:测试案例21,测试标题商品录入接口商品库存有效边界值8位的场景,执行成功!
2021-12-15 14:11:32,988-[test_business_token_goods_input03.py - 65]-INFO:测试案例22,测试标题商品录入接口商品库存有效边界值1位的场景,执行成功!
2021-12-15 14:11:33,149-[test_business_token_goods_input03.py - 65]-INFO:测试案例23,测试标题商品录入接口商品库存为0的场景,执行成功!
2021-12-15 14:11:33,301-[test_business_token_goods_input03.py - 65]-INFO:测试案例24,测试标题商品录入接口商品库存为负数的场景,执行成功!
2021-12-15 14:11:33,456-[test_business_token_goods_input03.py - 65]-INFO:测试案例25,测试标题商品录入接口商品库存无效边界值9位的场景,执行成功!
2021-12-15 14:11:33,604-[test_business_token_goods_input03.py - 65]-INFO:测试案例26,测试标题商品录入接口商品库存为空的场景,执行成功!
2021-12-15 14:11:33,751-[test_business_token_goods_input03.py - 65]-INFO:测试案例27,测试标题商品录入接口商品价格为空的场景,执行成功!
2021-12-15 14:11:33,906-[test_business_token_goods_input03.py - 65]-INFO:测试案例28,测试标题商品录入接口商品价格为整数的有效边界值8位的场景,执行成功!
2021-12-15 14:11:34,082-[test_business_token_goods_input03.py - 65]-INFO:测试案例29,测试标题商品录入接口商品价格为整数的有效边界值1位的场景,执行成功!
2021-12-15 14:11:34,261-[test_business_token_goods_input03.py - 65]-INFO:测试案例30,测试标题商品录入接口商品价格为整数的无效边界值9位的场景,执行成功!
2021-12-15 14:11:34,450-[test_business_token_goods_input03.py - 65]-INFO:测试案例31,测试标题商品录入接口商品价格为两位小数的有效边界值8位的场景,执行成功!
2021-12-15 14:11:34,598-[test_business_token_goods_input03.py - 65]-INFO:测试案例32,测试标题商品录入接口商品价格为两位小数的有效边界值1位的场景,执行成功!
2021-12-15 14:11:34,744-[test_business_token_goods_input03.py - 65]-INFO:测试案例33,测试标题商品录入接口商品价格为两位小数的无效边界值9位的场景,执行成功!
2021-12-15 14:11:34,889-[test_business_token_goods_input03.py - 65]-INFO:测试案例34,测试标题商品录入接口商品价格为负数的场景,执行成功!
2021-12-15 14:11:35,041-[test_business_token_goods_input03.py - 65]-INFO:测试案例35,测试标题商品录入接口商品价格为两位小数的负数的场景,执行成功!
2021-12-15 14:11:35,198-[test_business_token_goods_input03.py - 65]-INFO:测试案例36,测试标题商品录入接口商品价格为三位小数的有效边界值8位的场景,执行成功!
2021-12-15 14:11:35,386-[test_business_token_goods_input03.py - 65]-INFO:测试案例37,测试标题商品录入接口商品价格为三位小数的有效边界值1位的场景,执行成功!
2021-12-15 14:11:35,531-[test_business_token_goods_input03.py - 65]-INFO:测试案例38,测试标题商品录入接口商品价格为三位小数的无效边界值9位的场景,执行成功!
2021-12-15 14:11:35,714-[test_business_token_goods_input03.py - 65]-INFO:测试案例39,测试标题商品录入接口商品价格为一位小数的有效边界值8位的场景,执行成功!
2021-12-15 14:11:35,897-[test_business_token_goods_input03.py - 65]-INFO:测试案例40,测试标题商品录入接口商品价格为一位小数的有效边界值1位的场景,执行成功!
2021-12-15 14:11:36,069-[test_business_token_goods_input03.py - 65]-INFO:测试案例41,测试标题商品录入接口商品价格为一位小数的无效边界值9位的场景,执行成功!
2021-12-15 14:11:36,216-[test_business_token_goods_input03.py - 65]-INFO:测试案例42,测试标题商品录入接口商品价格非数字的场景,执行成功!
2021-12-15 14:11:36,373-[test_business_token_goods_input03.py - 65]-INFO:测试案例43,测试标题商品录入接口商品价格为0的场景,执行成功!
2021-12-15 14:11:36,569-[test_business_token_goods_input03.py - 65]-INFO:测试案例44,测试标题商品录入接口商品价格为0.00的场景,执行成功!
2021-12-15 14:11:36,725-[test_business_items2.py - 72]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-15 14:11:36,876-[test_business_items2.py - 72]-INFO:测试案例2,测试用例标题订单编号为空的场景,执行成功!
2021-12-15 14:11:37,036-[test_business_items2.py - 72]-INFO:测试案例3,测试用例标题订单编号非5位数字字符场景,执行成功!
2021-12-15 14:11:37,184-[test_business_items2.py - 72]-INFO:测试案例4,测试用例标题订单编号不存在的场景,执行成功!
2021-12-15 14:11:37,360-[test_business_items2.py - 72]-INFO:测试案例5,测试用例标题订单编号非5位数字的场景,执行成功!
2021-12-15 14:13:58,321-[test_token_goodsinfo3.py - 91]-INFO:测试案例18,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为1,执行成功
2021-12-15 14:13:58,490-[test_token_goodsinfo3.py - 91]-INFO:测试案例19,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为0,执行成功
2021-12-15 14:13:58,672-[test_token_goodsinfo3.py - 91]-INFO:测试案例20,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为1,执行成功
2021-12-15 14:13:58,833-[test_token_goodsinfo3.py - 91]-INFO:测试案例21,测试用例标题商品信息查询—销售状态为非枚举,执行成功
2021-12-15 14:13:58,999-[test_token_goodsinfo3.py - 91]-INFO:测试案例22,测试用例标题商品信息查询—促销状态为非枚举,执行成功
2021-12-15 14:13:59,210-[test_token_goodsinfo3.py - 91]-INFO:测试案例23,测试用例标题商品信息查询—存在的商品编号（6位数字）,执行成功
2021-12-15 14:13:59,442-[test_token_goodsinfo3.py - 91]-INFO:测试案例24,测试用例标题商品信息查询—商品编号非6位数字,执行成功
2021-12-15 14:13:59,589-[test_token_goodsinfo3.py - 91]-INFO:测试案例25,测试用例标题商品信息查询—不存在的商品编号（6位数字）,执行成功
2021-12-15 14:14:03,975-[test_token_goodsinfo3.py - 91]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-15 14:14:04,111-[test_token_goodsinfo3.py - 91]-INFO:测试案例2,测试用例标题商品信息查询—token为空,执行成功
2021-12-15 14:14:04,287-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下第一辣条', 'shopPrice': 30.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-15 14:14:04,287-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
2021-12-15 14:14:04,459-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下第一辣条', 'shopPrice': 30.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-15 14:14:04,459-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
2021-12-15 14:14:04,605-[test_token_goodsinfo3.py - 91]-INFO:测试案例5,测试用例标题商品信息查询—（不带商品）销售状态为0,执行成功
2021-12-15 14:14:04,756-[test_token_goodsinfo3.py - 91]-INFO:测试案例6,测试用例标题商品信息查询—（不带商品）销售状态为1,执行成功
2021-12-15 14:14:04,899-[test_token_goodsinfo3.py - 91]-INFO:测试案例7,测试用例标题商品信息查询—（不带商品）促销状态为0,执行成功
2021-12-15 14:14:05,069-[test_token_goodsinfo3.py - 91]-INFO:测试案例8,测试用例标题商品信息查询—（不带商品）促销状态为1,执行成功
2021-12-15 14:14:05,229-[test_token_goodsinfo3.py - 91]-INFO:测试案例9,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为0,执行成功
2021-12-15 14:14:05,400-[test_token_goodsinfo3.py - 91]-INFO:测试案例10,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为1,执行成功
2021-12-15 14:14:05,575-[test_token_goodsinfo3.py - 91]-INFO:测试案例11,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为0,执行成功
2021-12-15 14:14:05,741-[test_token_goodsinfo3.py - 91]-INFO:测试案例12,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为1,执行成功
2021-12-15 14:14:05,889-[test_token_goodsinfo3.py - 91]-INFO:测试案例13,测试用例标题商品信息查询—（带商品）销售状态为0,执行成功
2021-12-15 14:14:06,031-[test_token_goodsinfo3.py - 91]-INFO:测试案例14,测试用例标题商品信息查询—（带商品）销售状态为1,执行成功
2021-12-15 14:14:06,185-[test_token_goodsinfo3.py - 91]-INFO:测试案例15,测试用例标题商品信息查询—（带商品）促销状态为0,执行成功
2021-12-15 14:14:06,355-[test_token_goodsinfo3.py - 91]-INFO:测试案例16,测试用例标题商品信息查询—（带商品）促销状态为1,执行成功
2021-12-15 14:14:06,561-[test_token_goodsinfo3.py - 91]-INFO:测试案例17,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为0,执行成功
2021-12-15 14:14:06,711-[test_token_goodsinfo3.py - 91]-INFO:测试案例18,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为1,执行成功
2021-12-15 14:14:06,870-[test_token_goodsinfo3.py - 91]-INFO:测试案例19,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为0,执行成功
2021-12-15 14:14:07,020-[test_token_goodsinfo3.py - 91]-INFO:测试案例20,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为1,执行成功
2021-12-15 14:14:07,160-[test_token_goodsinfo3.py - 91]-INFO:测试案例21,测试用例标题商品信息查询—销售状态为非枚举,执行成功
2021-12-15 14:14:07,300-[test_token_goodsinfo3.py - 91]-INFO:测试案例22,测试用例标题商品信息查询—促销状态为非枚举,执行成功
2021-12-15 14:14:07,449-[test_token_goodsinfo3.py - 91]-INFO:测试案例23,测试用例标题商品信息查询—存在的商品编号（6位数字）,执行成功
2021-12-15 14:14:07,622-[test_token_goodsinfo3.py - 91]-INFO:测试案例24,测试用例标题商品信息查询—商品编号非6位数字,执行成功
2021-12-15 14:14:07,771-[test_token_goodsinfo3.py - 91]-INFO:测试案例25,测试用例标题商品信息查询—不存在的商品编号（6位数字）,执行成功
2021-12-15 14:18:03,334-[test_business_token_goods_input03.py - 65]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-15 14:18:03,500-[test_business_token_goods_input03.py - 65]-INFO:测试案例2,测试标题商品录入接口主流程全入参的场景,执行成功!
2021-12-15 14:18:03,681-[test_business_token_goods_input03.py - 65]-INFO:测试案例3,测试标题商品录入接口商品名有效边界值3位的场景,执行成功!
2021-12-15 14:18:03,873-[test_business_token_goods_input03.py - 65]-INFO:测试案例4,测试标题商品录入接口商品名有效边界值15位的场景,执行成功!
2021-12-15 14:18:04,042-[test_business_token_goods_input03.py - 65]-INFO:测试案例5,测试标题商品录入接口商品名无效边界值2位的场景,执行成功!
2021-12-15 14:18:04,187-[test_business_token_goods_input03.py - 65]-INFO:测试案例6,测试标题商品录入接口商品名无效边界值16位的场景,执行成功!
2021-12-15 14:18:04,345-[test_business_token_goods_input03.py - 65]-INFO:测试案例7,测试标题商品录入接口商品名重复的场景,执行成功!
2021-12-15 14:18:04,484-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 14:18:04,484-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 14:18:04,623-[test_business_token_goods_input03.py - 65]-INFO:测试案例9,测试标题商品录入接口商品名为空的场景,执行成功!
2021-12-15 14:18:04,795-[test_business_token_goods_input03.py - 65]-INFO:测试案例10,测试标题商品录入接口商品名含空格的场景,执行成功!
2021-12-15 14:18:04,964-[test_business_token_goods_input03.py - 65]-INFO:测试案例11,测试标题商品录入接口商品名含特殊符号的场景,执行成功!
2021-12-15 14:18:05,127-[test_business_token_goods_input03.py - 65]-INFO:测试案例12,测试标题商品录入接口商品分类id为空的场景,执行成功!
2021-12-15 14:18:05,277-[test_business_token_goods_input03.py - 65]-INFO:测试案例13,测试标题商品录入接口商品分类id不存在的场景,执行成功!
2021-12-15 14:18:05,419-[test_business_token_goods_input03.py - 65]-INFO:测试案例14,测试标题商品录入接口无效边界值4位的场景,执行成功!
2021-12-15 14:18:05,559-[test_business_token_goods_input03.py - 65]-INFO:测试案例15,测试标题商品录入接口无效边界值6位的场景,执行成功!
2021-12-15 14:18:05,700-[test_business_token_goods_input03.py - 65]-INFO:测试案例16,测试标题商品录入接口商品描述有效边界值10位的场景,执行成功!
2021-12-15 14:18:05,842-[test_business_token_goods_input03.py - 65]-INFO:测试案例17,测试标题商品录入接口商品描述有效边界值155位的场景,执行成功!
2021-12-15 14:18:05,983-[test_business_token_goods_input03.py - 65]-INFO:测试案例18,测试标题商品录入接口商品描述无效边界值9位的场景,执行成功!
2021-12-15 14:18:06,162-[test_business_token_goods_input03.py - 65]-INFO:测试案例19,测试标题商品录入接口商品描述无效边界值156位的场景,执行成功!
2021-12-15 14:18:06,327-[test_business_token_goods_input03.py - 65]-INFO:测试案例20,测试标题商品录入接口商品描述有特殊符号的场景,执行成功!
2021-12-15 14:18:06,470-[test_business_token_goods_input03.py - 65]-INFO:测试案例21,测试标题商品录入接口商品库存有效边界值8位的场景,执行成功!
2021-12-15 14:18:06,643-[test_business_token_goods_input03.py - 65]-INFO:测试案例22,测试标题商品录入接口商品库存有效边界值1位的场景,执行成功!
2021-12-15 14:18:06,791-[test_business_token_goods_input03.py - 65]-INFO:测试案例23,测试标题商品录入接口商品库存为0的场景,执行成功!
2021-12-15 14:18:06,932-[test_business_token_goods_input03.py - 65]-INFO:测试案例24,测试标题商品录入接口商品库存为负数的场景,执行成功!
2021-12-15 14:18:07,080-[test_business_token_goods_input03.py - 65]-INFO:测试案例25,测试标题商品录入接口商品库存无效边界值9位的场景,执行成功!
2021-12-15 14:18:07,291-[test_business_token_goods_input03.py - 65]-INFO:测试案例26,测试标题商品录入接口商品库存为空的场景,执行成功!
2021-12-15 14:18:07,484-[test_business_token_goods_input03.py - 65]-INFO:测试案例27,测试标题商品录入接口商品价格为空的场景,执行成功!
2021-12-15 14:18:07,674-[test_business_token_goods_input03.py - 65]-INFO:测试案例28,测试标题商品录入接口商品价格为整数的有效边界值8位的场景,执行成功!
2021-12-15 14:18:07,905-[test_business_token_goods_input03.py - 65]-INFO:测试案例29,测试标题商品录入接口商品价格为整数的有效边界值1位的场景,执行成功!
2021-12-15 14:18:08,098-[test_business_token_goods_input03.py - 65]-INFO:测试案例30,测试标题商品录入接口商品价格为整数的无效边界值9位的场景,执行成功!
2021-12-15 14:18:08,285-[test_business_token_goods_input03.py - 65]-INFO:测试案例31,测试标题商品录入接口商品价格为两位小数的有效边界值8位的场景,执行成功!
2021-12-15 14:18:08,447-[test_business_token_goods_input03.py - 65]-INFO:测试案例32,测试标题商品录入接口商品价格为两位小数的有效边界值1位的场景,执行成功!
2021-12-15 14:18:08,625-[test_business_token_goods_input03.py - 65]-INFO:测试案例33,测试标题商品录入接口商品价格为两位小数的无效边界值9位的场景,执行成功!
2021-12-15 14:18:08,804-[test_business_token_goods_input03.py - 65]-INFO:测试案例34,测试标题商品录入接口商品价格为负数的场景,执行成功!
2021-12-15 14:18:08,968-[test_business_token_goods_input03.py - 65]-INFO:测试案例35,测试标题商品录入接口商品价格为两位小数的负数的场景,执行成功!
2021-12-15 14:18:09,103-[test_business_token_goods_input03.py - 65]-INFO:测试案例36,测试标题商品录入接口商品价格为三位小数的有效边界值8位的场景,执行成功!
2021-12-15 14:18:09,258-[test_business_token_goods_input03.py - 65]-INFO:测试案例37,测试标题商品录入接口商品价格为三位小数的有效边界值1位的场景,执行成功!
2021-12-15 14:18:09,424-[test_business_token_goods_input03.py - 65]-INFO:测试案例38,测试标题商品录入接口商品价格为三位小数的无效边界值9位的场景,执行成功!
2021-12-15 14:18:09,562-[test_business_token_goods_input03.py - 65]-INFO:测试案例39,测试标题商品录入接口商品价格为一位小数的有效边界值8位的场景,执行成功!
2021-12-15 14:18:09,717-[test_business_token_goods_input03.py - 65]-INFO:测试案例40,测试标题商品录入接口商品价格为一位小数的有效边界值1位的场景,执行成功!
2021-12-15 14:18:09,854-[test_business_token_goods_input03.py - 65]-INFO:测试案例41,测试标题商品录入接口商品价格为一位小数的无效边界值9位的场景,执行成功!
2021-12-15 14:18:10,046-[test_business_token_goods_input03.py - 65]-INFO:测试案例42,测试标题商品录入接口商品价格非数字的场景,执行成功!
2021-12-15 14:18:10,210-[test_business_token_goods_input03.py - 65]-INFO:测试案例43,测试标题商品录入接口商品价格为0的场景,执行成功!
2021-12-15 14:18:10,352-[test_business_token_goods_input03.py - 65]-INFO:测试案例44,测试标题商品录入接口商品价格为0.00的场景,执行成功!
2021-12-15 14:48:49,790-[test_token_goodsinfo3.py - 91]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-15 14:48:49,992-[test_token_goodsinfo3.py - 91]-INFO:测试案例2,测试用例标题商品信息查询—token为空,执行成功
2021-12-15 14:48:50,170-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下第一辣条', 'shopPrice': 30.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-15 14:48:50,170-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
2021-12-15 14:48:50,458-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下第一辣条', 'shopPrice': 30.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-15 14:48:50,458-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
2021-12-15 14:48:50,620-[test_token_goodsinfo3.py - 91]-INFO:测试案例5,测试用例标题商品信息查询—（不带商品）销售状态为0,执行成功
2021-12-15 14:48:50,761-[test_token_goodsinfo3.py - 91]-INFO:测试案例6,测试用例标题商品信息查询—（不带商品）销售状态为1,执行成功
2021-12-15 14:48:50,930-[test_token_goodsinfo3.py - 91]-INFO:测试案例7,测试用例标题商品信息查询—（不带商品）促销状态为0,执行成功
2021-12-15 14:48:51,079-[test_token_goodsinfo3.py - 91]-INFO:测试案例8,测试用例标题商品信息查询—（不带商品）促销状态为1,执行成功
2021-12-15 14:48:51,260-[test_token_goodsinfo3.py - 91]-INFO:测试案例9,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为0,执行成功
2021-12-15 14:48:51,453-[test_token_goodsinfo3.py - 91]-INFO:测试案例10,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为1,执行成功
2021-12-15 14:48:51,638-[test_token_goodsinfo3.py - 91]-INFO:测试案例11,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为0,执行成功
2021-12-15 14:48:51,789-[test_token_goodsinfo3.py - 91]-INFO:测试案例12,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为1,执行成功
2021-12-15 14:48:51,931-[test_token_goodsinfo3.py - 91]-INFO:测试案例13,测试用例标题商品信息查询—（带商品）销售状态为0,执行成功
2021-12-15 14:48:52,079-[test_token_goodsinfo3.py - 91]-INFO:测试案例14,测试用例标题商品信息查询—（带商品）销售状态为1,执行成功
2021-12-15 14:48:52,216-[test_token_goodsinfo3.py - 91]-INFO:测试案例15,测试用例标题商品信息查询—（带商品）促销状态为0,执行成功
2021-12-15 14:48:52,367-[test_token_goodsinfo3.py - 91]-INFO:测试案例16,测试用例标题商品信息查询—（带商品）促销状态为1,执行成功
2021-12-15 14:48:52,534-[test_token_goodsinfo3.py - 91]-INFO:测试案例17,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为0,执行成功
2021-12-15 14:48:52,700-[test_token_goodsinfo3.py - 91]-INFO:测试案例18,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为1,执行成功
2021-12-15 14:48:52,860-[test_token_goodsinfo3.py - 91]-INFO:测试案例19,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为0,执行成功
2021-12-15 14:48:52,997-[test_token_goodsinfo3.py - 91]-INFO:测试案例20,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为1,执行成功
2021-12-15 14:48:53,159-[test_token_goodsinfo3.py - 91]-INFO:测试案例21,测试用例标题商品信息查询—销售状态为非枚举,执行成功
2021-12-15 14:48:53,296-[test_token_goodsinfo3.py - 91]-INFO:测试案例22,测试用例标题商品信息查询—促销状态为非枚举,执行成功
2021-12-15 14:48:53,440-[test_token_goodsinfo3.py - 91]-INFO:测试案例23,测试用例标题商品信息查询—存在的商品编号（6位数字）,执行成功
2021-12-15 14:48:53,577-[test_token_goodsinfo3.py - 91]-INFO:测试案例24,测试用例标题商品信息查询—商品编号非6位数字,执行成功
2021-12-15 14:48:53,741-[test_token_goodsinfo3.py - 91]-INFO:测试案例25,测试用例标题商品信息查询—不存在的商品编号（6位数字）,执行成功
2021-12-15 15:50:06,338-[test_business_goods_promote013.py - 32]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 15:50:06,338-[test_business_goods_promote013.py - 33]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote013.py", line 28, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 15:53:01,587-[test_business_goods_promote013.py - 37]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 15:53:01,588-[test_business_goods_promote013.py - 38]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote013.py", line 33, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:06:52,605-[test_business_goods_promote02.py - 50]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:06:52,605-[test_business_goods_promote02.py - 51]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 46, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:09:27,040-[test_business_goods_promote02.py - 51]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:09:27,040-[test_business_goods_promote02.py - 52]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:12:11,144-[test_business_goods_promote02.py - 51]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:12:11,145-[test_business_goods_promote02.py - 52]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:17:58,234-[test_business_goods_promote02.py - 51]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:17:58,234-[test_business_goods_promote02.py - 52]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:20:01,730-[test_business_goods_promote02.py - 51]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:20:01,730-[test_business_goods_promote02.py - 52]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:21:06,417-[test_business_goods_promote02.py - 51]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:21:06,417-[test_business_goods_promote02.py - 52]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:38:22,606-[test_business_goods_promote02.py - 54]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:38:22,606-[test_business_goods_promote02.py - 55]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:38:44,136-[test_business_goods_promote02.py - 55]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:38:44,136-[test_business_goods_promote02.py - 56]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:39:19,451-[test_business_goods_promote02.py - 55]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:39:19,452-[test_business_goods_promote02.py - 56]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:39:44,564-[test_business_goods_promote02.py - 55]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:39:44,565-[test_business_goods_promote02.py - 56]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:40:13,716-[test_business_goods_promote02.py - 55]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:40:13,716-[test_business_goods_promote02.py - 56]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:41:22,937-[test_business_goods_promote02.py - 55]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:41:22,938-[test_business_goods_promote02.py - 56]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:41:59,285-[test_business_goods_promote02.py - 55]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:41:59,285-[test_business_goods_promote02.py - 56]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:45:48,810-[test_business_goods_promote02.py - 53]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1000, 'msg': '促销开启设置成功'}
2021-12-15 16:45:48,811-[test_business_goods_promote02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 49, in testgoodspromote
    self.assertEqual(count, 0)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-15 16:48:20,599-[test_business_goods_promote02.py - 53]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1000, 'msg': '促销开启设置成功'}
2021-12-15 16:48:20,599-[test_business_goods_promote02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 49, in testgoodspromote
    self.assertEqual(count, 0)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-15 17:29:15,214-[test_business_goods_promote03.py - 54]-ERROR:测试案列7，测试标题促销设置接口—商品编号非6位数字,执行失败!实际结果{'code': 1007, 'msg': '商品编号格式不正确'}
2021-12-15 17:29:15,214-[test_business_goods_promote03.py - 55]-ERROR:{'code': 1002, 'msg': '商品编号必须为6位数字'} != {'code': 1007, 'msg': '商品编号格式不正确'}
- {'code': 1002, 'msg': '商品编号必须为6位数字'}
?             ^              ^^^^^^^

+ {'code': 1007, 'msg': '商品编号格式不正确'}
?             ^              ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 46, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1002, 'msg': '商品编号必须为6位数字'} != {'code': 1007, 'msg': '商品编号格式不正确'}
- {'code': 1002, 'msg': '商品编号必须为6位数字'}
?             ^              ^^^^^^^

+ {'code': 1007, 'msg': '商品编号格式不正确'}
?             ^              ^^^^^

2021-12-15 19:19:00,006-[NEW_test_business_Login.py - 32]-INFO:测试用例1,测试标题登录主流程,执行成功
2021-12-15 19:31:47,985-[NEW_test_business_Login.py - 47]-INFO:测试用例1,测试标题登录主流程,执行成功
2021-12-15 19:32:40,218-[NEW_test_business_Login.py - 47]-INFO:测试用例1,测试标题登录主流程,执行成功
2021-12-15 19:37:58,251-[Ftest_login2.py - 64]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-15 19:38:14,411-[Ftest_login2.py - 64]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-15 19:40:30,047-[NEW_test_business_Login.py - 50]-INFO:测试用例1,测试标题登录主流程,执行成功
2021-12-15 19:40:30,182-[NEW_test_business_Login.py - 50]-INFO:测试用例2,测试标题登录用户名为空,执行成功
2021-12-15 19:40:30,320-[NEW_test_business_Login.py - 50]-INFO:测试用例3,测试标题登录用户名错误,执行成功
2021-12-15 19:40:30,462-[NEW_test_business_Login.py - 45]-ERROR:测试用例4,测试标题登录用户名大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODQzMC4zMjgwMDU2OjY0ZjIzOWQxZGRjM2U3NmI4MjdkMzBiMGM3YTY4Yzg4ZWJhYmQ1MTY='}
2021-12-15 19:40:30,463-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODQzM[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU5ODQzMC4zMjgwMDU2OjY0ZjIzOWQxZGRjM2U3NmI4MjdkMzBiMGM3YTY4Yzg4ZWJhYmQ1MTY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODQzM[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU5ODQzMC4zMjgwMDU2OjY0ZjIzOWQxZGRjM2U3NmI4MjdkMzBiMGM3YTY4Yzg4ZWJhYmQ1MTY='}
2021-12-15 19:40:30,600-[NEW_test_business_Login.py - 50]-INFO:测试用例5,测试标题用户名格式,执行成功
2021-12-15 19:40:30,734-[NEW_test_business_Login.py - 50]-INFO:测试用例6,测试标题登录密码为空,执行成功
2021-12-15 19:40:30,886-[NEW_test_business_Login.py - 50]-INFO:测试用例7,测试标题登录密码错误,执行成功
2021-12-15 19:40:31,047-[NEW_test_business_Login.py - 45]-ERROR:测试用例8,测试标题登录密码大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODQzMC44OTI0ODU5OjEwN2RkNTZhYTNmY2M1ZWUzNjdhYmEyYzFhNmQ1ZmE3ZDA3NjM5OGU='}
2021-12-15 19:40:31,047-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODQzM[64 chars]GU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU5ODQzMC44OTI0ODU5OjEwN2RkNTZhYTNmY2M1ZWUzNjdhYmEyYzFhNmQ1ZmE3ZDA3NjM5OGU='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODQzM[64 chars]GU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU5ODQzMC44OTI0ODU5OjEwN2RkNTZhYTNmY2M1ZWUzNjdhYmEyYzFhNmQ1ZmE3ZDA3NjM5OGU='}
2021-12-15 19:40:31,187-[NEW_test_business_Login.py - 50]-INFO:测试用例9,测试标题用户类型不匹配,执行成功
2021-12-15 19:40:31,334-[NEW_test_business_Login.py - 50]-INFO:测试用例10,测试标题用户类型错误,执行成功
2021-12-15 19:40:31,466-[NEW_test_business_Login.py - 50]-INFO:测试用例11,测试标题用户类型为空,执行成功
2021-12-15 19:42:09,263-[NEW_test_business_Login.py - 50]-INFO:测试用例1,测试标题登录主流程,执行成功
2021-12-15 19:42:09,406-[NEW_test_business_Login.py - 50]-INFO:测试用例2,测试标题登录用户名为空,执行成功
2021-12-15 19:42:09,541-[NEW_test_business_Login.py - 50]-INFO:测试用例3,测试标题登录用户名错误,执行成功
2021-12-15 19:42:09,677-[NEW_test_business_Login.py - 45]-ERROR:测试用例4,测试标题登录用户名大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODUyOS41NDgyNDk6YjI3YTMwNzRiZTU0MTdmYTFiZWNjMjUyMDZhMGUyZjcxOTE1ZDFiYQ=='}
2021-12-15 19:42:09,677-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODUyO[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU5ODUyOS41NDgyNDk6YjI3YTMwNzRiZTU0MTdmYTFiZWNjMjUyMDZhMGUyZjcxOTE1ZDFiYQ=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODUyO[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU5ODUyOS41NDgyNDk6YjI3YTMwNzRiZTU0MTdmYTFiZWNjMjUyMDZhMGUyZjcxOTE1ZDFiYQ=='}
2021-12-15 19:42:09,831-[NEW_test_business_Login.py - 50]-INFO:测试用例5,测试标题用户名格式,执行成功
2021-12-15 19:42:09,965-[NEW_test_business_Login.py - 50]-INFO:测试用例6,测试标题登录密码为空,执行成功
2021-12-15 19:42:10,121-[NEW_test_business_Login.py - 50]-INFO:测试用例7,测试标题登录密码错误,执行成功
2021-12-15 19:42:10,278-[NEW_test_business_Login.py - 45]-ERROR:测试用例8,测试标题登录密码大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODUzMC4xMjgwMzY6MzRlZmQxNjQwMDZkYmNiYjczNGFmZDgxNmZhNDVjNDRhMWJiMzcwOQ=='}
2021-12-15 19:42:10,278-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODUzM[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU5ODUzMC4xMjgwMzY6MzRlZmQxNjQwMDZkYmNiYjczNGFmZDgxNmZhNDVjNDRhMWJiMzcwOQ=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODUzM[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU5ODUzMC4xMjgwMzY6MzRlZmQxNjQwMDZkYmNiYjczNGFmZDgxNmZhNDVjNDRhMWJiMzcwOQ=='}
2021-12-15 19:42:10,430-[NEW_test_business_Login.py - 50]-INFO:测试用例9,测试标题用户类型不匹配,执行成功
2021-12-15 19:42:10,578-[NEW_test_business_Login.py - 50]-INFO:测试用例10,测试标题用户类型错误,执行成功
2021-12-15 19:42:10,725-[NEW_test_business_Login.py - 50]-INFO:测试用例11,测试标题用户类型为空,执行成功
2021-12-16 12:52:50,824-[test_business_goods_promote03.py - 60]-ERROR:测试案列2，测试标题促销设置接口_promoteStartTime为空,执行失败!实际结果{'code': 1002, 'msg': '促销开始时间不能为空'}
2021-12-16 12:52:50,825-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:50,983-[test_business_goods_promote03.py - 60]-ERROR:测试案列3，测试标题促销设置接口_promoteStartTime年月日不完整,执行失败!实际结果{'code': 1005, 'msg': '促销开始时间格式不正确'}
2021-12-16 12:52:50,983-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:51,142-[test_business_goods_promote03.py - 60]-ERROR:测试案列4，测试标题促销设置接口_promoteStartTime输入非数字,执行失败!实际结果{'code': 1005, 'msg': '促销开始时间格式不正确'}
2021-12-16 12:52:51,143-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:51,318-[test_business_goods_promote03.py - 60]-ERROR:测试案列5，测试标题促销设置接口_promoteStartTime月份超过12,执行失败!实际结果{'code': 1005, 'msg': '促销开始时间格式不正确'}
2021-12-16 12:52:51,318-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:51,514-[test_business_goods_promote03.py - 60]-ERROR:测试案列6，测试标题促销设置接口_promoteStartTime日期超过31,执行失败!实际结果{'code': 1005, 'msg': '促销开始时间格式不正确'}
2021-12-16 12:52:51,514-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:51,801-[test_business_goods_promote03.py - 60]-ERROR:测试案列10，测试标题促销设置接口_promoteStartTime小于当前时间,执行失败!实际结果{'code': 1008, 'msg': '促销开始时间必须大于当前时间'}
2021-12-16 12:52:51,801-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:51,964-[test_business_goods_promote03.py - 60]-ERROR:测试案列11，测试标题促销设置接口_promoteEndTime为空,执行失败!实际结果{'code': 1003, 'msg': '促销结束时间不能为空'}
2021-12-16 12:52:51,964-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:52,168-[test_business_goods_promote03.py - 60]-ERROR:测试案列12，测试标题促销设置接口_promoteEndTime年月日不完整,执行失败!实际结果{'code': 1006, 'msg': '促销结束时间格式不正确'}
2021-12-16 12:52:52,168-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:52,340-[test_business_goods_promote03.py - 60]-ERROR:测试案列13，测试标题促销设置接口_promoteEndTime输入非数字,执行失败!实际结果{'code': 1006, 'msg': '促销结束时间格式不正确'}
2021-12-16 12:52:52,341-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:52,526-[test_business_goods_promote03.py - 60]-ERROR:测试案列14，测试标题促销设置接口_promoteEndTime月份超过12,执行失败!实际结果{'code': 1006, 'msg': '促销结束时间格式不正确'}
2021-12-16 12:52:52,526-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:52,718-[test_business_goods_promote03.py - 60]-ERROR:测试案列15，测试标题促销设置接口_promoteEndTime日期超过31,执行失败!实际结果{'code': 1006, 'msg': '促销结束时间格式不正确'}
2021-12-16 12:52:52,718-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:53,036-[test_business_goods_promote03.py - 60]-ERROR:测试案列19，测试标题促销设置接口_promoteEndTime小于promoteStartTime,执行失败!实际结果{'code': 1009, 'msg': '促销结束时间必须大于等于促销开始时间'}
2021-12-16 12:52:53,037-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:53,234-[test_business_goods_promote03.py - 60]-ERROR:测试案列20，测试标题促销设置接口_goodsId为非6位数字,执行失败!实际结果{'code': 1007, 'msg': '商品编号格式不正确'}
2021-12-16 12:52:53,235-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:53,402-[test_business_goods_promote03.py - 60]-ERROR:测试案列21，测试标题促销设置接口_goodsId为非数字,执行失败!实际结果{'code': 1007, 'msg': '商品编号格式不正确'}
2021-12-16 12:52:53,402-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:53,570-[test_business_goods_promote03.py - 60]-ERROR:测试案列22，测试标题促销设置接口_goodsId为空,执行失败!实际结果{'code': 1004, 'msg': '商品编号不能为空'}
2021-12-16 12:52:53,570-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:53,749-[test_business_goods_promote03.py - 60]-ERROR:测试案列23，测试标题促销设置接口_goodsId不存在,执行失败!实际结果{'code': 1011, 'msg': '该商品不存在'}
2021-12-16 12:52:53,749-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:50,458-[test_business_goods_promote03.py - 60]-ERROR:测试案列2，测试标题促销设置接口_promoteStartTime为空,执行失败!实际结果{'code': 1002, 'msg': '促销开始时间不能为空'}
2021-12-16 12:53:50,458-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:50,616-[test_business_goods_promote03.py - 60]-ERROR:测试案列3，测试标题促销设置接口_promoteStartTime年月日不完整,执行失败!实际结果{'code': 1005, 'msg': '促销开始时间格式不正确'}
2021-12-16 12:53:50,617-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:50,788-[test_business_goods_promote03.py - 60]-ERROR:测试案列4，测试标题促销设置接口_promoteStartTime输入非数字,执行失败!实际结果{'code': 1005, 'msg': '促销开始时间格式不正确'}
2021-12-16 12:53:50,788-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:50,953-[test_business_goods_promote03.py - 60]-ERROR:测试案列5，测试标题促销设置接口_promoteStartTime月份超过12,执行失败!实际结果{'code': 1005, 'msg': '促销开始时间格式不正确'}
2021-12-16 12:53:50,953-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:51,125-[test_business_goods_promote03.py - 60]-ERROR:测试案列6，测试标题促销设置接口_promoteStartTime日期超过31,执行失败!实际结果{'code': 1005, 'msg': '促销开始时间格式不正确'}
2021-12-16 12:53:51,125-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:51,461-[test_business_goods_promote03.py - 60]-ERROR:测试案列10，测试标题促销设置接口_promoteStartTime小于当前时间,执行失败!实际结果{'code': 1008, 'msg': '促销开始时间必须大于当前时间'}
2021-12-16 12:53:51,462-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:51,674-[test_business_goods_promote03.py - 60]-ERROR:测试案列11，测试标题促销设置接口_promoteEndTime为空,执行失败!实际结果{'code': 1003, 'msg': '促销结束时间不能为空'}
2021-12-16 12:53:51,674-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:51,862-[test_business_goods_promote03.py - 60]-ERROR:测试案列12，测试标题促销设置接口_promoteEndTime年月日不完整,执行失败!实际结果{'code': 1006, 'msg': '促销结束时间格式不正确'}
2021-12-16 12:53:51,862-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:52,038-[test_business_goods_promote03.py - 60]-ERROR:测试案列13，测试标题促销设置接口_promoteEndTime输入非数字,执行失败!实际结果{'code': 1006, 'msg': '促销结束时间格式不正确'}
2021-12-16 12:53:52,038-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:52,216-[test_business_goods_promote03.py - 60]-ERROR:测试案列14，测试标题促销设置接口_promoteEndTime月份超过12,执行失败!实际结果{'code': 1006, 'msg': '促销结束时间格式不正确'}
2021-12-16 12:53:52,217-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:52,381-[test_business_goods_promote03.py - 60]-ERROR:测试案列15，测试标题促销设置接口_promoteEndTime日期超过31,执行失败!实际结果{'code': 1006, 'msg': '促销结束时间格式不正确'}
2021-12-16 12:53:52,381-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:52,650-[test_business_goods_promote03.py - 60]-ERROR:测试案列19，测试标题促销设置接口_promoteEndTime小于promoteStartTime,执行失败!实际结果{'code': 1009, 'msg': '促销结束时间必须大于等于促销开始时间'}
2021-12-16 12:53:52,650-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:52,850-[test_business_goods_promote03.py - 60]-ERROR:测试案列20，测试标题促销设置接口_goodsId为非6位数字,执行失败!实际结果{'code': 1007, 'msg': '商品编号格式不正确'}
2021-12-16 12:53:52,850-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:53,015-[test_business_goods_promote03.py - 60]-ERROR:测试案列21，测试标题促销设置接口_goodsId为非数字,执行失败!实际结果{'code': 1007, 'msg': '商品编号格式不正确'}
2021-12-16 12:53:53,015-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:53,209-[test_business_goods_promote03.py - 60]-ERROR:测试案列22，测试标题促销设置接口_goodsId为空,执行失败!实际结果{'code': 1004, 'msg': '商品编号不能为空'}
2021-12-16 12:53:53,209-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:53,389-[test_business_goods_promote03.py - 60]-ERROR:测试案列23，测试标题促销设置接口_goodsId不存在,执行失败!实际结果{'code': 1011, 'msg': '该商品不存在'}
2021-12-16 12:53:53,389-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 15:43:06,022-[test_business_goods_delete01.py - 44]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
2021-12-16 15:43:06,023-[test_business_goods_delete01.py - 45]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^              --

+ {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ++  ++++++++
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete01.py", line 41, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^              --

+ {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ++  ++++++++

2021-12-16 15:43:17,400-[test_business_goods_delete01.py - 44]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
2021-12-16 15:43:17,400-[test_business_goods_delete01.py - 45]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^              --

+ {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ++  ++++++++
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete01.py", line 41, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^              --

+ {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ++  ++++++++

2021-12-16 15:43:25,582-[test_business_goods_delete01.py - 44]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
2021-12-16 15:43:25,582-[test_business_goods_delete01.py - 45]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^              --

+ {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ++  ++++++++
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete01.py", line 41, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^              --

+ {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ++  ++++++++

2021-12-16 15:43:30,368-[test_business_goods_delete01.py - 49]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 16:05:35,140-[test_business_goods_delete02.py - 60]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 16:05:35,140-[test_business_goods_delete02.py - 61]-ERROR:1 != None
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 55, in testgoodsdelete
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != None
2021-12-16 16:06:04,000-[test_business_goods_delete02.py - 60]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 16:06:04,000-[test_business_goods_delete02.py - 61]-ERROR:1 != None
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 55, in testgoodsdelete
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != None
2021-12-16 16:06:05,814-[test_business_goods_delete02.py - 60]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 16:06:05,815-[test_business_goods_delete02.py - 61]-ERROR:1 != None
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 55, in testgoodsdelete
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != None
2021-12-16 16:06:18,002-[test_business_goods_delete02.py - 60]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 16:06:18,002-[test_business_goods_delete02.py - 61]-ERROR:1 != None
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 55, in testgoodsdelete
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != None
2021-12-16 16:06:29,757-[test_business_goods_delete02.py - 60]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 16:06:29,757-[test_business_goods_delete02.py - 61]-ERROR:1 != None
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 55, in testgoodsdelete
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != None
2021-12-16 16:21:57,311-[test_business_goods_delete02.py - 61]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 16:21:57,311-[test_business_goods_delete02.py - 62]-ERROR:0 != None
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 56, in testgoodsdelete
    self.assertEqual(0, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != None
2021-12-16 16:22:21,077-[test_business_goods_delete02.py - 61]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 16:22:21,077-[test_business_goods_delete02.py - 62]-ERROR:None != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 56, in testgoodsdelete
    self.assertEqual(count, 0)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: None != 0
2021-12-16 16:30:40,179-[test_business_goods_delete02.py - 66]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 16:48:14,245-[test_business_goods_delete02.py - 70]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 16:48:24,609-[test_business_goods_delete02.py - 70]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 16:48:34,629-[test_business_goods_delete02.py - 70]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 18:00:47,540-[test_business_goods_delete02.py - 65]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:00:47,541-[test_business_goods_delete02.py - 66]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 54, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:01:09,997-[test_business_goods_delete02.py - 64]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:01:09,997-[test_business_goods_delete02.py - 65]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 53, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:03:59,111-[test_business_goods_delete02.py - 64]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:03:59,111-[test_business_goods_delete02.py - 65]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 53, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:05:03,569-[test_business_goods_delete02.py - 67]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:05:03,569-[test_business_goods_delete02.py - 68]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 56, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:06:04,520-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:06:04,520-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:06:39,220-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:06:39,220-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:07:52,388-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:07:52,388-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:08:21,016-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:08:21,016-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:09:29,052-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:09:29,052-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:10:06,720-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:10:06,720-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:10:54,988-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:10:54,988-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:17:42,060-[test_business_goods_delete02.py - 126]-INFO:测试编号1,测试用例标题删除商品接口主流程,执行成功!
2021-12-16 18:18:58,244-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:18:58,245-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:19:45,768-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:19:45,769-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:19:58,765-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:19:58,765-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:20:57,703-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:20:57,703-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:21:00,516-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:21:00,516-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:22:19,144-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:22:19,144-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:22:37,612-[test_business_goods_delete02.py - 75]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:22:37,612-[test_business_goods_delete02.py - 76]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:24:44,003-[test_business_goods_delete02.py - 127]-INFO:测试编号1,测试用例标题删除商品接口主流程,执行成功!
2021-12-16 18:25:12,317-[test_business_goods_delete02.py - 127]-INFO:测试编号1,测试用例标题删除商品接口主流程,执行成功!
2021-12-16 18:25:52,106-[test_business_goods_delete02.py - 75]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:25:52,106-[test_business_goods_delete02.py - 76]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:31:35,081-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:31:35,081-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 62, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:31:50,879-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:31:50,879-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 62, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:32:27,660-[test_business_goods_delete02.py - 79]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 18:32:41,313-[test_business_goods_delete02.py - 79]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 18:45:09,242-[test_business_goods_delete02.py - 79]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 19:04:59,220-[test_business_goods_delete03.py - 82]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 19:05:12,771-[test_business_goods_delete03.py - 82]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 19:05:12,989-[test_business_goods_delete03.py - 77]-ERROR:测试案例2,测试标题商品未下架,执行失败!实际结果{'code': 1004, 'msg': '该商品不存在'}
2021-12-16 19:05:12,989-[test_business_goods_delete03.py - 78]-ERROR:{'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ^^  ----- ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          ^   ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete03.py", line 65, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ^^  ----- ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          ^   ^^

2021-12-16 19:05:13,160-[test_business_goods_delete03.py - 82]-ERROR:测试案例3,测试标题商品编号为空,执行成功
2021-12-16 19:05:13,321-[test_business_goods_delete03.py - 82]-ERROR:测试案例4,测试标题商品编号非6位数字,执行成功
2021-12-16 19:05:13,484-[test_business_goods_delete03.py - 82]-ERROR:测试案例5,测试标题商品编号非数字,执行成功
2021-12-16 19:05:13,711-[test_business_goods_delete03.py - 82]-ERROR:测试案例6,测试标题商品编号不存在,执行成功
2021-12-16 19:05:44,120-[test_business_goods_delete03.py - 82]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 19:05:44,296-[test_business_goods_delete03.py - 77]-ERROR:测试案例2,测试标题商品未下架,执行失败!实际结果{'code': 1004, 'msg': '该商品不存在'}
2021-12-16 19:05:44,296-[test_business_goods_delete03.py - 78]-ERROR:{'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ^^  ----- ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          ^   ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete03.py", line 65, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ^^  ----- ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          ^   ^^

2021-12-16 19:05:44,477-[test_business_goods_delete03.py - 82]-ERROR:测试案例3,测试标题商品编号为空,执行成功
2021-12-16 19:05:44,674-[test_business_goods_delete03.py - 82]-ERROR:测试案例4,测试标题商品编号非6位数字,执行成功
2021-12-16 19:05:44,853-[test_business_goods_delete03.py - 82]-ERROR:测试案例5,测试标题商品编号非数字,执行成功
2021-12-16 19:05:45,030-[test_business_goods_delete03.py - 82]-ERROR:测试案例6,测试标题商品编号不存在,执行成功
2021-12-16 19:06:02,286-[test_business_goods_delete03.py - 82]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 19:06:02,442-[test_business_goods_delete03.py - 77]-ERROR:测试案例2,测试标题商品未下架,执行失败!实际结果{'code': 1004, 'msg': '该商品不存在'}
2021-12-16 19:06:02,442-[test_business_goods_delete03.py - 78]-ERROR:{'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ^^  ----- ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          ^   ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete03.py", line 65, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ^^  ----- ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          ^   ^^

2021-12-16 19:06:02,600-[test_business_goods_delete03.py - 82]-ERROR:测试案例3,测试标题商品编号为空,执行成功
2021-12-16 19:06:02,804-[test_business_goods_delete03.py - 82]-ERROR:测试案例4,测试标题商品编号非6位数字,执行成功
2021-12-16 19:06:03,000-[test_business_goods_delete03.py - 82]-ERROR:测试案例5,测试标题商品编号非数字,执行成功
2021-12-16 19:06:03,162-[test_business_goods_delete03.py - 82]-ERROR:测试案例6,测试标题商品编号不存在,执行成功
2021-12-16 19:11:54,419-[test_business_goods_delete03.py - 82]-ERROR:测试案例1,测试标题商品删除主流程,执行成功
2021-12-16 19:11:54,581-[test_business_goods_delete03.py - 82]-ERROR:测试案例2,测试标题商品编号为空,执行成功
2021-12-16 19:11:54,743-[test_business_goods_delete03.py - 82]-ERROR:测试案例3,测试标题商品编号为正确有效编号带空格,执行成功
2021-12-16 19:11:54,902-[test_business_goods_delete03.py - 82]-ERROR:测试案例4,测试标题商品编号为0+正确有效编号,执行成功
2021-12-16 19:11:55,076-[test_business_goods_delete03.py - 82]-ERROR:测试案例5,测试标题商品编号为6位含汉字的编号,执行成功
2021-12-16 19:11:55,257-[test_business_goods_delete03.py - 77]-ERROR:测试案例6,测试标题商品未下架状态的商品编号,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 19:11:55,257-[test_business_goods_delete03.py - 78]-ERROR:{'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1000, 'msg': '商品删除成功'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          --  --------

+ {'code': 1000, 'msg': '商品删除成功'}
?             ^              ++
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete03.py", line 65, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1000, 'msg': '商品删除成功'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          --  --------

+ {'code': 1000, 'msg': '商品删除成功'}
?             ^              ++

2021-12-16 19:11:55,485-[test_business_goods_delete03.py - 82]-ERROR:测试案例7,测试标题商品编号为不存在的的场景,执行成功
2021-12-16 19:12:42,437-[test_business_goods_delete03.py - 82]-ERROR:测试案例1,测试标题商品删除主流程,执行成功
2021-12-16 19:12:42,603-[test_business_goods_delete03.py - 82]-ERROR:测试案例2,测试标题商品编号为空,执行成功
2021-12-16 19:12:42,762-[test_business_goods_delete03.py - 82]-ERROR:测试案例3,测试标题商品编号为正确有效编号带空格,执行成功
2021-12-16 19:12:42,919-[test_business_goods_delete03.py - 82]-ERROR:测试案例4,测试标题商品编号为0+正确有效编号,执行成功
2021-12-16 19:12:43,096-[test_business_goods_delete03.py - 82]-ERROR:测试案例5,测试标题商品编号为6位含汉字的编号,执行成功
2021-12-16 19:12:43,308-[test_business_goods_delete03.py - 77]-ERROR:测试案例6,测试标题商品未下架状态的商品编号,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 19:12:43,309-[test_business_goods_delete03.py - 78]-ERROR:{'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1000, 'msg': '商品删除成功'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          --  --------

+ {'code': 1000, 'msg': '商品删除成功'}
?             ^              ++
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete03.py", line 65, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1000, 'msg': '商品删除成功'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          --  --------

+ {'code': 1000, 'msg': '商品删除成功'}
?             ^              ++

2021-12-16 19:12:43,469-[test_business_goods_delete03.py - 82]-ERROR:测试案例7,测试标题商品编号为不存在的的场景,执行成功
2021-12-16 19:13:30,863-[test_business_goods_delete03.py - 82]-INFO:测试案例1,测试标题商品删除主流程,执行成功
2021-12-16 19:13:31,032-[test_business_goods_delete03.py - 82]-INFO:测试案例2,测试标题商品编号为空,执行成功
2021-12-16 19:13:31,236-[test_business_goods_delete03.py - 82]-INFO:测试案例3,测试标题商品编号为正确有效编号带空格,执行成功
2021-12-16 19:13:31,398-[test_business_goods_delete03.py - 82]-INFO:测试案例4,测试标题商品编号为0+正确有效编号,执行成功
2021-12-16 19:13:31,564-[test_business_goods_delete03.py - 82]-INFO:测试案例5,测试标题商品编号为6位含汉字的编号,执行成功
2021-12-16 19:13:31,746-[test_business_goods_delete03.py - 77]-ERROR:测试案例6,测试标题商品未下架状态的商品编号,执行失败!实际结果{'code': 1004, 'msg': '该商品不存在'}
2021-12-16 19:13:31,746-[test_business_goods_delete03.py - 78]-ERROR:{'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ^^  ----- ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          ^   ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete03.py", line 65, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ^^  ----- ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          ^   ^^

2021-12-16 19:13:31,929-[test_business_goods_delete03.py - 82]-INFO:测试案例7,测试标题商品编号为不存在的的场景,执行成功
2021-12-16 19:15:15,983-[test_business_goods_delete03.py - 82]-INFO:测试案例1,测试标题商品删除主流程,执行成功
2021-12-16 19:15:16,148-[test_business_goods_delete03.py - 82]-INFO:测试案例2,测试标题商品编号为空,执行成功
2021-12-16 19:15:16,332-[test_business_goods_delete03.py - 82]-INFO:测试案例3,测试标题商品编号为正确有效编号带空格,执行成功
2021-12-16 19:15:16,517-[test_business_goods_delete03.py - 82]-INFO:测试案例4,测试标题商品编号为0+正确有效编号,执行成功
2021-12-16 19:15:16,681-[test_business_goods_delete03.py - 82]-INFO:测试案例5,测试标题商品编号为6位含汉字的编号,执行成功
2021-12-16 19:15:16,854-[test_business_goods_delete03.py - 77]-ERROR:测试案例6,测试标题商品未下架状态的商品编号,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 19:15:16,854-[test_business_goods_delete03.py - 78]-ERROR:{'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1000, 'msg': '商品删除成功'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          --  --------

+ {'code': 1000, 'msg': '商品删除成功'}
?             ^              ++
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete03.py", line 65, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1000, 'msg': '商品删除成功'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          --  --------

+ {'code': 1000, 'msg': '商品删除成功'}
?             ^              ++

2021-12-16 19:15:17,020-[test_business_goods_delete03.py - 82]-INFO:测试案例7,测试标题商品编号为不存在的的场景,执行成功
2021-12-16 19:16:05,293-[test_business_goods_delete03.py - 82]-INFO:测试案例1,测试标题商品删除主流程,执行成功
2021-12-16 19:16:05,475-[test_business_goods_delete03.py - 82]-INFO:测试案例2,测试标题商品编号为空,执行成功
2021-12-16 19:16:05,634-[test_business_goods_delete03.py - 82]-INFO:测试案例3,测试标题商品编号为正确有效编号带空格,执行成功
2021-12-16 19:16:05,794-[test_business_goods_delete03.py - 82]-INFO:测试案例4,测试标题商品编号为0+正确有效编号,执行成功
2021-12-16 19:16:05,972-[test_business_goods_delete03.py - 82]-INFO:测试案例5,测试标题商品编号为6位含汉字的编号,执行成功
2021-12-16 19:16:06,133-[test_business_goods_delete03.py - 82]-INFO:测试案例6,测试标题商品未下架状态的商品编号,执行成功
2021-12-16 19:16:06,308-[test_business_goods_delete03.py - 82]-INFO:测试案例7,测试标题商品编号为不存在的的场景,执行成功
2021-12-16 19:17:27,671-[test_token_goodsinfo3.py - 91]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-16 19:17:27,826-[test_token_goodsinfo3.py - 91]-INFO:测试案例2,测试用例标题商品信息查询—token为空,执行成功
2021-12-16 19:17:27,996-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}]}
2021-12-16 19:17:27,996-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1068 chars]88}]}
Diff is 2267 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1068 chars]88}]}
Diff is 2267 characters long. Set self.maxDiff to None to see it.
2021-12-16 19:17:28,160-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}]}
2021-12-16 19:17:28,160-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1068 chars]88}]}
Diff is 2267 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1068 chars]88}]}
Diff is 2267 characters long. Set self.maxDiff to None to see it.
2021-12-16 19:17:28,376-[test_token_goodsinfo3.py - 91]-INFO:测试案例5,测试用例标题商品信息查询—（不带商品）销售状态为0,执行成功
2021-12-16 19:17:28,539-[test_token_goodsinfo3.py - 91]-INFO:测试案例6,测试用例标题商品信息查询—（不带商品）销售状态为1,执行成功
2021-12-16 19:17:28,697-[test_token_goodsinfo3.py - 91]-INFO:测试案例7,测试用例标题商品信息查询—（不带商品）促销状态为0,执行成功
2021-12-16 19:17:28,887-[test_token_goodsinfo3.py - 91]-INFO:测试案例8,测试用例标题商品信息查询—（不带商品）促销状态为1,执行成功
2021-12-16 19:17:29,053-[test_token_goodsinfo3.py - 85]-ERROR:测试案例9,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:17:29,053-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 62, in test_goods_info
    self.assertIn(case.expect, str(res))  # 判断响应体包含 查询成功
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:17:29,210-[test_token_goodsinfo3.py - 91]-INFO:测试案例10,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为1,执行成功
2021-12-16 19:17:29,396-[test_token_goodsinfo3.py - 91]-INFO:测试案例11,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为0,执行成功
2021-12-16 19:17:29,578-[test_token_goodsinfo3.py - 91]-INFO:测试案例12,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为1,执行成功
2021-12-16 19:17:29,759-[test_token_goodsinfo3.py - 91]-INFO:测试案例13,测试用例标题商品信息查询—（带商品）销售状态为0,执行成功
2021-12-16 19:17:29,915-[test_token_goodsinfo3.py - 85]-ERROR:测试案例14,测试用例标题商品信息查询—（带商品）销售状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:17:29,915-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:17:30,118-[test_token_goodsinfo3.py - 85]-ERROR:测试案例15,测试用例标题商品信息查询—（带商品）促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:17:30,118-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:17:30,281-[test_token_goodsinfo3.py - 85]-ERROR:测试案例16,测试用例标题商品信息查询—（带商品）促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:17:30,281-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:17:30,480-[test_token_goodsinfo3.py - 85]-ERROR:测试案例17,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:17:30,480-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:17:30,637-[test_token_goodsinfo3.py - 85]-ERROR:测试案例18,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:17:30,637-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:17:30,806-[test_token_goodsinfo3.py - 85]-ERROR:测试案例19,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:17:30,807-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:17:30,991-[test_token_goodsinfo3.py - 85]-ERROR:测试案例20,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:17:30,991-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:17:31,161-[test_token_goodsinfo3.py - 91]-INFO:测试案例21,测试用例标题商品信息查询—销售状态为非枚举,执行成功
2021-12-16 19:17:31,341-[test_token_goodsinfo3.py - 91]-INFO:测试案例22,测试用例标题商品信息查询—促销状态为非枚举,执行成功
2021-12-16 19:17:31,509-[test_token_goodsinfo3.py - 91]-INFO:测试案例23,测试用例标题商品信息查询—存在的商品编号（6位数字）,执行成功
2021-12-16 19:17:31,685-[test_token_goodsinfo3.py - 91]-INFO:测试案例24,测试用例标题商品信息查询—商品编号非6位数字,执行成功
2021-12-16 19:17:31,841-[test_token_goodsinfo3.py - 91]-INFO:测试案例25,测试用例标题商品信息查询—不存在的商品编号（6位数字）,执行成功
2021-12-16 19:17:32,016-[test_business_goods_delete03.py - 82]-INFO:测试案例1,测试标题商品删除主流程,执行成功
2021-12-16 19:17:32,174-[test_business_goods_delete03.py - 82]-INFO:测试案例2,测试标题商品编号为空,执行成功
2021-12-16 19:17:32,358-[test_business_goods_delete03.py - 82]-INFO:测试案例3,测试标题商品编号为正确有效编号带空格,执行成功
2021-12-16 19:17:32,538-[test_business_goods_delete03.py - 82]-INFO:测试案例4,测试标题商品编号为0+正确有效编号,执行成功
2021-12-16 19:17:32,720-[test_business_goods_delete03.py - 82]-INFO:测试案例5,测试标题商品编号为6位含汉字的编号,执行成功
2021-12-16 19:17:32,878-[test_business_goods_delete03.py - 82]-INFO:测试案例6,测试标题商品未下架状态的商品编号,执行成功
2021-12-16 19:17:33,035-[test_business_goods_delete03.py - 82]-INFO:测试案例7,测试标题商品编号为不存在的的场景,执行成功
2021-12-16 19:17:36,347-[test_login5.py - 72]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-16 19:17:36,536-[test_login5.py - 72]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-16 19:17:36,683-[test_login5.py - 72]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-16 19:17:36,874-[test_login5.py - 67]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzQ1Ni43MDk1ODg1Ojc4ZThjN2IwNTBkZjIyNjlmZTkxYjEwYTI4ODQzNDFhZDJjNTliNzk='}
2021-12-16 19:17:36,874-[test_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzQ1N[64 chars]zk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4MzQ1Ni43MDk1ODg1Ojc4ZThjN2IwNTBkZjIyNjlmZTkxYjEwYTI4ODQzNDFhZDJjNTliNzk='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\test_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzQ1N[64 chars]zk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4MzQ1Ni43MDk1ODg1Ojc4ZThjN2IwNTBkZjIyNjlmZTkxYjEwYTI4ODQzNDFhZDJjNTliNzk='}
2021-12-16 19:17:37,040-[test_login5.py - 72]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-16 19:17:37,208-[test_login5.py - 72]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-16 19:17:37,354-[test_login5.py - 72]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-16 19:17:37,539-[test_login5.py - 67]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzQ1Ny4zNjA3MzY6ZDdmMzBiMjNkMGU0NjFkM2ExYmQ4YThhN2Y4NmQ3Mjg4ZmYzMTk3OA=='}
2021-12-16 19:17:37,539-[test_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzQ1N[64 chars]A=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4MzQ1Ny4zNjA3MzY6ZDdmMzBiMjNkMGU0NjFkM2ExYmQ4YThhN2Y4NmQ3Mjg4ZmYzMTk3OA=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\test_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzQ1N[64 chars]A=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4MzQ1Ny4zNjA3MzY6ZDdmMzBiMjNkMGU0NjFkM2ExYmQ4YThhN2Y4NmQ3Mjg4ZmYzMTk3OA=='}
2021-12-16 19:17:37,697-[test_login5.py - 72]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-16 19:17:37,876-[test_login5.py - 72]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-16 19:17:38,027-[test_login5.py - 72]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-16 19:17:38,185-[test_register03.py - 73]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-16 19:17:38,330-[test_register03.py - 73]-INFO:测试编号2,测试用例注册接口用户名为空的场景,成功！
2021-12-16 19:17:38,523-[test_register03.py - 73]-INFO:测试编号3,测试用例注册接口用户名有限边界值的场景（6-8）,成功！
2021-12-16 19:17:38,683-[test_register03.py - 73]-INFO:测试编号4,测试用例注册接口用户名无效边界值9位的场景,成功！
2021-12-16 19:17:38,851-[test_register03.py - 73]-INFO:测试编号5,测试用例注册接口用户名非字母开头的场景,成功！
2021-12-16 19:17:38,999-[test_register03.py - 73]-INFO:测试编号6,测试用例注册接口用户名包含符号或者汉字的场景,成功！
2021-12-16 19:17:39,169-[test_register03.py - 73]-INFO:测试编号7,测试用例注册接口用户名已注册的场景,成功！
2021-12-16 19:17:39,314-[test_register03.py - 73]-INFO:测试编号8,测试用例注册接口密码为空的场景,成功！
2021-12-16 19:17:39,480-[test_register03.py - 73]-INFO:测试编号9,测试用例注册接口密码有限边界值的场景（7-11）,成功！
2021-12-16 19:17:39,627-[test_register03.py - 73]-INFO:测试编号10,测试用例注册接口密码无效边界值6位的场景,成功！
2021-12-16 19:17:39,773-[test_register03.py - 73]-INFO:测试编号11,测试用例注册接口密码无效边界值12位的场景,成功！
2021-12-16 19:17:39,940-[test_register03.py - 73]-INFO:测试编号12,测试用例注册接口密码包含符号或汉字的场景,成功！
2021-12-16 19:17:40,109-[test_register03.py - 73]-INFO:测试编号13,测试用例注册接口确认密码为空的场景,成功！
2021-12-16 19:17:40,255-[test_register03.py - 73]-INFO:测试编号14,测试用例注册接口确认密码和密码不一致的场景,成功！
2021-12-16 19:17:40,419-[test_register03.py - 73]-INFO:测试编号15,测试用例注册接口确认密码大小写区分的场景,成功！
2021-12-16 19:17:40,563-[test_register03.py - 73]-INFO:测试编号16,测试用例注册接口手机号为空的场景,成功！
2021-12-16 19:17:40,715-[test_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:17:40,716-[test_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:17:40,876-[test_register03.py - 73]-INFO:测试编号18,测试用例注册接口手机号为非11位数字的场景,成功！
2021-12-16 19:17:41,049-[test_register03.py - 73]-INFO:测试编号19,测试用例注册接口手机号为非数字的场景,成功！
2021-12-16 19:17:41,229-[test_register03.py - 73]-INFO:测试编号20,测试用例注册接口性别为非枚举的场景,成功！
2021-12-16 19:17:41,387-[test_register03.py - 73]-INFO:测试编号21,测试用例注册接口性别为男+女的场景,成功！
2021-12-16 19:17:41,539-[test_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:17:41,539-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:17:41,716-[test_register03.py - 73]-INFO:测试编号23,测试用例注册接口生日年月日不完整的场景,成功！
2021-12-16 19:17:41,865-[test_register03.py - 73]-INFO:测试编号24,测试用例注册接口生日输入非数字的场景,成功！
2021-12-16 19:17:42,016-[test_register03.py - 73]-INFO:测试编号25,测试用例注册接口生日月份超过12月的场景,成功！
2021-12-16 19:17:42,161-[test_register03.py - 73]-INFO:测试编号26,测试用例注册接口生日日期超过31的场景,成功！
2021-12-16 19:17:42,318-[test_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:17:42,319-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:17:42,495-[test_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:17:42,496-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:17:42,671-[test_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:17:42,671-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:17:42,831-[test_register03.py - 73]-INFO:测试编号30,测试用例注册接口QQ为非数字的场景,成功！
2021-12-16 19:17:42,993-[test_register03.py - 73]-INFO:测试编号31,测试用例注册接口QQ为无效边界的场景（3、21）,成功！
2021-12-16 19:17:43,148-[test_register03.py - 73]-INFO:测试编号32,测试用例注册接口邮箱已注册的场景,成功！
2021-12-16 19:17:43,306-[test_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-16 19:17:43,306-[test_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-16 19:17:43,472-[test_business_token_goods_input03.py - 59]-ERROR:测试案例1,测试标题商品信息录入主流程,执行失败!实际结果{'code': 9999, 'msg': '商品录入失败'}
2021-12-16 19:17:43,472-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 9999, 'msg': '商品录入失败'}
- {'code': 1000, 'msg': '商品录入成功'}
?          ^^^^              ^^

+ {'code': 9999, 'msg': '商品录入失败'}
?          ^^^^              ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 9999, 'msg': '商品录入失败'}
- {'code': 1000, 'msg': '商品录入成功'}
?          ^^^^              ^^

+ {'code': 9999, 'msg': '商品录入失败'}
?          ^^^^              ^^

2021-12-16 19:17:43,678-[test_business_token_goods_input03.py - 65]-INFO:测试案例2,测试标题商品录入接口主流程全入参的场景,执行成功!
2021-12-16 19:17:43,855-[test_business_token_goods_input03.py - 65]-INFO:测试案例3,测试标题商品录入接口商品名有效边界值3位的场景,执行成功!
2021-12-16 19:17:44,054-[test_business_token_goods_input03.py - 65]-INFO:测试案例4,测试标题商品录入接口商品名有效边界值15位的场景,执行成功!
2021-12-16 19:17:44,226-[test_business_token_goods_input03.py - 65]-INFO:测试案例5,测试标题商品录入接口商品名无效边界值2位的场景,执行成功!
2021-12-16 19:17:44,396-[test_business_token_goods_input03.py - 65]-INFO:测试案例6,测试标题商品录入接口商品名无效边界值16位的场景,执行成功!
2021-12-16 19:17:44,554-[test_business_token_goods_input03.py - 59]-ERROR:测试案例7,测试标题商品录入接口商品名重复的场景,执行失败!实际结果{'code': 1000, 'msg': '商品录入成功'}
2021-12-16 19:17:44,554-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1000, 'msg': '商品录入成功'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^

+ {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1000, 'msg': '商品录入成功'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^

+ {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

2021-12-16 19:17:44,725-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-16 19:17:44,725-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-16 19:17:44,919-[test_business_token_goods_input03.py - 65]-INFO:测试案例9,测试标题商品录入接口商品名为空的场景,执行成功!
2021-12-16 19:17:45,113-[test_business_token_goods_input03.py - 65]-INFO:测试案例10,测试标题商品录入接口商品名含空格的场景,执行成功!
2021-12-16 19:17:45,270-[test_business_token_goods_input03.py - 65]-INFO:测试案例11,测试标题商品录入接口商品名含特殊符号的场景,执行成功!
2021-12-16 19:17:45,428-[test_business_token_goods_input03.py - 65]-INFO:测试案例12,测试标题商品录入接口商品分类id为空的场景,执行成功!
2021-12-16 19:17:45,598-[test_business_token_goods_input03.py - 65]-INFO:测试案例13,测试标题商品录入接口商品分类id不存在的场景,执行成功!
2021-12-16 19:17:45,787-[test_business_token_goods_input03.py - 65]-INFO:测试案例14,测试标题商品录入接口无效边界值4位的场景,执行成功!
2021-12-16 19:17:45,956-[test_business_token_goods_input03.py - 65]-INFO:测试案例15,测试标题商品录入接口无效边界值6位的场景,执行成功!
2021-12-16 19:17:46,137-[test_business_token_goods_input03.py - 65]-INFO:测试案例16,测试标题商品录入接口商品描述有效边界值10位的场景,执行成功!
2021-12-16 19:17:46,311-[test_business_token_goods_input03.py - 65]-INFO:测试案例17,测试标题商品录入接口商品描述有效边界值155位的场景,执行成功!
2021-12-16 19:17:46,469-[test_business_token_goods_input03.py - 65]-INFO:测试案例18,测试标题商品录入接口商品描述无效边界值9位的场景,执行成功!
2021-12-16 19:17:46,621-[test_business_token_goods_input03.py - 65]-INFO:测试案例19,测试标题商品录入接口商品描述无效边界值156位的场景,执行成功!
2021-12-16 19:17:46,815-[test_business_token_goods_input03.py - 65]-INFO:测试案例20,测试标题商品录入接口商品描述有特殊符号的场景,执行成功!
2021-12-16 19:17:46,995-[test_business_token_goods_input03.py - 65]-INFO:测试案例21,测试标题商品录入接口商品库存有效边界值8位的场景,执行成功!
2021-12-16 19:17:47,162-[test_business_token_goods_input03.py - 65]-INFO:测试案例22,测试标题商品录入接口商品库存有效边界值1位的场景,执行成功!
2021-12-16 19:17:47,336-[test_business_token_goods_input03.py - 65]-INFO:测试案例23,测试标题商品录入接口商品库存为0的场景,执行成功!
2021-12-16 19:17:47,506-[test_business_token_goods_input03.py - 65]-INFO:测试案例24,测试标题商品录入接口商品库存为负数的场景,执行成功!
2021-12-16 19:17:47,659-[test_business_token_goods_input03.py - 65]-INFO:测试案例25,测试标题商品录入接口商品库存无效边界值9位的场景,执行成功!
2021-12-16 19:17:47,830-[test_business_token_goods_input03.py - 65]-INFO:测试案例26,测试标题商品录入接口商品库存为空的场景,执行成功!
2021-12-16 19:17:48,041-[test_business_token_goods_input03.py - 65]-INFO:测试案例27,测试标题商品录入接口商品价格为空的场景,执行成功!
2021-12-16 19:17:48,213-[test_business_token_goods_input03.py - 65]-INFO:测试案例28,测试标题商品录入接口商品价格为整数的有效边界值8位的场景,执行成功!
2021-12-16 19:17:48,388-[test_business_token_goods_input03.py - 65]-INFO:测试案例29,测试标题商品录入接口商品价格为整数的有效边界值1位的场景,执行成功!
2021-12-16 19:17:48,560-[test_business_token_goods_input03.py - 65]-INFO:测试案例30,测试标题商品录入接口商品价格为整数的无效边界值9位的场景,执行成功!
2021-12-16 19:17:48,739-[test_business_token_goods_input03.py - 65]-INFO:测试案例31,测试标题商品录入接口商品价格为两位小数的有效边界值8位的场景,执行成功!
2021-12-16 19:17:48,900-[test_business_token_goods_input03.py - 65]-INFO:测试案例32,测试标题商品录入接口商品价格为两位小数的有效边界值1位的场景,执行成功!
2021-12-16 19:17:49,058-[test_business_token_goods_input03.py - 65]-INFO:测试案例33,测试标题商品录入接口商品价格为两位小数的无效边界值9位的场景,执行成功!
2021-12-16 19:17:49,212-[test_business_token_goods_input03.py - 65]-INFO:测试案例34,测试标题商品录入接口商品价格为负数的场景,执行成功!
2021-12-16 19:17:49,368-[test_business_token_goods_input03.py - 65]-INFO:测试案例35,测试标题商品录入接口商品价格为两位小数的负数的场景,执行成功!
2021-12-16 19:17:49,537-[test_business_token_goods_input03.py - 65]-INFO:测试案例36,测试标题商品录入接口商品价格为三位小数的有效边界值8位的场景,执行成功!
2021-12-16 19:17:49,709-[test_business_token_goods_input03.py - 65]-INFO:测试案例37,测试标题商品录入接口商品价格为三位小数的有效边界值1位的场景,执行成功!
2021-12-16 19:17:49,909-[test_business_token_goods_input03.py - 65]-INFO:测试案例38,测试标题商品录入接口商品价格为三位小数的无效边界值9位的场景,执行成功!
2021-12-16 19:17:50,095-[test_business_token_goods_input03.py - 65]-INFO:测试案例39,测试标题商品录入接口商品价格为一位小数的有效边界值8位的场景,执行成功!
2021-12-16 19:17:50,251-[test_business_token_goods_input03.py - 65]-INFO:测试案例40,测试标题商品录入接口商品价格为一位小数的有效边界值1位的场景,执行成功!
2021-12-16 19:17:50,455-[test_business_token_goods_input03.py - 65]-INFO:测试案例41,测试标题商品录入接口商品价格为一位小数的无效边界值9位的场景,执行成功!
2021-12-16 19:17:50,630-[test_business_token_goods_input03.py - 65]-INFO:测试案例42,测试标题商品录入接口商品价格非数字的场景,执行成功!
2021-12-16 19:17:50,787-[test_business_token_goods_input03.py - 65]-INFO:测试案例43,测试标题商品录入接口商品价格为0的场景,执行成功!
2021-12-16 19:17:50,966-[test_business_token_goods_input03.py - 65]-INFO:测试案例44,测试标题商品录入接口商品价格为0.00的场景,执行成功!
2021-12-16 19:17:51,173-[test_business_items2.py - 72]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-16 19:17:51,328-[test_business_items2.py - 72]-INFO:测试案例2,测试用例标题订单编号为空的场景,执行成功!
2021-12-16 19:17:51,485-[test_business_items2.py - 72]-INFO:测试案例3,测试用例标题订单编号非5位数字字符场景,执行成功!
2021-12-16 19:17:51,642-[test_business_items2.py - 72]-INFO:测试案例4,测试用例标题订单编号不存在的场景,执行成功!
2021-12-16 19:17:51,798-[test_business_items2.py - 72]-INFO:测试案例5,测试用例标题订单编号非5位数字的场景,执行成功!
2021-12-16 19:19:33,081-[test_token_goodsinfo3.py - 91]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-16 19:19:33,234-[test_token_goodsinfo3.py - 91]-INFO:测试案例2,测试用例标题商品信息查询—token为空,执行成功
2021-12-16 19:19:33,417-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下第一辣条', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-16 19:19:33,418-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1258 chars]20}]}
Diff is 2615 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1258 chars]20}]}
Diff is 2615 characters long. Set self.maxDiff to None to see it.
2021-12-16 19:19:33,597-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下第一辣条', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-16 19:19:33,598-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1258 chars]20}]}
Diff is 2615 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1258 chars]20}]}
Diff is 2615 characters long. Set self.maxDiff to None to see it.
2021-12-16 19:19:33,821-[test_token_goodsinfo3.py - 91]-INFO:测试案例5,测试用例标题商品信息查询—（不带商品）销售状态为0,执行成功
2021-12-16 19:19:33,989-[test_token_goodsinfo3.py - 91]-INFO:测试案例6,测试用例标题商品信息查询—（不带商品）销售状态为1,执行成功
2021-12-16 19:19:34,155-[test_token_goodsinfo3.py - 91]-INFO:测试案例7,测试用例标题商品信息查询—（不带商品）促销状态为0,执行成功
2021-12-16 19:19:34,316-[test_token_goodsinfo3.py - 91]-INFO:测试案例8,测试用例标题商品信息查询—（不带商品）促销状态为1,执行成功
2021-12-16 19:19:34,481-[test_token_goodsinfo3.py - 85]-ERROR:测试案例9,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:34,482-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 62, in test_goods_info
    self.assertIn(case.expect, str(res))  # 判断响应体包含 查询成功
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:34,642-[test_token_goodsinfo3.py - 91]-INFO:测试案例10,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为1,执行成功
2021-12-16 19:19:34,818-[test_token_goodsinfo3.py - 91]-INFO:测试案例11,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为0,执行成功
2021-12-16 19:19:35,005-[test_token_goodsinfo3.py - 85]-ERROR:测试案例12,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:35,006-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 62, in test_goods_info
    self.assertIn(case.expect, str(res))  # 判断响应体包含 查询成功
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:35,183-[test_token_goodsinfo3.py - 91]-INFO:测试案例13,测试用例标题商品信息查询—（带商品）销售状态为0,执行成功
2021-12-16 19:19:35,344-[test_token_goodsinfo3.py - 85]-ERROR:测试案例14,测试用例标题商品信息查询—（带商品）销售状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:35,344-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:35,506-[test_token_goodsinfo3.py - 85]-ERROR:测试案例15,测试用例标题商品信息查询—（带商品）促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:35,507-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:35,669-[test_token_goodsinfo3.py - 85]-ERROR:测试案例16,测试用例标题商品信息查询—（带商品）促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:35,670-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:35,832-[test_token_goodsinfo3.py - 85]-ERROR:测试案例17,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:35,832-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:35,993-[test_token_goodsinfo3.py - 85]-ERROR:测试案例18,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:35,993-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:36,171-[test_token_goodsinfo3.py - 85]-ERROR:测试案例19,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:36,171-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:36,379-[test_token_goodsinfo3.py - 85]-ERROR:测试案例20,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:36,379-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:36,539-[test_token_goodsinfo3.py - 91]-INFO:测试案例21,测试用例标题商品信息查询—销售状态为非枚举,执行成功
2021-12-16 19:19:36,696-[test_token_goodsinfo3.py - 91]-INFO:测试案例22,测试用例标题商品信息查询—促销状态为非枚举,执行成功
2021-12-16 19:19:36,867-[test_token_goodsinfo3.py - 91]-INFO:测试案例23,测试用例标题商品信息查询—存在的商品编号（6位数字）,执行成功
2021-12-16 19:19:37,027-[test_token_goodsinfo3.py - 91]-INFO:测试案例24,测试用例标题商品信息查询—商品编号非6位数字,执行成功
2021-12-16 19:19:37,185-[test_token_goodsinfo3.py - 91]-INFO:测试案例25,测试用例标题商品信息查询—不存在的商品编号（6位数字）,执行成功
2021-12-16 19:19:37,368-[test_business_goods_delete03.py - 82]-INFO:测试案例1,测试标题商品删除主流程,执行成功
2021-12-16 19:19:37,569-[test_business_goods_delete03.py - 82]-INFO:测试案例2,测试标题商品编号为空,执行成功
2021-12-16 19:19:37,755-[test_business_goods_delete03.py - 82]-INFO:测试案例3,测试标题商品编号为正确有效编号带空格,执行成功
2021-12-16 19:19:37,917-[test_business_goods_delete03.py - 82]-INFO:测试案例4,测试标题商品编号为0+正确有效编号,执行成功
2021-12-16 19:19:38,084-[test_business_goods_delete03.py - 82]-INFO:测试案例5,测试标题商品编号为6位含汉字的编号,执行成功
2021-12-16 19:19:38,263-[test_business_goods_delete03.py - 82]-INFO:测试案例6,测试标题商品未下架状态的商品编号,执行成功
2021-12-16 19:19:38,424-[test_business_goods_delete03.py - 82]-INFO:测试案例7,测试标题商品编号为不存在的的场景,执行成功
2021-12-16 19:19:41,673-[test_login5.py - 72]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-16 19:19:41,840-[test_login5.py - 72]-INFO:测试编号2,测试用例标题登录用户名为空,执行成功!
2021-12-16 19:19:41,997-[test_login5.py - 72]-INFO:测试编号3,测试用例标题登录用户名错误,执行成功!
2021-12-16 19:19:42,163-[test_login5.py - 67]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzU4Mi4wMDM1OTM3OmRjOTlmYzEzM2UwOTEyN2FhY2RjZjAxN2ZmYTcyMmYzNjI2OGNlNjU='}
2021-12-16 19:19:42,164-[test_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzU4M[64 chars]jU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4MzU4Mi4wMDM1OTM3OmRjOTlmYzEzM2UwOTEyN2FhY2RjZjAxN2ZmYTcyMmYzNjI2OGNlNjU='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\test_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzU4M[64 chars]jU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4MzU4Mi4wMDM1OTM3OmRjOTlmYzEzM2UwOTEyN2FhY2RjZjAxN2ZmYTcyMmYzNjI2OGNlNjU='}
2021-12-16 19:19:42,376-[test_login5.py - 72]-INFO:测试编号5,测试用例标题用户名格式,执行成功!
2021-12-16 19:19:42,545-[test_login5.py - 72]-INFO:测试编号6,测试用例标题登录密码为空,执行成功!
2021-12-16 19:19:42,700-[test_login5.py - 72]-INFO:测试编号7,测试用例标题登录密码错误,执行成功!
2021-12-16 19:19:42,852-[test_login5.py - 67]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzU4Mi43MDYxNzM3OmFhYTJkMDY5OGVkZDRiYjk5MjE3NzZmY2Q1ZmY3M2UxMjY1ZDc1Njk='}
2021-12-16 19:19:42,853-[test_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzU4M[64 chars]jk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4MzU4Mi43MDYxNzM3OmFhYTJkMDY5OGVkZDRiYjk5MjE3NzZmY2Q1ZmY3M2UxMjY1ZDc1Njk='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\test_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzU4M[64 chars]jk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4MzU4Mi43MDYxNzM3OmFhYTJkMDY5OGVkZDRiYjk5MjE3NzZmY2Q1ZmY3M2UxMjY1ZDc1Njk='}
2021-12-16 19:19:43,023-[test_login5.py - 72]-INFO:测试编号9,测试用例标题用户类型不匹配,执行成功!
2021-12-16 19:19:43,187-[test_login5.py - 72]-INFO:测试编号10,测试用例标题用户类型错误,执行成功!
2021-12-16 19:19:43,336-[test_login5.py - 72]-INFO:测试编号11,测试用例标题用户类型为空,执行成功!
2021-12-16 19:19:43,540-[test_register03.py - 73]-INFO:测试编号1,测试用例测试主流程,成功！
2021-12-16 19:19:43,714-[test_register03.py - 73]-INFO:测试编号2,测试用例注册接口用户名为空的场景,成功！
2021-12-16 19:19:43,871-[test_register03.py - 73]-INFO:测试编号3,测试用例注册接口用户名有限边界值的场景（6-8）,成功！
2021-12-16 19:19:44,022-[test_register03.py - 73]-INFO:测试编号4,测试用例注册接口用户名无效边界值9位的场景,成功！
2021-12-16 19:19:44,177-[test_register03.py - 73]-INFO:测试编号5,测试用例注册接口用户名非字母开头的场景,成功！
2021-12-16 19:19:44,343-[test_register03.py - 73]-INFO:测试编号6,测试用例注册接口用户名包含符号或者汉字的场景,成功！
2021-12-16 19:19:44,511-[test_register03.py - 73]-INFO:测试编号7,测试用例注册接口用户名已注册的场景,成功！
2021-12-16 19:19:44,661-[test_register03.py - 73]-INFO:测试编号8,测试用例注册接口密码为空的场景,成功！
2021-12-16 19:19:44,849-[test_register03.py - 73]-INFO:测试编号9,测试用例注册接口密码有限边界值的场景（7-11）,成功！
2021-12-16 19:19:45,006-[test_register03.py - 73]-INFO:测试编号10,测试用例注册接口密码无效边界值6位的场景,成功！
2021-12-16 19:19:45,154-[test_register03.py - 73]-INFO:测试编号11,测试用例注册接口密码无效边界值12位的场景,成功！
2021-12-16 19:19:45,303-[test_register03.py - 73]-INFO:测试编号12,测试用例注册接口密码包含符号或汉字的场景,成功！
2021-12-16 19:19:45,455-[test_register03.py - 73]-INFO:测试编号13,测试用例注册接口确认密码为空的场景,成功！
2021-12-16 19:19:45,604-[test_register03.py - 73]-INFO:测试编号14,测试用例注册接口确认密码和密码不一致的场景,成功！
2021-12-16 19:19:45,768-[test_register03.py - 73]-INFO:测试编号15,测试用例注册接口确认密码大小写区分的场景,成功！
2021-12-16 19:19:45,915-[test_register03.py - 73]-INFO:测试编号16,测试用例注册接口手机号为空的场景,成功！
2021-12-16 19:19:46,092-[test_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:19:46,093-[test_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:19:46,255-[test_register03.py - 73]-INFO:测试编号18,测试用例注册接口手机号为非11位数字的场景,成功！
2021-12-16 19:19:46,407-[test_register03.py - 73]-INFO:测试编号19,测试用例注册接口手机号为非数字的场景,成功！
2021-12-16 19:19:46,556-[test_register03.py - 73]-INFO:测试编号20,测试用例注册接口性别为非枚举的场景,成功！
2021-12-16 19:19:46,702-[test_register03.py - 73]-INFO:测试编号21,测试用例注册接口性别为男+女的场景,成功！
2021-12-16 19:19:46,855-[test_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:19:46,855-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:19:47,021-[test_register03.py - 73]-INFO:测试编号23,测试用例注册接口生日年月日不完整的场景,成功！
2021-12-16 19:19:47,179-[test_register03.py - 73]-INFO:测试编号24,测试用例注册接口生日输入非数字的场景,成功！
2021-12-16 19:19:47,360-[test_register03.py - 73]-INFO:测试编号25,测试用例注册接口生日月份超过12月的场景,成功！
2021-12-16 19:19:47,520-[test_register03.py - 73]-INFO:测试编号26,测试用例注册接口生日日期超过31的场景,成功！
2021-12-16 19:19:47,677-[test_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:19:47,678-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:19:47,832-[test_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:19:47,833-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:19:48,000-[test_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:19:48,001-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:19:48,174-[test_register03.py - 73]-INFO:测试编号30,测试用例注册接口QQ为非数字的场景,成功！
2021-12-16 19:19:48,325-[test_register03.py - 73]-INFO:测试编号31,测试用例注册接口QQ为无效边界的场景（3、21）,成功！
2021-12-16 19:19:48,502-[test_register03.py - 73]-INFO:测试编号32,测试用例注册接口邮箱已注册的场景,成功！
2021-12-16 19:19:48,679-[test_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-16 19:19:48,680-[test_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-16 19:19:48,885-[test_business_token_goods_input03.py - 65]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-16 19:19:49,050-[test_business_token_goods_input03.py - 65]-INFO:测试案例2,测试标题商品录入接口主流程全入参的场景,执行成功!
2021-12-16 19:19:49,211-[test_business_token_goods_input03.py - 65]-INFO:测试案例3,测试标题商品录入接口商品名有效边界值3位的场景,执行成功!
2021-12-16 19:19:49,376-[test_business_token_goods_input03.py - 65]-INFO:测试案例4,测试标题商品录入接口商品名有效边界值15位的场景,执行成功!
2021-12-16 19:19:49,549-[test_business_token_goods_input03.py - 65]-INFO:测试案例5,测试标题商品录入接口商品名无效边界值2位的场景,执行成功!
2021-12-16 19:19:49,732-[test_business_token_goods_input03.py - 65]-INFO:测试案例6,测试标题商品录入接口商品名无效边界值16位的场景,执行成功!
2021-12-16 19:19:49,899-[test_business_token_goods_input03.py - 65]-INFO:测试案例7,测试标题商品录入接口商品名重复的场景,执行成功!
2021-12-16 19:19:50,062-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-16 19:19:50,062-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-16 19:19:50,223-[test_business_token_goods_input03.py - 65]-INFO:测试案例9,测试标题商品录入接口商品名为空的场景,执行成功!
2021-12-16 19:19:50,397-[test_business_token_goods_input03.py - 65]-INFO:测试案例10,测试标题商品录入接口商品名含空格的场景,执行成功!
2021-12-16 19:19:50,560-[test_business_token_goods_input03.py - 65]-INFO:测试案例11,测试标题商品录入接口商品名含特殊符号的场景,执行成功!
2021-12-16 19:19:50,731-[test_business_token_goods_input03.py - 65]-INFO:测试案例12,测试标题商品录入接口商品分类id为空的场景,执行成功!
2021-12-16 19:19:50,913-[test_business_token_goods_input03.py - 65]-INFO:测试案例13,测试标题商品录入接口商品分类id不存在的场景,执行成功!
2021-12-16 19:19:51,092-[test_business_token_goods_input03.py - 65]-INFO:测试案例14,测试标题商品录入接口无效边界值4位的场景,执行成功!
2021-12-16 19:19:51,261-[test_business_token_goods_input03.py - 65]-INFO:测试案例15,测试标题商品录入接口无效边界值6位的场景,执行成功!
2021-12-16 19:19:51,436-[test_business_token_goods_input03.py - 65]-INFO:测试案例16,测试标题商品录入接口商品描述有效边界值10位的场景,执行成功!
2021-12-16 19:19:51,599-[test_business_token_goods_input03.py - 65]-INFO:测试案例17,测试标题商品录入接口商品描述有效边界值155位的场景,执行成功!
2021-12-16 19:19:51,757-[test_business_token_goods_input03.py - 65]-INFO:测试案例18,测试标题商品录入接口商品描述无效边界值9位的场景,执行成功!
2021-12-16 19:19:51,917-[test_business_token_goods_input03.py - 65]-INFO:测试案例19,测试标题商品录入接口商品描述无效边界值156位的场景,执行成功!
2021-12-16 19:19:52,101-[test_business_token_goods_input03.py - 65]-INFO:测试案例20,测试标题商品录入接口商品描述有特殊符号的场景,执行成功!
2021-12-16 19:19:52,304-[test_business_token_goods_input03.py - 65]-INFO:测试案例21,测试标题商品录入接口商品库存有效边界值8位的场景,执行成功!
2021-12-16 19:19:52,469-[test_business_token_goods_input03.py - 65]-INFO:测试案例22,测试标题商品录入接口商品库存有效边界值1位的场景,执行成功!
2021-12-16 19:19:52,633-[test_business_token_goods_input03.py - 65]-INFO:测试案例23,测试标题商品录入接口商品库存为0的场景,执行成功!
2021-12-16 19:19:52,791-[test_business_token_goods_input03.py - 65]-INFO:测试案例24,测试标题商品录入接口商品库存为负数的场景,执行成功!
2021-12-16 19:19:52,971-[test_business_token_goods_input03.py - 65]-INFO:测试案例25,测试标题商品录入接口商品库存无效边界值9位的场景,执行成功!
2021-12-16 19:19:53,133-[test_business_token_goods_input03.py - 65]-INFO:测试案例26,测试标题商品录入接口商品库存为空的场景,执行成功!
2021-12-16 19:19:53,287-[test_business_token_goods_input03.py - 65]-INFO:测试案例27,测试标题商品录入接口商品价格为空的场景,执行成功!
2021-12-16 19:19:53,491-[test_business_token_goods_input03.py - 65]-INFO:测试案例28,测试标题商品录入接口商品价格为整数的有效边界值8位的场景,执行成功!
2021-12-16 19:19:53,681-[test_business_token_goods_input03.py - 65]-INFO:测试案例29,测试标题商品录入接口商品价格为整数的有效边界值1位的场景,执行成功!
2021-12-16 19:19:53,835-[test_business_token_goods_input03.py - 65]-INFO:测试案例30,测试标题商品录入接口商品价格为整数的无效边界值9位的场景,执行成功!
2021-12-16 19:19:54,012-[test_business_token_goods_input03.py - 65]-INFO:测试案例31,测试标题商品录入接口商品价格为两位小数的有效边界值8位的场景,执行成功!
2021-12-16 19:19:54,175-[test_business_token_goods_input03.py - 65]-INFO:测试案例32,测试标题商品录入接口商品价格为两位小数的有效边界值1位的场景,执行成功!
2021-12-16 19:19:54,339-[test_business_token_goods_input03.py - 65]-INFO:测试案例33,测试标题商品录入接口商品价格为两位小数的无效边界值9位的场景,执行成功!
2021-12-16 19:19:54,498-[test_business_token_goods_input03.py - 65]-INFO:测试案例34,测试标题商品录入接口商品价格为负数的场景,执行成功!
2021-12-16 19:19:54,682-[test_business_token_goods_input03.py - 65]-INFO:测试案例35,测试标题商品录入接口商品价格为两位小数的负数的场景,执行成功!
2021-12-16 19:19:54,853-[test_business_token_goods_input03.py - 65]-INFO:测试案例36,测试标题商品录入接口商品价格为三位小数的有效边界值8位的场景,执行成功!
2021-12-16 19:19:55,030-[test_business_token_goods_input03.py - 65]-INFO:测试案例37,测试标题商品录入接口商品价格为三位小数的有效边界值1位的场景,执行成功!
2021-12-16 19:19:55,189-[test_business_token_goods_input03.py - 65]-INFO:测试案例38,测试标题商品录入接口商品价格为三位小数的无效边界值9位的场景,执行成功!
2021-12-16 19:19:55,366-[test_business_token_goods_input03.py - 65]-INFO:测试案例39,测试标题商品录入接口商品价格为一位小数的有效边界值8位的场景,执行成功!
2021-12-16 19:19:55,521-[test_business_token_goods_input03.py - 65]-INFO:测试案例40,测试标题商品录入接口商品价格为一位小数的有效边界值1位的场景,执行成功!
2021-12-16 19:19:55,687-[test_business_token_goods_input03.py - 65]-INFO:测试案例41,测试标题商品录入接口商品价格为一位小数的无效边界值9位的场景,执行成功!
2021-12-16 19:19:55,854-[test_business_token_goods_input03.py - 65]-INFO:测试案例42,测试标题商品录入接口商品价格非数字的场景,执行成功!
2021-12-16 19:19:56,091-[test_business_token_goods_input03.py - 65]-INFO:测试案例43,测试标题商品录入接口商品价格为0的场景,执行成功!
2021-12-16 19:19:56,271-[test_business_token_goods_input03.py - 65]-INFO:测试案例44,测试标题商品录入接口商品价格为0.00的场景,执行成功!
2021-12-16 19:19:56,449-[test_business_items2.py - 72]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-16 19:19:56,628-[test_business_items2.py - 72]-INFO:测试案例2,测试用例标题订单编号为空的场景,执行成功!
2021-12-16 19:19:56,815-[test_business_items2.py - 72]-INFO:测试案例3,测试用例标题订单编号非5位数字字符场景,执行成功!
2021-12-16 19:19:56,985-[test_business_items2.py - 72]-INFO:测试案例4,测试用例标题订单编号不存在的场景,执行成功!
2021-12-16 19:19:57,173-[test_business_items2.py - 72]-INFO:测试案例5,测试用例标题订单编号非5位数字的场景,执行成功!
2021-12-16 19:51:50,766-[New_test_register04.py - 47]-ERROR:测试案例1,测试标题测试主流程,执行失败!实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:51:50,766-[New_test_register04.py - 48]-ERROR:{'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\New_test_register04.py", line 41, in testregister
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:52:12,897-[New_test_register04.py - 52]-INFO:测试案例1,测试标题测试主流程,执行成功!
2021-12-16 19:53:59,210-[New_test_register04.py - 52]-INFO:测试案例1,测试标题测试主流程,执行成功!
2021-12-16 19:54:48,407-[NEW_test_business_Login.py - 50]-INFO:测试用例1,测试标题登录主流程,执行成功
2021-12-16 19:54:48,609-[NEW_test_business_Login.py - 50]-INFO:测试用例2,测试标题登录用户名为空,执行成功
2021-12-16 19:54:48,813-[NEW_test_business_Login.py - 50]-INFO:测试用例3,测试标题登录用户名错误,执行成功
2021-12-16 19:54:49,092-[NEW_test_business_Login.py - 45]-ERROR:测试用例4,测试标题登录用户名大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTY4OC44MjM3MzQzOjhmNDJkZGNiZjMyNGQxNmU0MTcxNzQ5Nzc5MGNlOGRjNzM5MWRjY2M='}
2021-12-16 19:54:49,092-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTY4O[64 chars]2M='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTY4OC44MjM3MzQzOjhmNDJkZGNiZjMyNGQxNmU0MTcxNzQ5Nzc5MGNlOGRjNzM5MWRjY2M='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTY4O[64 chars]2M='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTY4OC44MjM3MzQzOjhmNDJkZGNiZjMyNGQxNmU0MTcxNzQ5Nzc5MGNlOGRjNzM5MWRjY2M='}
2021-12-16 19:54:49,369-[NEW_test_business_Login.py - 50]-INFO:测试用例5,测试标题用户名格式,执行成功
2021-12-16 19:54:49,599-[NEW_test_business_Login.py - 50]-INFO:测试用例6,测试标题登录密码为空,执行成功
2021-12-16 19:54:49,811-[NEW_test_business_Login.py - 50]-INFO:测试用例7,测试标题登录密码错误,执行成功
2021-12-16 19:54:50,039-[NEW_test_business_Login.py - 45]-ERROR:测试用例8,测试标题登录密码大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTY4OS44MjA1NTY0OjllYTA0NGE5NDQ5NTc5Y2Y5NzI4MjM5N2VhYzY5YmJiYTM1NTkxYjI='}
2021-12-16 19:54:50,040-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTY4O[64 chars]jI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTY4OS44MjA1NTY0OjllYTA0NGE5NDQ5NTc5Y2Y5NzI4MjM5N2VhYzY5YmJiYTM1NTkxYjI='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTY4O[64 chars]jI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTY4OS44MjA1NTY0OjllYTA0NGE5NDQ5NTc5Y2Y5NzI4MjM5N2VhYzY5YmJiYTM1NTkxYjI='}
2021-12-16 19:54:50,288-[NEW_test_business_Login.py - 50]-INFO:测试用例9,测试标题用户类型不匹配,执行成功
2021-12-16 19:54:50,577-[NEW_test_business_Login.py - 50]-INFO:测试用例10,测试标题用户类型错误,执行成功
2021-12-16 19:54:50,816-[NEW_test_business_Login.py - 50]-INFO:测试用例11,测试标题用户类型为空,执行成功
2021-12-16 19:55:53,735-[NEW_test_business_Login.py - 50]-INFO:测试用例1,测试标题登录主流程,执行成功
2021-12-16 19:55:53,913-[NEW_test_business_Login.py - 50]-INFO:测试用例2,测试标题登录用户名为空,执行成功
2021-12-16 19:55:54,091-[NEW_test_business_Login.py - 50]-INFO:测试用例3,测试标题登录用户名错误,执行成功
2021-12-16 19:55:54,276-[NEW_test_business_Login.py - 45]-ERROR:测试用例4,测试标题登录用户名大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc1NC4wOTc5ODA3Ojk1MTc0ZTQyNjFiNDIxMjRlYWVjNWMwNzZhZGQ4NDEwNGY2Njc0Yjg='}
2021-12-16 19:55:54,276-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc1N[64 chars]jg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTc1NC4wOTc5ODA3Ojk1MTc0ZTQyNjFiNDIxMjRlYWVjNWMwNzZhZGQ4NDEwNGY2Njc0Yjg='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc1N[64 chars]jg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTc1NC4wOTc5ODA3Ojk1MTc0ZTQyNjFiNDIxMjRlYWVjNWMwNzZhZGQ4NDEwNGY2Njc0Yjg='}
2021-12-16 19:55:54,496-[NEW_test_business_Login.py - 50]-INFO:测试用例5,测试标题用户名格式,执行成功
2021-12-16 19:55:54,693-[NEW_test_business_Login.py - 50]-INFO:测试用例6,测试标题登录密码为空,执行成功
2021-12-16 19:55:54,873-[NEW_test_business_Login.py - 50]-INFO:测试用例7,测试标题登录密码错误,执行成功
2021-12-16 19:55:55,108-[NEW_test_business_Login.py - 45]-ERROR:测试用例8,测试标题登录密码大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc1NC44ODA4ODg6OTczZTlkMTg1ZjlkMzkxYjgxZmRmYjEzMzZkZWFlMzU1M2RmODcyZQ=='}
2021-12-16 19:55:55,108-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc1N[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTc1NC44ODA4ODg6OTczZTlkMTg1ZjlkMzkxYjgxZmRmYjEzMzZkZWFlMzU1M2RmODcyZQ=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc1N[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTc1NC44ODA4ODg6OTczZTlkMTg1ZjlkMzkxYjgxZmRmYjEzMzZkZWFlMzU1M2RmODcyZQ=='}
2021-12-16 19:55:55,287-[NEW_test_business_Login.py - 50]-INFO:测试用例9,测试标题用户类型不匹配,执行成功
2021-12-16 19:55:55,470-[NEW_test_business_Login.py - 50]-INFO:测试用例10,测试标题用户类型错误,执行成功
2021-12-16 19:55:55,654-[NEW_test_business_Login.py - 50]-INFO:测试用例11,测试标题用户类型为空,执行成功
2021-12-16 19:56:10,615-[NEW_test_business_Login.py - 50]-INFO:测试用例1,测试标题登录主流程,执行成功
2021-12-16 19:56:10,798-[NEW_test_business_Login.py - 50]-INFO:测试用例2,测试标题登录用户名为空,执行成功
2021-12-16 19:56:11,051-[NEW_test_business_Login.py - 50]-INFO:测试用例3,测试标题登录用户名错误,执行成功
2021-12-16 19:56:11,238-[NEW_test_business_Login.py - 45]-ERROR:测试用例4,测试标题登录用户名大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc3MS4wNTY0NzY4OmIyMjA5YWU4ZTgyMmU2YzhiYjk1NDM5NTM4ZmE1NDhiNTVlZjk1ODc='}
2021-12-16 19:56:11,238-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc3M[64 chars]Dc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTc3MS4wNTY0NzY4OmIyMjA5YWU4ZTgyMmU2YzhiYjk1NDM5NTM4ZmE1NDhiNTVlZjk1ODc='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc3M[64 chars]Dc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTc3MS4wNTY0NzY4OmIyMjA5YWU4ZTgyMmU2YzhiYjk1NDM5NTM4ZmE1NDhiNTVlZjk1ODc='}
2021-12-16 19:56:11,427-[NEW_test_business_Login.py - 50]-INFO:测试用例5,测试标题用户名格式,执行成功
2021-12-16 19:56:11,632-[NEW_test_business_Login.py - 50]-INFO:测试用例6,测试标题登录密码为空,执行成功
2021-12-16 19:56:11,837-[NEW_test_business_Login.py - 50]-INFO:测试用例7,测试标题登录密码错误,执行成功
2021-12-16 19:56:12,034-[NEW_test_business_Login.py - 45]-ERROR:测试用例8,测试标题登录密码大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc3MS44NDQxNTk2Ojg2YjdkM2FlZjJkZWU0MTEyZThlNGY2ZmRiOGVhMTk1YWY2ZjY4Yjc='}
2021-12-16 19:56:12,035-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc3M[64 chars]jc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTc3MS44NDQxNTk2Ojg2YjdkM2FlZjJkZWU0MTEyZThlNGY2ZmRiOGVhMTk1YWY2ZjY4Yjc='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc3M[64 chars]jc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTc3MS44NDQxNTk2Ojg2YjdkM2FlZjJkZWU0MTEyZThlNGY2ZmRiOGVhMTk1YWY2ZjY4Yjc='}
2021-12-16 19:56:12,249-[NEW_test_business_Login.py - 50]-INFO:测试用例9,测试标题用户类型不匹配,执行成功
2021-12-16 19:56:12,464-[NEW_test_business_Login.py - 50]-INFO:测试用例10,测试标题用户类型错误,执行成功
2021-12-16 19:56:12,645-[NEW_test_business_Login.py - 50]-INFO:测试用例11,测试标题用户类型为空,执行成功
2021-12-17 09:02:39,354-[test_business_goods_delete03.py - 82]-INFO:测试案例1,测试标题商品删除主流程,执行成功
2021-12-17 09:02:39,780-[test_business_goods_delete03.py - 82]-INFO:测试案例2,测试标题商品编号为空,执行成功
2021-12-17 09:02:40,219-[test_business_goods_delete03.py - 82]-INFO:测试案例3,测试标题商品编号为正确有效编号带空格,执行成功
2021-12-17 09:02:40,583-[test_business_goods_delete03.py - 82]-INFO:测试案例4,测试标题商品编号为0+正确有效编号,执行成功
2021-12-17 09:02:40,983-[test_business_goods_delete03.py - 82]-INFO:测试案例5,测试标题商品编号为6位含汉字的编号,执行成功
2021-12-17 09:02:41,342-[test_business_goods_delete03.py - 82]-INFO:测试案例6,测试标题商品未下架状态的商品编号,执行成功
2021-12-17 09:02:41,684-[test_business_goods_delete03.py - 82]-INFO:测试案例7,测试标题商品编号为不存在的的场景,执行成功
2021-12-17 09:03:34,992-[test_business_goods_delete03.py - 82]-INFO:测试案例1,测试标题商品删除主流程,执行成功
2021-12-17 09:03:45,927-[test_business_goods_delete03.py - 82]-INFO:测试案例2,测试标题商品编号为空,执行成功
2021-12-17 09:03:49,294-[test_business_goods_delete03.py - 82]-INFO:测试案例3,测试标题商品编号为正确有效编号带空格,执行成功
2021-12-17 09:04:37,764-[test_business_goods_delete03.py - 82]-INFO:测试案例4,测试标题商品编号为0+正确有效编号,执行成功
2021-12-17 09:04:45,643-[test_business_goods_delete03.py - 82]-INFO:测试案例5,测试标题商品编号为6位含汉字的编号,执行成功
2021-12-17 09:04:50,644-[test_business_goods_delete03.py - 82]-INFO:测试案例6,测试标题商品未下架状态的商品编号,执行成功
2021-12-17 09:05:05,545-[test_business_goods_delete03.py - 82]-INFO:测试案例7,测试标题商品编号为不存在的的场景,执行成功
2021-12-17 09:05:41,356-[test_business_goods_delete03.py - 82]-INFO:测试案例1,测试标题商品删除主流程,执行成功
2021-12-17 09:05:41,545-[test_business_goods_delete03.py - 82]-INFO:测试案例2,测试标题商品编号为空,执行成功
2021-12-17 09:05:41,714-[test_business_goods_delete03.py - 82]-INFO:测试案例3,测试标题商品编号为正确有效编号带空格,执行成功
2021-12-17 09:05:41,879-[test_business_goods_delete03.py - 82]-INFO:测试案例4,测试标题商品编号为0+正确有效编号,执行成功
2021-12-17 09:05:42,040-[test_business_goods_delete03.py - 82]-INFO:测试案例5,测试标题商品编号为6位含汉字的编号,执行成功
2021-12-17 09:05:42,203-[test_business_goods_delete03.py - 82]-INFO:测试案例6,测试标题商品未下架状态的商品编号,执行成功
2021-12-17 09:05:42,366-[test_business_goods_delete03.py - 82]-INFO:测试案例7,测试标题商品编号为不存在的的场景,执行成功
2021-12-17 09:06:11,834-[test_business_goods_delete03.py - 82]-INFO:测试案例1,测试标题商品删除主流程,执行成功
2021-12-17 09:06:12,171-[test_business_goods_delete03.py - 82]-INFO:测试案例2,测试标题商品编号为空,执行成功
2021-12-17 09:06:12,513-[test_business_goods_delete03.py - 82]-INFO:测试案例3,测试标题商品编号为正确有效编号带空格,执行成功
2021-12-17 09:06:12,875-[test_business_goods_delete03.py - 82]-INFO:测试案例4,测试标题商品编号为0+正确有效编号,执行成功
2021-12-17 09:06:13,273-[test_business_goods_delete03.py - 82]-INFO:测试案例5,测试标题商品编号为6位含汉字的编号,执行成功
2021-12-17 09:06:13,633-[test_business_goods_delete03.py - 82]-INFO:测试案例6,测试标题商品未下架状态的商品编号,执行成功
2021-12-17 09:06:13,970-[test_business_goods_delete03.py - 82]-INFO:测试案例7,测试标题商品编号为不存在的的场景,执行成功
2021-12-17 09:06:22,458-[test_business_goods_delete03.py - 82]-INFO:测试案例1,测试标题商品删除主流程,执行成功
2021-12-17 09:06:22,810-[test_business_goods_delete03.py - 82]-INFO:测试案例2,测试标题商品编号为空,执行成功
2021-12-17 09:06:23,253-[test_business_goods_delete03.py - 82]-INFO:测试案例3,测试标题商品编号为正确有效编号带空格,执行成功
2021-12-17 09:06:23,601-[test_business_goods_delete03.py - 82]-INFO:测试案例4,测试标题商品编号为0+正确有效编号,执行成功
2021-12-17 09:06:23,958-[test_business_goods_delete03.py - 82]-INFO:测试案例5,测试标题商品编号为6位含汉字的编号,执行成功
2021-12-17 09:06:24,364-[test_business_goods_delete03.py - 82]-INFO:测试案例6,测试标题商品未下架状态的商品编号,执行成功
2021-12-17 09:06:24,705-[test_business_goods_delete03.py - 82]-INFO:测试案例7,测试标题商品编号为不存在的的场景,执行成功
2021-12-17 09:06:37,311-[test_business_goods_delete03.py - 82]-INFO:测试案例1,测试标题商品删除主流程,执行成功
2021-12-17 09:06:37,678-[test_business_goods_delete03.py - 82]-INFO:测试案例2,测试标题商品编号为空,执行成功
2021-12-17 09:06:38,075-[test_business_goods_delete03.py - 82]-INFO:测试案例3,测试标题商品编号为正确有效编号带空格,执行成功
2021-12-17 09:06:38,418-[test_business_goods_delete03.py - 82]-INFO:测试案例4,测试标题商品编号为0+正确有效编号,执行成功
2021-12-17 09:06:38,763-[test_business_goods_delete03.py - 82]-INFO:测试案例5,测试标题商品编号为6位含汉字的编号,执行成功
2021-12-17 09:06:39,152-[test_business_goods_delete03.py - 82]-INFO:测试案例6,测试标题商品未下架状态的商品编号,执行成功
2021-12-17 09:06:39,488-[test_business_goods_delete03.py - 82]-INFO:测试案例7,测试标题商品编号为不存在的的场景,执行成功
2021-12-17 09:06:59,348-[test_business_goods_delete03.py - 82]-INFO:测试案例1,测试标题商品删除主流程,执行成功
2021-12-17 09:06:59,715-[test_business_goods_delete03.py - 82]-INFO:测试案例2,测试标题商品编号为空,执行成功
2021-12-17 09:07:00,070-[test_business_goods_delete03.py - 82]-INFO:测试案例3,测试标题商品编号为正确有效编号带空格,执行成功
2021-12-17 09:07:00,420-[test_business_goods_delete03.py - 82]-INFO:测试案例4,测试标题商品编号为0+正确有效编号,执行成功
2021-12-17 09:07:00,758-[test_business_goods_delete03.py - 82]-INFO:测试案例5,测试标题商品编号为6位含汉字的编号,执行成功
2021-12-17 09:07:01,222-[test_business_goods_delete03.py - 82]-INFO:测试案例6,测试标题商品未下架状态的商品编号,执行成功
2021-12-17 09:07:01,580-[test_business_goods_delete03.py - 82]-INFO:测试案例7,测试标题商品编号为不存在的的场景,执行成功
2021-12-17 09:09:00,275-[Ftest_business_goods_delete02.py - 79]-ERROR:测试案例1,测试标题商品删除主流程,执行成功
2021-12-17 09:09:06,950-[Ftest_business_goods_delete02.py - 79]-ERROR:测试案例1,测试标题商品删除主流程,执行成功
2021-12-17 09:11:08,682-[Ftest_business_goods_delete02.py - 79]-ERROR:测试案例1,测试标题商品删除主流程,执行成功
2021-12-17 09:13:56,754-[test_business_goods_delete03.py - 82]-INFO:测试案例1,测试标题商品删除主流程,执行成功
2021-12-18 14:09:13,190-[Ftest_token_goodsinfo2.py - 61]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-18 14:19:00,905-[New_token_goodsinfo04.py - 38]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功!
2021-12-18 15:19:38,094-[New_token_goodsinfo04.py - 38]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功!
2021-12-20 14:44:26,178-[New_token_goodsinfo04.py - 39]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功!
2021-12-20 14:47:43,476-[Ftest_token_goodsinfo1.py - 36]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功!
2021-12-20 14:55:15,014-[Ftest_token_goodsinfo1.py - 36]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功!
2021-12-20 14:57:41,078-[Ftest_login1.py - 44]-INFO:测试编号1,测试用例标题登录主流程,执行成功!
2021-12-20 15:32:53,303-[Ftest_business_token_goods_input01.py - 33]-ERROR:测试案例1,测试标题商品信息录入主流程,执行失败!实际结果{'code': 1013, 'msg': '产品名称不能重复'}
2021-12-20 15:32:53,305-[Ftest_business_token_goods_input01.py - 34]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\Ftest_business_token_goods_input01.py", line 30, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^

2021-12-20 15:44:47,233-[Ftest_token_goodsinfo1.py - 36]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功!
2021-12-20 15:46:52,553-[Ftest_token_goodsinfo1.py - 36]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功!
2021-12-20 15:52:32,399-[Ftest_token_goodsinfo1.py - 36]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功!
2021-12-20 15:54:42,369-[Ftest_token_goodsinfo1.py - 36]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功!
2021-12-20 15:56:36,503-[Ftest_token_goodsinfo1.py - 36]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功!
2021-12-20 16:02:11,209-[Ftest_token_goodsinfo2.py - 102]-INFO:测试编号1,测试用例标题商品信息查询主流程,执行成功!
2021-12-20 16:02:11,714-[Ftest_token_goodsinfo2.py - 102]-INFO:测试编号2,测试用例标题商品信息查询—token为空,执行成功!
2021-12-20 16:02:12,094-[Ftest_token_goodsinfo2.py - 97]-ERROR:测试编号3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}]}
2021-12-20 16:02:12,095-[Ftest_token_goodsinfo2.py - 98]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\Ftest_token_goodsinfo2.py", line 94, in test_goods_info
    self.assertEqual(eval(case.expect), res)  # 响应体的商品条目和数据库的商品条目数做对比
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
2021-12-20 16:02:12,354-[Ftest_token_goodsinfo2.py - 97]-ERROR:测试编号4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}]}
2021-12-20 16:02:12,354-[Ftest_token_goodsinfo2.py - 98]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\Ftest_token_goodsinfo2.py", line 94, in test_goods_info
    self.assertEqual(eval(case.expect), res)  # 响应体的商品条目和数据库的商品条目数做对比
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
2021-12-20 16:02:13,113-[Ftest_token_goodsinfo2.py - 102]-INFO:测试编号21,测试用例标题商品信息查询—销售状态为非枚举,执行成功!
2021-12-20 16:02:13,418-[Ftest_token_goodsinfo2.py - 102]-INFO:测试编号22,测试用例标题商品信息查询—促销状态为非枚举,执行成功!
2021-12-20 16:02:13,694-[Ftest_token_goodsinfo2.py - 102]-INFO:测试编号24,测试用例标题商品信息查询—商品编号非6位数字,执行成功!
2021-12-20 16:02:13,960-[Ftest_token_goodsinfo2.py - 102]-INFO:测试编号25,测试用例标题商品信息查询—不存在的商品编号（6位数字）,执行成功!
2021-12-20 16:03:54,733-[test_token_goodsinfo3.py - 91]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-20 16:03:54,946-[test_token_goodsinfo3.py - 91]-INFO:测试案例2,测试用例标题商品信息查询—token为空,执行成功
2021-12-20 16:03:55,147-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}]}
2021-12-20 16:03:55,147-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
2021-12-20 16:03:55,353-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}]}
2021-12-20 16:03:55,353-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
2021-12-20 16:03:55,561-[test_token_goodsinfo3.py - 91]-INFO:测试案例5,测试用例标题商品信息查询—（不带商品）销售状态为0,执行成功
2021-12-20 16:03:55,746-[test_token_goodsinfo3.py - 91]-INFO:测试案例6,测试用例标题商品信息查询—（不带商品）销售状态为1,执行成功
2021-12-20 16:03:55,910-[test_token_goodsinfo3.py - 91]-INFO:测试案例7,测试用例标题商品信息查询—（不带商品）促销状态为0,执行成功
2021-12-20 16:03:56,109-[test_token_goodsinfo3.py - 91]-INFO:测试案例8,测试用例标题商品信息查询—（不带商品）促销状态为1,执行成功
2021-12-20 16:03:56,305-[test_token_goodsinfo3.py - 85]-ERROR:测试案例9,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:56,305-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 62, in test_goods_info
    self.assertIn(case.expect, str(res))  # 判断响应体包含 查询成功
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:03:56,468-[test_token_goodsinfo3.py - 91]-INFO:测试案例10,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为1,执行成功
2021-12-20 16:03:56,653-[test_token_goodsinfo3.py - 91]-INFO:测试案例11,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为0,执行成功
2021-12-20 16:03:56,847-[test_token_goodsinfo3.py - 85]-ERROR:测试案例12,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:56,847-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 62, in test_goods_info
    self.assertIn(case.expect, str(res))  # 判断响应体包含 查询成功
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:03:57,005-[test_token_goodsinfo3.py - 91]-INFO:测试案例13,测试用例标题商品信息查询—（带商品）销售状态为0,执行成功
2021-12-20 16:03:57,194-[test_token_goodsinfo3.py - 85]-ERROR:测试案例14,测试用例标题商品信息查询—（带商品）销售状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:57,194-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:03:57,371-[test_token_goodsinfo3.py - 85]-ERROR:测试案例15,测试用例标题商品信息查询—（带商品）促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:57,371-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:03:57,592-[test_token_goodsinfo3.py - 85]-ERROR:测试案例16,测试用例标题商品信息查询—（带商品）促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:57,592-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:03:57,780-[test_token_goodsinfo3.py - 85]-ERROR:测试案例17,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:57,780-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:03:57,938-[test_token_goodsinfo3.py - 85]-ERROR:测试案例18,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:57,938-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:03:58,148-[test_token_goodsinfo3.py - 85]-ERROR:测试案例19,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:58,148-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:03:58,306-[test_token_goodsinfo3.py - 85]-ERROR:测试案例20,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:58,306-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:03:58,471-[test_token_goodsinfo3.py - 91]-INFO:测试案例21,测试用例标题商品信息查询—销售状态为非枚举,执行成功
2021-12-20 16:03:58,644-[test_token_goodsinfo3.py - 91]-INFO:测试案例22,测试用例标题商品信息查询—促销状态为非枚举,执行成功
2021-12-20 16:03:58,803-[test_token_goodsinfo3.py - 91]-INFO:测试案例23,测试用例标题商品信息查询—存在的商品编号（6位数字）,执行成功
2021-12-20 16:03:58,972-[test_token_goodsinfo3.py - 91]-INFO:测试案例24,测试用例标题商品信息查询—商品编号非6位数字,执行成功
2021-12-20 16:03:59,128-[test_token_goodsinfo3.py - 91]-INFO:测试案例25,测试用例标题商品信息查询—不存在的商品编号（6位数字）,执行成功
2021-12-20 16:04:46,480-[test_token_goodsinfo3.py - 91]-INFO:测试案例1,测试用例标题商品信息查询主流程,执行成功
2021-12-20 16:04:46,690-[test_token_goodsinfo3.py - 91]-INFO:测试案例2,测试用例标题商品信息查询—token为空,执行成功
2021-12-20 16:04:46,911-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}]}
2021-12-20 16:04:46,911-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
2021-12-20 16:04:47,091-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}]}
2021-12-20 16:04:47,091-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
2021-12-20 16:04:47,251-[test_token_goodsinfo3.py - 91]-INFO:测试案例5,测试用例标题商品信息查询—（不带商品）销售状态为0,执行成功
2021-12-20 16:04:47,422-[test_token_goodsinfo3.py - 91]-INFO:测试案例6,测试用例标题商品信息查询—（不带商品）销售状态为1,执行成功
2021-12-20 16:04:47,590-[test_token_goodsinfo3.py - 91]-INFO:测试案例7,测试用例标题商品信息查询—（不带商品）促销状态为0,执行成功
2021-12-20 16:04:47,757-[test_token_goodsinfo3.py - 91]-INFO:测试案例8,测试用例标题商品信息查询—（不带商品）促销状态为1,执行成功
2021-12-20 16:04:47,957-[test_token_goodsinfo3.py - 85]-ERROR:测试案例9,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:47,957-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 62, in test_goods_info
    self.assertIn(case.expect, str(res))  # 判断响应体包含 查询成功
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:48,153-[test_token_goodsinfo3.py - 91]-INFO:测试案例10,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为1,执行成功
2021-12-20 16:04:48,329-[test_token_goodsinfo3.py - 91]-INFO:测试案例11,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为0,执行成功
2021-12-20 16:04:48,498-[test_token_goodsinfo3.py - 85]-ERROR:测试案例12,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:48,498-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 62, in test_goods_info
    self.assertIn(case.expect, str(res))  # 判断响应体包含 查询成功
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:48,676-[test_token_goodsinfo3.py - 91]-INFO:测试案例13,测试用例标题商品信息查询—（带商品）销售状态为0,执行成功
2021-12-20 16:04:48,834-[test_token_goodsinfo3.py - 85]-ERROR:测试案例14,测试用例标题商品信息查询—（带商品）销售状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:48,834-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:48,990-[test_token_goodsinfo3.py - 85]-ERROR:测试案例15,测试用例标题商品信息查询—（带商品）促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:48,990-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:49,187-[test_token_goodsinfo3.py - 85]-ERROR:测试案例16,测试用例标题商品信息查询—（带商品）促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:49,187-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:49,362-[test_token_goodsinfo3.py - 85]-ERROR:测试案例17,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:49,362-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:49,517-[test_token_goodsinfo3.py - 85]-ERROR:测试案例18,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:49,517-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:49,733-[test_token_goodsinfo3.py - 85]-ERROR:测试案例19,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:49,733-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:49,914-[test_token_goodsinfo3.py - 85]-ERROR:测试案例20,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:49,914-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:50,147-[test_token_goodsinfo3.py - 91]-INFO:测试案例21,测试用例标题商品信息查询—销售状态为非枚举,执行成功
2021-12-20 16:04:50,343-[test_token_goodsinfo3.py - 91]-INFO:测试案例22,测试用例标题商品信息查询—促销状态为非枚举,执行成功
2021-12-20 16:04:50,525-[test_token_goodsinfo3.py - 91]-INFO:测试案例23,测试用例标题商品信息查询—存在的商品编号（6位数字）,执行成功
2021-12-20 16:04:50,698-[test_token_goodsinfo3.py - 91]-INFO:测试案例24,测试用例标题商品信息查询—商品编号非6位数字,执行成功
2021-12-20 16:04:50,855-[test_token_goodsinfo3.py - 91]-INFO:测试案例25,测试用例标题商品信息查询—不存在的商品编号（6位数字）,执行成功
2021-12-20 19:05:48,122-[Ftest_business_items1.py - 65]-INFO:测试案例1,测试用例标题订单信息查询接口,执行成功!
2021-12-21 20:12:06,811-[NEW_input.py - 28]-ERROR:测试案例1,测试标题商品信息录入主流程,执行失败!实际结果{'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2021-12-21 20:12:06,812-[NEW_input.py - 29]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
- {'code': 1000, 'msg': '商品录入成功'}
+ {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\NEW_input.py", line 25, in testgoodsinfo
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
- {'code': 1000, 'msg': '商品录入成功'}
+ {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2021-12-21 20:29:17,162-[test_business_token_goods_input03.py - 65]-INFO:测试案例2,测试标题商品录入接口主流程全入参的场景,执行成功!
2021-12-21 20:29:17,319-[test_business_token_goods_input03.py - 65]-INFO:测试案例3,测试标题商品录入接口商品名有效边界值3位的场景,执行成功!
2021-12-21 20:29:17,483-[test_business_token_goods_input03.py - 65]-INFO:测试案例4,测试标题商品录入接口商品名有效边界值15位的场景,执行成功!
2021-12-21 20:29:17,662-[test_business_token_goods_input03.py - 65]-INFO:测试案例5,测试标题商品录入接口商品名无效边界值2位的场景,执行成功!
2021-12-21 20:29:17,862-[test_business_token_goods_input03.py - 65]-INFO:测试案例6,测试标题商品录入接口商品名无效边界值16位的场景,执行成功!
2021-12-21 20:29:18,082-[test_business_token_goods_input03.py - 65]-INFO:测试案例7,测试标题商品录入接口商品名重复的场景,执行成功!
2021-12-21 20:29:18,260-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-21 20:29:18,260-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-21 20:29:18,432-[test_business_token_goods_input03.py - 65]-INFO:测试案例9,测试标题商品录入接口商品名为空的场景,执行成功!
2021-12-21 20:29:18,613-[test_business_token_goods_input03.py - 65]-INFO:测试案例10,测试标题商品录入接口商品名含空格的场景,执行成功!
2021-12-21 20:29:18,795-[test_business_token_goods_input03.py - 65]-INFO:测试案例11,测试标题商品录入接口商品名含特殊符号的场景,执行成功!
2021-12-21 20:29:18,980-[test_business_token_goods_input03.py - 65]-INFO:测试案例12,测试标题商品录入接口商品分类id为空的场景,执行成功!
2021-12-21 20:29:19,205-[test_business_token_goods_input03.py - 65]-INFO:测试案例13,测试标题商品录入接口商品分类id不存在的场景,执行成功!
2021-12-21 20:29:19,392-[test_business_token_goods_input03.py - 65]-INFO:测试案例14,测试标题商品录入接口无效边界值4位的场景,执行成功!
2021-12-21 20:29:19,578-[test_business_token_goods_input03.py - 65]-INFO:测试案例15,测试标题商品录入接口无效边界值6位的场景,执行成功!
2021-12-21 20:29:19,802-[test_business_token_goods_input03.py - 65]-INFO:测试案例16,测试标题商品录入接口商品描述有效边界值10位的场景,执行成功!
2021-12-21 20:29:19,975-[test_business_token_goods_input03.py - 65]-INFO:测试案例17,测试标题商品录入接口商品描述有效边界值155位的场景,执行成功!
2021-12-21 20:29:20,133-[test_business_token_goods_input03.py - 65]-INFO:测试案例18,测试标题商品录入接口商品描述无效边界值9位的场景,执行成功!
2021-12-21 20:29:20,281-[test_business_token_goods_input03.py - 65]-INFO:测试案例19,测试标题商品录入接口商品描述无效边界值156位的场景,执行成功!
2021-12-21 20:29:20,478-[test_business_token_goods_input03.py - 65]-INFO:测试案例20,测试标题商品录入接口商品描述有特殊符号的场景,执行成功!
2021-12-21 20:29:20,661-[test_business_token_goods_input03.py - 65]-INFO:测试案例21,测试标题商品录入接口商品库存有效边界值8位的场景,执行成功!
2021-12-21 20:29:20,818-[test_business_token_goods_input03.py - 65]-INFO:测试案例22,测试标题商品录入接口商品库存有效边界值1位的场景,执行成功!
2021-12-21 20:29:20,978-[test_business_token_goods_input03.py - 65]-INFO:测试案例23,测试标题商品录入接口商品库存为0的场景,执行成功!
2021-12-21 20:29:21,143-[test_business_token_goods_input03.py - 65]-INFO:测试案例24,测试标题商品录入接口商品库存为负数的场景,执行成功!
2021-12-21 20:29:21,312-[test_business_token_goods_input03.py - 65]-INFO:测试案例25,测试标题商品录入接口商品库存无效边界值9位的场景,执行成功!
2021-12-21 20:29:21,461-[test_business_token_goods_input03.py - 65]-INFO:测试案例26,测试标题商品录入接口商品库存为空的场景,执行成功!
2021-12-21 20:29:21,640-[test_business_token_goods_input03.py - 65]-INFO:测试案例27,测试标题商品录入接口商品价格为空的场景,执行成功!
2021-12-21 20:29:21,825-[test_business_token_goods_input03.py - 65]-INFO:测试案例28,测试标题商品录入接口商品价格为整数的有效边界值8位的场景,执行成功!
2021-12-21 20:29:22,003-[test_business_token_goods_input03.py - 65]-INFO:测试案例29,测试标题商品录入接口商品价格为整数的有效边界值1位的场景,执行成功!
2021-12-21 20:29:22,181-[test_business_token_goods_input03.py - 65]-INFO:测试案例30,测试标题商品录入接口商品价格为整数的无效边界值9位的场景,执行成功!
2021-12-21 20:29:22,358-[test_business_token_goods_input03.py - 65]-INFO:测试案例31,测试标题商品录入接口商品价格为两位小数的有效边界值8位的场景,执行成功!
2021-12-21 20:29:22,525-[test_business_token_goods_input03.py - 65]-INFO:测试案例32,测试标题商品录入接口商品价格为两位小数的有效边界值1位的场景,执行成功!
2021-12-21 20:29:22,685-[test_business_token_goods_input03.py - 65]-INFO:测试案例33,测试标题商品录入接口商品价格为两位小数的无效边界值9位的场景,执行成功!
2021-12-21 20:29:22,853-[test_business_token_goods_input03.py - 65]-INFO:测试案例34,测试标题商品录入接口商品价格为负数的场景,执行成功!
2021-12-21 20:29:23,042-[test_business_token_goods_input03.py - 65]-INFO:测试案例35,测试标题商品录入接口商品价格为两位小数的负数的场景,执行成功!
2021-12-21 20:29:23,198-[test_business_token_goods_input03.py - 65]-INFO:测试案例36,测试标题商品录入接口商品价格为三位小数的有效边界值8位的场景,执行成功!
2021-12-21 20:29:23,349-[test_business_token_goods_input03.py - 65]-INFO:测试案例37,测试标题商品录入接口商品价格为三位小数的有效边界值1位的场景,执行成功!
2021-12-21 20:29:23,499-[test_business_token_goods_input03.py - 65]-INFO:测试案例38,测试标题商品录入接口商品价格为三位小数的无效边界值9位的场景,执行成功!
2021-12-21 20:29:23,717-[test_business_token_goods_input03.py - 65]-INFO:测试案例39,测试标题商品录入接口商品价格为一位小数的有效边界值8位的场景,执行成功!
2021-12-21 20:29:23,927-[test_business_token_goods_input03.py - 65]-INFO:测试案例40,测试标题商品录入接口商品价格为一位小数的有效边界值1位的场景,执行成功!
2021-12-21 20:29:24,114-[test_business_token_goods_input03.py - 65]-INFO:测试案例41,测试标题商品录入接口商品价格为一位小数的无效边界值9位的场景,执行成功!
2021-12-21 20:29:24,304-[test_business_token_goods_input03.py - 65]-INFO:测试案例42,测试标题商品录入接口商品价格非数字的场景,执行成功!
2021-12-21 20:29:24,490-[test_business_token_goods_input03.py - 65]-INFO:测试案例43,测试标题商品录入接口商品价格为0的场景,执行成功!
2021-12-21 20:29:24,697-[test_business_token_goods_input03.py - 65]-INFO:测试案例44,测试标题商品录入接口商品价格为0.00的场景,执行成功!
2021-12-21 20:30:17,277-[test_business_token_goods_input03.py - 65]-INFO:测试案例1,测试标题商品信息录入主流程,执行成功!
2021-12-21 20:30:17,434-[test_business_token_goods_input03.py - 65]-INFO:测试案例2,测试标题商品录入接口主流程全入参的场景,执行成功!
2021-12-21 20:30:17,595-[test_business_token_goods_input03.py - 65]-INFO:测试案例3,测试标题商品录入接口商品名有效边界值3位的场景,执行成功!
2021-12-21 20:30:17,751-[test_business_token_goods_input03.py - 65]-INFO:测试案例4,测试标题商品录入接口商品名有效边界值15位的场景,执行成功!
2021-12-21 20:30:17,902-[test_business_token_goods_input03.py - 65]-INFO:测试案例5,测试标题商品录入接口商品名无效边界值2位的场景,执行成功!
2021-12-21 20:30:18,078-[test_business_token_goods_input03.py - 65]-INFO:测试案例6,测试标题商品录入接口商品名无效边界值16位的场景,执行成功!
2021-12-21 20:30:18,250-[test_business_token_goods_input03.py - 65]-INFO:测试案例7,测试标题商品录入接口商品名重复的场景,执行成功!
2021-12-21 20:30:18,406-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-21 20:30:18,406-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-21 20:30:18,556-[test_business_token_goods_input03.py - 65]-INFO:测试案例9,测试标题商品录入接口商品名为空的场景,执行成功!
2021-12-21 20:30:18,733-[test_business_token_goods_input03.py - 65]-INFO:测试案例10,测试标题商品录入接口商品名含空格的场景,执行成功!
2021-12-21 20:30:18,895-[test_business_token_goods_input03.py - 65]-INFO:测试案例11,测试标题商品录入接口商品名含特殊符号的场景,执行成功!
2021-12-21 20:30:19,052-[test_business_token_goods_input03.py - 65]-INFO:测试案例12,测试标题商品录入接口商品分类id为空的场景,执行成功!
2021-12-21 20:30:19,209-[test_business_token_goods_input03.py - 65]-INFO:测试案例13,测试标题商品录入接口商品分类id不存在的场景,执行成功!
2021-12-21 20:30:19,392-[test_business_token_goods_input03.py - 65]-INFO:测试案例14,测试标题商品录入接口无效边界值4位的场景,执行成功!
2021-12-21 20:30:19,573-[test_business_token_goods_input03.py - 65]-INFO:测试案例15,测试标题商品录入接口无效边界值6位的场景,执行成功!
2021-12-21 20:30:19,755-[test_business_token_goods_input03.py - 65]-INFO:测试案例16,测试标题商品录入接口商品描述有效边界值10位的场景,执行成功!
2021-12-21 20:30:19,915-[test_business_token_goods_input03.py - 65]-INFO:测试案例17,测试标题商品录入接口商品描述有效边界值155位的场景,执行成功!
2021-12-21 20:30:20,082-[test_business_token_goods_input03.py - 65]-INFO:测试案例18,测试标题商品录入接口商品描述无效边界值9位的场景,执行成功!
2021-12-21 20:30:20,246-[test_business_token_goods_input03.py - 65]-INFO:测试案例19,测试标题商品录入接口商品描述无效边界值156位的场景,执行成功!
2021-12-21 20:30:20,455-[test_business_token_goods_input03.py - 65]-INFO:测试案例20,测试标题商品录入接口商品描述有特殊符号的场景,执行成功!
2021-12-21 20:30:20,646-[test_business_token_goods_input03.py - 65]-INFO:测试案例21,测试标题商品录入接口商品库存有效边界值8位的场景,执行成功!
2021-12-21 20:30:20,820-[test_business_token_goods_input03.py - 65]-INFO:测试案例22,测试标题商品录入接口商品库存有效边界值1位的场景,执行成功!
2021-12-21 20:30:20,979-[test_business_token_goods_input03.py - 65]-INFO:测试案例23,测试标题商品录入接口商品库存为0的场景,执行成功!
2021-12-21 20:30:21,137-[test_business_token_goods_input03.py - 65]-INFO:测试案例24,测试标题商品录入接口商品库存为负数的场景,执行成功!
2021-12-21 20:30:21,285-[test_business_token_goods_input03.py - 65]-INFO:测试案例25,测试标题商品录入接口商品库存无效边界值9位的场景,执行成功!
2021-12-21 20:30:21,449-[test_business_token_goods_input03.py - 65]-INFO:测试案例26,测试标题商品录入接口商品库存为空的场景,执行成功!
2021-12-21 20:30:21,599-[test_business_token_goods_input03.py - 65]-INFO:测试案例27,测试标题商品录入接口商品价格为空的场景,执行成功!
2021-12-21 20:30:21,746-[test_business_token_goods_input03.py - 65]-INFO:测试案例28,测试标题商品录入接口商品价格为整数的有效边界值8位的场景,执行成功!
2021-12-21 20:30:21,931-[test_business_token_goods_input03.py - 65]-INFO:测试案例29,测试标题商品录入接口商品价格为整数的有效边界值1位的场景,执行成功!
2021-12-21 20:30:22,136-[test_business_token_goods_input03.py - 65]-INFO:测试案例30,测试标题商品录入接口商品价格为整数的无效边界值9位的场景,执行成功!
2021-12-21 20:30:22,294-[test_business_token_goods_input03.py - 65]-INFO:测试案例31,测试标题商品录入接口商品价格为两位小数的有效边界值8位的场景,执行成功!
2021-12-21 20:30:22,462-[test_business_token_goods_input03.py - 65]-INFO:测试案例32,测试标题商品录入接口商品价格为两位小数的有效边界值1位的场景,执行成功!
2021-12-21 20:30:22,612-[test_business_token_goods_input03.py - 65]-INFO:测试案例33,测试标题商品录入接口商品价格为两位小数的无效边界值9位的场景,执行成功!
2021-12-21 20:30:22,762-[test_business_token_goods_input03.py - 65]-INFO:测试案例34,测试标题商品录入接口商品价格为负数的场景,执行成功!
2021-12-21 20:30:22,911-[test_business_token_goods_input03.py - 65]-INFO:测试案例35,测试标题商品录入接口商品价格为两位小数的负数的场景,执行成功!
2021-12-21 20:30:23,072-[test_business_token_goods_input03.py - 65]-INFO:测试案例36,测试标题商品录入接口商品价格为三位小数的有效边界值8位的场景,执行成功!
2021-12-21 20:30:23,255-[test_business_token_goods_input03.py - 65]-INFO:测试案例37,测试标题商品录入接口商品价格为三位小数的有效边界值1位的场景,执行成功!
2021-12-21 20:30:23,428-[test_business_token_goods_input03.py - 65]-INFO:测试案例38,测试标题商品录入接口商品价格为三位小数的无效边界值9位的场景,执行成功!
2021-12-21 20:30:23,611-[test_business_token_goods_input03.py - 65]-INFO:测试案例39,测试标题商品录入接口商品价格为一位小数的有效边界值8位的场景,执行成功!
2021-12-21 20:30:23,796-[test_business_token_goods_input03.py - 65]-INFO:测试案例40,测试标题商品录入接口商品价格为一位小数的有效边界值1位的场景,执行成功!
2021-12-21 20:30:24,000-[test_business_token_goods_input03.py - 65]-INFO:测试案例41,测试标题商品录入接口商品价格为一位小数的无效边界值9位的场景,执行成功!
2021-12-21 20:30:24,208-[test_business_token_goods_input03.py - 65]-INFO:测试案例42,测试标题商品录入接口商品价格非数字的场景,执行成功!
2021-12-21 20:30:24,388-[test_business_token_goods_input03.py - 65]-INFO:测试案例43,测试标题商品录入接口商品价格为0的场景,执行成功!
2021-12-21 20:30:24,583-[test_business_token_goods_input03.py - 65]-INFO:测试案例44,测试标题商品录入接口商品价格为0.00的场景,执行成功!
2022-01-15 10:58:12,700-[log_utils.py - 46]-WARNING:waring级别以上的日志信息
2022-01-15 10:58:12,700-[log_utils.py - 47]-ERROR:error级别以上的日志信息
2022-01-15 10:59:37,724-[log_utils.py - 46]-WARNING:waring级别以上的日志信息
2022-01-15 10:59:37,724-[log_utils.py - 47]-ERROR:error级别以上的日志信息
