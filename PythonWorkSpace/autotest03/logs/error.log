2021-12-10 13:53:29,632-[test_login2.py - 59]-ERROR:测试编号1,测试用例标题登陆主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 13:53:29,632-[test_login2.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 13:55:12,316-[test_login2.py - 59]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 13:55:12,316-[test_login2.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 13:58:39,253-[test_login2.py - 59]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 13:58:39,253-[test_login2.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 14:00:08,970-[test_login2.py - 59]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 14:00:08,970-[test_login2.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 14:10:31,024-[Ftest_login3.py - 59]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 14:10:31,024-[Ftest_login3.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 14:10:36,038-[Ftest_login1.py - 39]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 14:10:36,038-[Ftest_login1.py - 40]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login1.py", line 34, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 14:11:28,044-[Ftest_login1.py - 39]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 14:11:28,044-[Ftest_login1.py - 40]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login1.py", line 34, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 14:13:01,924-[test_login2.py - 59]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 14:13:01,924-[test_login2.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 14:13:53,324-[test_login2.py - 59]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 14:13:53,324-[test_login2.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 15:24:43,483-[test_register01.py - 28]-ERROR:测试编号1,测试用例测试主流程,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 15:24:43,484-[test_register01.py - 29]-ERROR:{'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register01.py", line 25, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 15:59:31,283-[test_register02.py - 47]-ERROR:测试编号1,测试用例测试主流程,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 15:59:31,283-[test_register02.py - 48]-ERROR:{'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register02.py", line 44, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 15:59:55,243-[test_register02.py - 47]-ERROR:测试编号1,测试用例测试主流程,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 15:59:55,243-[test_register02.py - 48]-ERROR:{'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register02.py", line 44, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 16:00:56,899-[test_login2.py - 59]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:00:56,899-[test_login2.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:01:26,518-[test_register02.py - 47]-ERROR:测试编号1,测试用例测试主流程,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 16:01:26,518-[test_register02.py - 48]-ERROR:{'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register02.py", line 44, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 16:01:51,317-[test_register02.py - 47]-ERROR:测试编号1,测试用例测试主流程,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 16:01:51,318-[test_register02.py - 48]-ERROR:{'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register02.py", line 44, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 16:02:45,303-[Ftest_register01.py - 28]-ERROR:测试编号1,测试用例测试主流程,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 16:02:45,303-[Ftest_register01.py - 29]-ERROR:{'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register01.py", line 25, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-10 16:14:38,939-[test_login2.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:14:38,940-[test_login2.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:15:59,253-[test_login2.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:15:59,253-[test_login2.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:17:58,144-[test_login2.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:17:58,144-[test_login2.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:19:16,448-[test_login2.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:19:16,448-[test_login2.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login2.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:20:01,263-[Ftest_login3.py - 59]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:20:01,264-[Ftest_login3.py - 60]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 54, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:23:25,232-[test_login3.py - 109]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NDYwNS4xNTI0OTIzOjhkNjhiMzkyNjVmMWE2MDEzYTBmN2I0OTgxODgwZWNiOWJiNDEzN2Q='}
2021-12-10 16:23:25,232-[test_login3.py - 110]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NDYwN[64 chars]2Q='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NDYwNS4xNTI0OTIzOjhkNjhiMzkyNjVmMWE2MDEzYTBmN2I0OTgxODgwZWNiOWJiNDEzN2Q='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 106, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NDYwN[64 chars]2Q='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NDYwNS4xNTI0OTIzOjhkNjhiMzkyNjVmMWE2MDEzYTBmN2I0OTgxODgwZWNiOWJiNDEzN2Q='}
2021-12-10 16:23:25,541-[test_login3.py - 109]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NDYwNS40NzQ5OTA2OmRjMzRiOTc5OWM5MzUyODZlMGI2YmQ1N2I5MWRiYTY5MGI2MTk1M2Q='}
2021-12-10 16:23:25,541-[test_login3.py - 110]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NDYwN[64 chars]2Q='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NDYwNS40NzQ5OTA2OmRjMzRiOTc5OWM5MzUyODZlMGI2YmQ1N2I5MWRiYTY5MGI2MTk1M2Q='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 106, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NDYwN[64 chars]2Q='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NDYwNS40NzQ5OTA2OmRjMzRiOTc5OWM5MzUyODZlMGI2YmQ1N2I5MWRiYTY5MGI2MTk1M2Q='}
2021-12-10 16:27:20,472-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:27:20,472-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:31:09,066-[test_login3.py - 107]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTA2OC45OTIwNzg6NDBkZjVkMjdhNjg5MjI4NDRmOWIxMjZkY2I1MzVkMWE2NjNjN2I1NQ=='}
2021-12-10 16:31:09,066-[test_login3.py - 108]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTA2O[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTA2OC45OTIwNzg6NDBkZjVkMjdhNjg5MjI4NDRmOWIxMjZkY2I1MzVkMWE2NjNjN2I1NQ=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 104, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTA2O[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTA2OC45OTIwNzg6NDBkZjVkMjdhNjg5MjI4NDRmOWIxMjZkY2I1MzVkMWE2NjNjN2I1NQ=='}
2021-12-10 16:31:09,356-[test_login3.py - 107]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTA2OS4yOTA0OTMyOjdiMWU2NzQ3NTQxMzNiNjc5OTlkZTVmOWQ0ZGVjNTdmNjgxOGQ5ZjE='}
2021-12-10 16:31:09,357-[test_login3.py - 108]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTA2O[64 chars]jE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTA2OS4yOTA0OTMyOjdiMWU2NzQ3NTQxMzNiNjc5OTlkZTVmOWQ0ZGVjNTdmNjgxOGQ5ZjE='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 104, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTA2O[64 chars]jE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTA2OS4yOTA0OTMyOjdiMWU2NzQ3NTQxMzNiNjc5OTlkZTVmOWQ0ZGVjNTdmNjgxOGQ5ZjE='}
2021-12-10 16:31:43,686-[test_login3.py - 107]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTEwMy42MjA1ODA3OjY3YWU1OTgyZjExNmMzZTFlMGIyYzJjNzBmY2M1NzY0NzIzODllMjM='}
2021-12-10 16:31:43,686-[test_login3.py - 108]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTEwM[64 chars]jM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTEwMy42MjA1ODA3OjY3YWU1OTgyZjExNmMzZTFlMGIyYzJjNzBmY2M1NzY0NzIzODllMjM='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 104, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTEwM[64 chars]jM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTEwMy42MjA1ODA3OjY3YWU1OTgyZjExNmMzZTFlMGIyYzJjNzBmY2M1NzY0NzIzODllMjM='}
2021-12-10 16:31:44,005-[test_login3.py - 107]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTEwMy45MjU1ODU1OmYyNGU5YjkwNjcyMDExYmNhNGE5NWFiMzI2Mzc3MWIwZDczY2Y2OWQ='}
2021-12-10 16:31:44,005-[test_login3.py - 108]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTEwM[64 chars]WQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTEwMy45MjU1ODU1OmYyNGU5YjkwNjcyMDExYmNhNGE5NWFiMzI2Mzc3MWIwZDczY2Y2OWQ='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 104, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTEwM[64 chars]WQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTEwMy45MjU1ODU1OmYyNGU5YjkwNjcyMDExYmNhNGE5NWFiMzI2Mzc3MWIwZDczY2Y2OWQ='}
2021-12-10 16:32:10,274-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:32:10,274-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:33:50,972-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:33:50,973-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:34:19,435-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:34:19,435-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:34:31,549-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:34:31,549-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:44:00,136-[test_login3.py - 63]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg0MC4wNjkwNTk6MjNkY2VlZWY4OGJhY2JhN2RmNmIzMzFhMzk3NWM4NTQ1ZTJhNjhiZQ=='}
2021-12-10 16:44:00,136-[test_login3.py - 64]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg0M[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTg0MC4wNjkwNTk6MjNkY2VlZWY4OGJhY2JhN2RmNmIzMzFhMzk3NWM4NTQ1ZTJhNjhiZQ=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg0M[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTg0MC4wNjkwNTk6MjNkY2VlZWY4OGJhY2JhN2RmNmIzMzFhMzk3NWM4NTQ1ZTJhNjhiZQ=='}
2021-12-10 16:44:00,428-[test_login3.py - 63]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg0MC4zNjAwNTg4OjczMzg5NjAyNDY4MDc0OWRhZWVkZGE2ZmNhNjBlODg2ZGJmZmI5M2Y='}
2021-12-10 16:44:00,428-[test_login3.py - 64]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg0M[64 chars]2Y='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTg0MC4zNjAwNTg4OjczMzg5NjAyNDY4MDc0OWRhZWVkZGE2ZmNhNjBlODg2ZGJmZmI5M2Y='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg0M[64 chars]2Y='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTg0MC4zNjAwNTg4OjczMzg5NjAyNDY4MDc0OWRhZWVkZGE2ZmNhNjBlODg2ZGJmZmI5M2Y='}
2021-12-10 16:44:21,079-[test_login3.py - 63]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg2MS4wMTM2MTE2OmVjMTZmMzdlNjkwNmJjM2QxMzZhYzJkOTc2NjU4Y2M2YTg5OTRlZmY='}
2021-12-10 16:44:21,079-[test_login3.py - 64]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg2M[64 chars]mY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTg2MS4wMTM2MTE2OmVjMTZmMzdlNjkwNmJjM2QxMzZhYzJkOTc2NjU4Y2M2YTg5OTRlZmY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg2M[64 chars]mY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTg2MS4wMTM2MTE2OmVjMTZmMzdlNjkwNmJjM2QxMzZhYzJkOTc2NjU4Y2M2YTg5OTRlZmY='}
2021-12-10 16:44:21,394-[test_login3.py - 63]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg2MS4zMjU1MDY6YmQxY2I0Mzg5YmMzYzMyMWQ5N2FhMzNmNzI3ZWI3OTZjZTcxMDVkMw=='}
2021-12-10 16:44:21,394-[test_login3.py - 64]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg2M[64 chars]w=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTg2MS4zMjU1MDY6YmQxY2I0Mzg5YmMzYzMyMWQ5N2FhMzNmNzI3ZWI3OTZjZTcxMDVkMw=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NTg2M[64 chars]w=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NTg2MS4zMjU1MDY6YmQxY2I0Mzg5YmMzYzMyMWQ5N2FhMzNmNzI3ZWI3OTZjZTcxMDVkMw=='}
2021-12-10 16:44:33,955-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:44:33,955-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:45:11,655-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:45:11,655-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:45:30,333-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:45:30,333-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:45:41,029-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:45:41,030-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:46:24,595-[test_login3.py - 63]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:46:24,595-[test_login3.py - 64]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 58, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:47:15,799-[test_login3.py - 67]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjAzNS43MzIyNzIxOjM3MmFhYzNlNWEwNTBjOGM5NDk2MGRkYTkwZjZiNWRmY2E5NTk2MTE='}
2021-12-10 16:47:15,800-[test_login3.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjAzN[64 chars]TE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjAzNS43MzIyNzIxOjM3MmFhYzNlNWEwNTBjOGM5NDk2MGRkYTkwZjZiNWRmY2E5NTk2MTE='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjAzN[64 chars]TE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjAzNS43MzIyNzIxOjM3MmFhYzNlNWEwNTBjOGM5NDk2MGRkYTkwZjZiNWRmY2E5NTk2MTE='}
2021-12-10 16:47:16,132-[test_login3.py - 67]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjAzNi4wNTc1ODkzOjRlMGQyMTMxOWZhZGRmMzUzYzk3YzNiZDUwMGJkNmU0YTc0NWI1NWM='}
2021-12-10 16:47:16,132-[test_login3.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjAzN[64 chars]WM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjAzNi4wNTc1ODkzOjRlMGQyMTMxOWZhZGRmMzUzYzk3YzNiZDUwMGJkNmU0YTc0NWI1NWM='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjAzN[64 chars]WM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjAzNi4wNTc1ODkzOjRlMGQyMTMxOWZhZGRmMzUzYzk3YzNiZDUwMGJkNmU0YTc0NWI1NWM='}
2021-12-10 16:47:31,887-[test_login3.py - 67]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:47:31,887-[test_login3.py - 68]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 62, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:47:35,027-[test_login3.py - 67]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:47:35,028-[test_login3.py - 68]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 62, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:47:50,032-[test_login3.py - 67]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:47:50,033-[test_login3.py - 68]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 62, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:48:31,675-[test_login3.py - 67]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjExMS42MDQwMzE4OjJjZTFmMDgyNmM3ZWJmMmY0NGY3YzNlODExYmQyYjQ3N2VkN2M1MTk='}
2021-12-10 16:48:31,676-[test_login3.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjExM[64 chars]Tk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjExMS42MDQwMzE4OjJjZTFmMDgyNmM3ZWJmMmY0NGY3YzNlODExYmQyYjQ3N2VkN2M1MTk='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjExM[64 chars]Tk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjExMS42MDQwMzE4OjJjZTFmMDgyNmM3ZWJmMmY0NGY3YzNlODExYmQyYjQ3N2VkN2M1MTk='}
2021-12-10 16:48:31,974-[test_login3.py - 67]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjExMS45MDY0MzM4OjEzMzdkMzkyMjQzYjllOWZjN2FmNWRlY2JiZDg2MWRmMjNmOTU0ZTY='}
2021-12-10 16:48:31,974-[test_login3.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjExM[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjExMS45MDY0MzM4OjEzMzdkMzkyMjQzYjllOWZjN2FmNWRlY2JiZDg2MWRmMjNmOTU0ZTY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjExM[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjExMS45MDY0MzM4OjEzMzdkMzkyMjQzYjllOWZjN2FmNWRlY2JiZDg2MWRmMjNmOTU0ZTY='}
2021-12-10 16:50:11,106-[test_login3.py - 67]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:50:11,107-[test_login3.py - 68]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 62, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:51:17,957-[test_login3.py - 67]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjI3Ny44ODU2NTI4OmU3ZWE5ZmZjNDU4MDgzZTE1YjllZmYwNGM5YmNjMzMyZDZjZTY3MTU='}
2021-12-10 16:51:17,957-[test_login3.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjI3N[64 chars]TU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjI3Ny44ODU2NTI4OmU3ZWE5ZmZjNDU4MDgzZTE1YjllZmYwNGM5YmNjMzMyZDZjZTY3MTU='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjI3N[64 chars]TU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjI3Ny44ODU2NTI4OmU3ZWE5ZmZjNDU4MDgzZTE1YjllZmYwNGM5YmNjMzMyZDZjZTY3MTU='}
2021-12-10 16:51:18,315-[test_login3.py - 67]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjI3OC4yMzEzMDQyOmVhZmE3N2QzYTZhZmNlYTY3OTY1NjZiNWFiMDFjZmY1MWNhMGE2Zjg='}
2021-12-10 16:51:18,316-[test_login3.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjI3O[64 chars]jg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjI3OC4yMzEzMDQyOmVhZmE3N2QzYTZhZmNlYTY3OTY1NjZiNWFiMDFjZmY1MWNhMGE2Zjg='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjI3O[64 chars]jg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjI3OC4yMzEzMDQyOmVhZmE3N2QzYTZhZmNlYTY3OTY1NjZiNWFiMDFjZmY1MWNhMGE2Zjg='}
2021-12-10 16:51:30,964-[test_login3.py - 67]-ERROR:测试编号1,测试用例标题登录主流程,执行失败！实际结果{'code': 1007, 'msg': '用户名或者密码错误'}
2021-12-10 16:51:30,964-[test_login3.py - 68]-ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 62, in test_login
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-12-10 16:55:19,813-[test_login3.py - 68]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjUxOS43NDYzNTY6ZjAwNmNkNTA2MTBjZDFhZTk4ZTAzNzQ5NjMyNjkzNTFjNjY3MWQ1Yw=='}
2021-12-10 16:55:19,813-[test_login3.py - 69]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjUxO[64 chars]w=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjUxOS43NDYzNTY6ZjAwNmNkNTA2MTBjZDFhZTk4ZTAzNzQ5NjMyNjkzNTFjNjY3MWQ1Yw=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 65, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjUxO[64 chars]w=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjUxOS43NDYzNTY6ZjAwNmNkNTA2MTBjZDFhZTk4ZTAzNzQ5NjMyNjkzNTFjNjY3MWQ1Yw=='}
2021-12-10 16:55:20,139-[test_login3.py - 68]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjUyMC4wNjQ1NjMzOmQyZWViNTAzYjk0NGZmNTRjOTk5NGVlMzk0YTEyYzFmMmZlYzQ5NzY='}
2021-12-10 16:55:20,139-[test_login3.py - 69]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjUyM[64 chars]zY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjUyMC4wNjQ1NjMzOmQyZWViNTAzYjk0NGZmNTRjOTk5NGVlMzk0YTEyYzFmMmZlYzQ5NzY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\test_login3.py", line 65, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTE1NjUyM[64 chars]zY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTE1NjUyMC4wNjQ1NjMzOmQyZWViNTAzYjk0NGZmNTRjOTk5NGVlMzk0YTEyYzFmMmZlYzQ5NzY='}
2021-12-11 11:35:32,872-[Ftest_register01.py - 28]-ERROR:测试编号1,测试用例测试主流程,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 11:35:32,873-[Ftest_register01.py - 29]-ERROR:{'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register01.py", line 25, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:39:30,946-[Ftest_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-11 15:39:30,947-[Ftest_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1008, 'msg': '手机号格式错误'}
?             ^          ^^^^^^^

+ {'code': 1000, 'msg': '注册成功'}
?             ^          ^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1008, 'msg': '手机号格式错误'}
?             ^          ^^^^^^^

+ {'code': 1000, 'msg': '注册成功'}
?             ^          ^^^^

2021-12-11 15:39:31,494-[Ftest_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-11 15:39:31,494-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1010, 'msg': '生日格式错误'}
?            ^           ^^^^^^

+ {'code': 1000, 'msg': '注册成功'}
?            ^           ^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1010, 'msg': '生日格式错误'}
?            ^           ^^^^^^

+ {'code': 1000, 'msg': '注册成功'}
?            ^           ^^^^

2021-12-11 15:39:32,038-[Ftest_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:32,039-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:32,155-[Ftest_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:32,155-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:32,273-[Ftest_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:32,274-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:32,764-[Ftest_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-11 15:39:32,764-[Ftest_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-11 15:39:43,349-[Ftest_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:39:43,350-[Ftest_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:39:43,879-[Ftest_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:39:43,879-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:39:44,445-[Ftest_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:44,446-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:44,546-[Ftest_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:44,547-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:44,649-[Ftest_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:44,649-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:39:45,182-[Ftest_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-11 15:39:45,182-[Ftest_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-11 15:41:34,836-[Ftest_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:41:34,836-[Ftest_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:41:35,388-[Ftest_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:41:35,389-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:41:35,886-[Ftest_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:41:35,886-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:41:35,984-[Ftest_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:41:35,984-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:41:36,121-[Ftest_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:41:36,121-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:41:36,517-[Ftest_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-11 15:41:36,517-[Ftest_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-11 15:44:10,781-[Ftest_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:44:10,781-[Ftest_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:44:11,239-[Ftest_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:44:11,239-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:44:11,720-[Ftest_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:44:11,720-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:44:11,823-[Ftest_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:44:11,823-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:44:11,927-[Ftest_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:44:11,927-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:44:12,338-[Ftest_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-11 15:44:12,339-[Ftest_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-11 15:46:07,414-[test_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:46:07,414-[test_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:46:07,900-[test_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:46:07,900-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 15:46:08,358-[test_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:46:08,359-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:46:08,445-[test_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:46:08,446-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:46:08,553-[test_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:46:08,553-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 15:46:09,029-[test_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-11 15:46:09,030-[test_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-11 16:25:26,610-[Ftest_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 16:25:26,610-[Ftest_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 16:25:27,082-[Ftest_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 16:25:27,082-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-11 16:25:27,549-[Ftest_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 16:25:27,549-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 16:25:27,639-[Ftest_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 16:25:27,639-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 16:25:27,748-[Ftest_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 16:25:27,748-[Ftest_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-11 16:25:28,175-[Ftest_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-11 16:25:28,175-[Ftest_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register\Ftest_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-11 17:32:30,300-[test_token_goodsinfo2.py - 36]-ERROR:测试案例2,测试用例标题token值为空的场景,执行失败!实际结果{'code': 1001, 'msg': 'token值不能为空'}
2021-12-11 17:32:30,300-[test_token_goodsinfo2.py - 37]-ERROR:'{"code": 1001, "msg": "token值不能为空"}' not found in "{'code': 1001, 'msg': 'token值不能为空'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 33, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1001, "msg": "token值不能为空"}' not found in "{'code': 1001, 'msg': 'token值不能为空'}"
2021-12-11 17:32:30,432-[test_token_goodsinfo2.py - 36]-ERROR:测试案例3,测试用例标题商品编号为5位数字的场景,执行失败!实际结果{'code': 1002, 'msg': '商品编号必须为6位数字'}
2021-12-11 17:32:30,433-[test_token_goodsinfo2.py - 37]-ERROR:'{"code":\xa01001,\xa0"msg":\xa0"token值不能为空"}' not found in "{'code': 1002, 'msg': '商品编号必须为6位数字'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 33, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code":\xa01001,\xa0"msg":\xa0"token值不能为空"}' not found in "{'code': 1002, 'msg': '商品编号必须为6位数字'}"
2021-12-11 17:32:30,562-[test_token_goodsinfo2.py - 36]-ERROR:测试案例4,测试用例标题商品编号为7位数字的场景,执行失败!实际结果{'code': 1002, 'msg': '商品编号必须为6位数字'}
2021-12-11 17:32:30,563-[test_token_goodsinfo2.py - 37]-ERROR:'{"code": 1002, "msg": "商品编号必须为6位数字"}' not found in "{'code': 1002, 'msg': '商品编号必须为6位数字'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 33, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1002, "msg": "商品编号必须为6位数字"}' not found in "{'code': 1002, 'msg': '商品编号必须为6位数字'}"
2021-12-11 17:32:30,699-[test_token_goodsinfo2.py - 36]-ERROR:测试案例5,测试用例标题商品编号为非6位纯数字的场景,执行失败!实际结果{'code': 1002, 'msg': '商品编号必须为6位数字'}
2021-12-11 17:32:30,700-[test_token_goodsinfo2.py - 37]-ERROR:'{"code":\xa01002,\xa0"msg":\xa0"商品编号必须为6位数字"}' not found in "{'code': 1002, 'msg': '商品编号必须为6位数字'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 33, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code":\xa01002,\xa0"msg":\xa0"商品编号必须为6位数字"}' not found in "{'code': 1002, 'msg': '商品编号必须为6位数字'}"
2021-12-11 17:32:30,812-[test_token_goodsinfo2.py - 36]-ERROR:测试案例6,测试用例标题销售状态非枚举的场景,执行失败!实际结果{'code': 1005, 'msg': '商品销售状态必须为0或者1'}
2021-12-11 17:32:30,812-[test_token_goodsinfo2.py - 37]-ERROR:'{"code":\xa01005,\xa0"msg":\xa0"商品销售状态必须为0或者1"}' not found in "{'code': 1005, 'msg': '商品销售状态必须为0或者1'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 33, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code":\xa01005,\xa0"msg":\xa0"商品销售状态必须为0或者1"}' not found in "{'code': 1005, 'msg': '商品销售状态必须为0或者1'}"
2021-12-11 17:32:30,931-[test_token_goodsinfo2.py - 36]-ERROR:测试案例7,测试用例标题销售不对应的场景,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-11 17:32:30,931-[test_token_goodsinfo2.py - 37]-ERROR:'{"code":\xa01008,\xa0"msg":\xa0"没有符合条件的数据"}' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 33, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code":\xa01008,\xa0"msg":\xa0"没有符合条件的数据"}' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-11 17:32:31,051-[test_token_goodsinfo2.py - 36]-ERROR:测试案例8,测试用例标题促销状态不对应的场景,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-11 17:32:31,051-[test_token_goodsinfo2.py - 37]-ERROR:'{"code":\xa01008,\xa0"msg":\xa0"没有符合条件的数据"}' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 33, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code":\xa01008,\xa0"msg":\xa0"没有符合条件的数据"}' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-11 17:32:31,172-[test_token_goodsinfo2.py - 36]-ERROR:测试案例9,测试用例标题促销状态非枚举的场景,执行失败!实际结果{'code': 1006, 'msg': '商品促销状态必须为0或者1'}
2021-12-11 17:32:31,172-[test_token_goodsinfo2.py - 37]-ERROR:'{"code":\xa01006,\xa0"msg":\xa0"商品促销状态必须为0或者1"}' not found in "{'code': 1006, 'msg': '商品促销状态必须为0或者1'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 33, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code":\xa01006,\xa0"msg":\xa0"商品促销状态必须为0或者1"}' not found in "{'code': 1006, 'msg': '商品促销状态必须为0或者1'}"
2021-12-11 17:55:53,413-[test_token_goodsinfo2.py - 39]-ERROR:测试案例9,测试用例标题促销状态非枚举的场景,执行失败!实际结果{'code': 1006, 'msg': '商品促销状态必须为0或者1'}
2021-12-11 17:55:53,414-[test_token_goodsinfo2.py - 40]-ERROR:{'code': 1005, 'msg': '商品销售状态必须为0或者1'} != {'code': 1006, 'msg': '商品促销状态必须为0或者1'}
- {'code': 1005, 'msg': '商品销售状态必须为0或者1'}
?             ^             -

+ {'code': 1006, 'msg': '商品促销状态必须为0或者1'}
?             ^            +
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 36, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': '商品销售状态必须为0或者1'} != {'code': 1006, 'msg': '商品促销状态必须为0或者1'}
- {'code': 1005, 'msg': '商品销售状态必须为0或者1'}
?             ^             -

+ {'code': 1006, 'msg': '商品促销状态必须为0或者1'}
?             ^            +

2021-12-11 17:56:24,411-[test_token_goodsinfo2.py - 39]-ERROR:测试案例9,测试用例标题促销状态非枚举的场景,执行失败!实际结果{'code': 1006, 'msg': '商品促销状态必须为0或者1'}
2021-12-11 17:56:24,411-[test_token_goodsinfo2.py - 40]-ERROR:{'code': 1006, 'msg': '商品销售状态必须为0或者1'} != {'code': 1006, 'msg': '商品促销状态必须为0或者1'}
- {'code': 1006, 'msg': '商品销售状态必须为0或者1'}
?                           -

+ {'code': 1006, 'msg': '商品促销状态必须为0或者1'}
?                          +
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo2.py", line 36, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1006, 'msg': '商品销售状态必须为0或者1'} != {'code': 1006, 'msg': '商品促销状态必须为0或者1'}
- {'code': 1006, 'msg': '商品销售状态必须为0或者1'}
?                           -

+ {'code': 1006, 'msg': '商品促销状态必须为0或者1'}
?                          +

2021-12-13 09:26:19,663-[Ftest_login3.py - 63]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM4ODc3OS41MTE2NDg6Y2VlZDU0ZDRmOWJiNTcwNTdiM2IwYWY4ZDY2M2I0ZDlkYTZiYTM0NQ=='}
2021-12-13 09:26:19,674-[Ftest_login3.py - 64]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM4ODc3O[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM4ODc3OS41MTE2NDg6Y2VlZDU0ZDRmOWJiNTcwNTdiM2IwYWY4ZDY2M2I0ZDlkYTZiYTM0NQ=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM4ODc3O[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM4ODc3OS41MTE2NDg6Y2VlZDU0ZDRmOWJiNTcwNTdiM2IwYWY4ZDY2M2I0ZDlkYTZiYTM0NQ=='}
2021-12-13 09:26:20,225-[Ftest_login3.py - 63]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM4ODc4MC4xMDI2MDU4OjM3YTZhZjU3ZjljNTQ2ZDgwYWIzY2Y1Yzg5NWZiOTU0ODZiNTRkMjc='}
2021-12-13 09:26:20,225-[Ftest_login3.py - 64]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM4ODc4M[64 chars]jc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM4ODc4MC4xMDI2MDU4OjM3YTZhZjU3ZjljNTQ2ZDgwYWIzY2Y1Yzg5NWZiOTU0ODZiNTRkMjc='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM4ODc4M[64 chars]jc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM4ODc4MC4xMDI2MDU4OjM3YTZhZjU3ZjljNTQ2ZDgwYWIzY2Y1Yzg5NWZiOTU0ODZiNTRkMjc='}
2021-12-13 09:48:04,799-[Ftest_login3.py - 64]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDA4NC42NTg4OTc0OmQ1MTU2N2UxY2E2ZDU5NjFhNzBmYjI5NDQwNTRmOTkxOGMzNWVlMGU='}
2021-12-13 09:48:04,799-[Ftest_login3.py - 65]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDA4N[64 chars]GU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDA4NC42NTg4OTc0OmQ1MTU2N2UxY2E2ZDU5NjFhNzBmYjI5NDQwNTRmOTkxOGMzNWVlMGU='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 61, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDA4N[64 chars]GU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDA4NC42NTg4OTc0OmQ1MTU2N2UxY2E2ZDU5NjFhNzBmYjI5NDQwNTRmOTkxOGMzNWVlMGU='}
2021-12-13 09:48:05,182-[Ftest_login3.py - 64]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDA4NS4wOTY4MDc1OjFlNWE0Nzk2MmEwYWZmZjFiOGZhMGI4MTgzNTM0NDRhZGZiNjk1MTY='}
2021-12-13 09:48:05,182-[Ftest_login3.py - 65]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDA4N[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDA4NS4wOTY4MDc1OjFlNWE0Nzk2MmEwYWZmZjFiOGZhMGI4MTgzNTM0NDRhZGZiNjk1MTY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 61, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDA4N[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDA4NS4wOTY4MDc1OjFlNWE0Nzk2MmEwYWZmZjFiOGZhMGI4MTgzNTM0NDRhZGZiNjk1MTY='}
2021-12-13 09:48:41,068-[Ftest_login3.py - 63]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDEyMC45NTc2Nzg2OjE1OWU1MDY3MjJhYjg5YjgxNmI5ODY1MTg0NTE3YWYwMmEzYzU0YWE='}
2021-12-13 09:48:41,069-[Ftest_login3.py - 64]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDEyM[64 chars]WE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDEyMC45NTc2Nzg2OjE1OWU1MDY3MjJhYjg5YjgxNmI5ODY1MTg0NTE3YWYwMmEzYzU0YWE='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDEyM[64 chars]WE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDEyMC45NTc2Nzg2OjE1OWU1MDY3MjJhYjg5YjgxNmI5ODY1MTg0NTE3YWYwMmEzYzU0YWE='}
2021-12-13 09:48:41,478-[Ftest_login3.py - 63]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDEyMS4zODEyNzIzOjRkZGIyMDYwNDIyNzFlN2QxY2Q2NThmODA3ZTYyYWQ1OGNhMDBiY2I='}
2021-12-13 09:48:41,478-[Ftest_login3.py - 64]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDEyM[64 chars]2I='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDEyMS4zODEyNzIzOjRkZGIyMDYwNDIyNzFlN2QxY2Q2NThmODA3ZTYyYWQ1OGNhMDBiY2I='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDEyM[64 chars]2I='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDEyMS4zODEyNzIzOjRkZGIyMDYwNDIyNzFlN2QxY2Q2NThmODA3ZTYyYWQ1OGNhMDBiY2I='}
2021-12-13 09:50:03,940-[Ftest_login4.py - 59]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDIwMy44NTAyOTE3OmI3Mjk3YWNmMjRkOTUyNGRiYzEwMTZhMjNhYTIyZTM0NWJiZDIyOWY='}
2021-12-13 09:50:03,941-[Ftest_login4.py - 60]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDIwM[64 chars]WY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDIwMy44NTAyOTE3OmI3Mjk3YWNmMjRkOTUyNGRiYzEwMTZhMjNhYTIyZTM0NWJiZDIyOWY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login4.py", line 56, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDIwM[64 chars]WY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDIwMy44NTAyOTE3OmI3Mjk3YWNmMjRkOTUyNGRiYzEwMTZhMjNhYTIyZTM0NWJiZDIyOWY='}
2021-12-13 09:50:04,337-[Ftest_login4.py - 59]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDIwNC4yNDU5NTY3OjRjZDQyNGUyMTc1MmMwODZlODg1NzY2MmIzYWE3OTc1NzM4ZmUyNmY='}
2021-12-13 09:50:04,337-[Ftest_login4.py - 60]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDIwN[64 chars]mY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDIwNC4yNDU5NTY3OjRjZDQyNGUyMTc1MmMwODZlODg1NzY2MmIzYWE3OTc1NzM4ZmUyNmY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login4.py", line 56, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5MDIwN[64 chars]mY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5MDIwNC4yNDU5NTY3OjRjZDQyNGUyMTc1MmMwODZlODg1NzY2MmIzYWE3OTc1NzM4ZmUyNmY='}
2021-12-13 11:22:01,966-[Ftest_login3.py - 64]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5NTcyMS44NzAwODQzOjMwZDVjNDkxYjQzYzM2YjgzMmRjNGFjYWIzMjFkNDNkMWJhNjZhMzY='}
2021-12-13 11:22:01,966-[Ftest_login3.py - 65]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5NTcyM[64 chars]zY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5NTcyMS44NzAwODQzOjMwZDVjNDkxYjQzYzM2YjgzMmRjNGFjYWIzMjFkNDNkMWJhNjZhMzY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 61, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5NTcyM[64 chars]zY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5NTcyMS44NzAwODQzOjMwZDVjNDkxYjQzYzM2YjgzMmRjNGFjYWIzMjFkNDNkMWJhNjZhMzY='}
2021-12-13 11:22:02,451-[Ftest_login3.py - 64]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5NTcyMi4zMjc4NTAzOmU4ZDFhZGQ2ZGI5ZDdiYTlkNTRiMzQ4ZTgwZGFlMmI4MDZjMjgyNzI='}
2021-12-13 11:22:02,451-[Ftest_login3.py - 65]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5NTcyM[64 chars]zI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5NTcyMi4zMjc4NTAzOmU4ZDFhZGQ2ZGI5ZDdiYTlkNTRiMzQ4ZTgwZGFlMmI4MDZjMjgyNzI='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login3.py", line 61, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTM5NTcyM[64 chars]zI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTM5NTcyMi4zMjc4NTAzOmU4ZDFhZGQ2ZGI5ZDdiYTlkNTRiMzQ4ZTgwZGFlMmI4MDZjMjgyNzI='}
2021-12-13 16:35:42,410-[Ftest_token_goodsinfo2.py - 55]-ERROR:测试案例1,测试用例标题商品信息查询主流程,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 16:35:42,410-[Ftest_token_goodsinfo2.py - 56]-ERROR:9 != 1
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\Ftest_token_goodsinfo2.py", line 48, in test_goods_info
    self.assertEqual(res_count, db_count)  # 响应体的商品条目数和数据库的商品条目数做对比
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 9 != 1
2021-12-13 16:35:52,347-[Ftest_token_goodsinfo2.py - 55]-ERROR:测试案例1,测试用例标题商品信息查询主流程,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 16:35:52,347-[Ftest_token_goodsinfo2.py - 56]-ERROR:9 != 1
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\Ftest_token_goodsinfo2.py", line 48, in test_goods_info
    self.assertEqual(res_count, db_count)  # 响应体的商品条目数和数据库的商品条目数做对比
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 9 != 1
2021-12-13 16:37:44,585-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 16:37:44,585-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[677 chars]99}]}
Diff is 1481 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[677 chars]99}]}
Diff is 1481 characters long. Set self.maxDiff to None to see it.
2021-12-13 16:37:44,717-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 16:37:44,717-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[677 chars]99}]}
Diff is 1481 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[677 chars]99}]}
Diff is 1481 characters long. Set self.maxDiff to None to see it.
2021-12-13 16:37:45,890-[test_token_goodsinfo3.py - 85]-ERROR:测试案例13,测试用例标题商品信息查询—（带商品）销售状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:45,890-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:37:46,008-[test_token_goodsinfo3.py - 85]-ERROR:测试案例14,测试用例标题商品信息查询—（带商品）销售状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:46,009-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:37:46,163-[test_token_goodsinfo3.py - 85]-ERROR:测试案例15,测试用例标题商品信息查询—（带商品）促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:46,163-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:37:46,310-[test_token_goodsinfo3.py - 85]-ERROR:测试案例16,测试用例标题商品信息查询—（带商品）促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:46,310-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:37:46,445-[test_token_goodsinfo3.py - 85]-ERROR:测试案例17,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:46,445-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:37:46,585-[test_token_goodsinfo3.py - 85]-ERROR:测试案例18,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:46,585-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:37:46,714-[test_token_goodsinfo3.py - 85]-ERROR:测试案例19,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:46,714-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:37:46,848-[test_token_goodsinfo3.py - 85]-ERROR:测试案例20,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:46,848-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:37:47,244-[test_token_goodsinfo3.py - 85]-ERROR:测试案例23,测试用例标题商品信息查询—存在的商品编号（6位数字）,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-13 16:37:47,244-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-13 16:38:30,748-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 16:38:30,749-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[677 chars]99}]}
Diff is 1481 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[677 chars]99}]}
Diff is 1481 characters long. Set self.maxDiff to None to see it.
2021-12-13 16:38:30,973-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 16:38:30,973-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[677 chars]99}]}
Diff is 1481 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[677 chars]99}]}
Diff is 1481 characters long. Set self.maxDiff to None to see it.
2021-12-13 16:51:13,538-[test_business_items1.py - 30]-ERROR:测试案例1,测试用例标题订单信息查询接口,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 16:51:13,539-[test_business_items1.py - 31]-ERROR:'查询成功' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 16:52:33,950-[test_business_items1.py - 30]-ERROR:测试案例1,测试用例标题订单信息查询接口,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'name': 'AutoTrue', 'phone': '15911111111', 'status': '未支付', 'value': 5000.0, 'goods_tiems': [{'goods_name': '鸭绒大衣', 'goods_price': 5000.0}]}
2021-12-13 16:52:33,950-[test_business_items1.py - 31]-ERROR:'查询成功，查询无结果' not found in "{'code': 1000, 'msg': '查询成功', 'name': 'AutoTrue', 'phone': '15911111111', 'status': '未支付', 'value': 5000.0, 'goods_tiems': [{'goods_name': '鸭绒大衣', 'goods_price': 5000.0}]}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功，查询无结果' not found in "{'code': 1000, 'msg': '查询成功', 'name': 'AutoTrue', 'phone': '15911111111', 'status': '未支付', 'value': 5000.0, 'goods_tiems': [{'goods_name': '鸭绒大衣', 'goods_price': 5000.0}]}"
2021-12-13 17:03:12,915-[test_business_items1.py - 30]-ERROR:测试案例2,测试用例标题非正确的订单编号,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 17:03:12,916-[test_business_items1.py - 31]-ERROR:'{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 17:03:13,048-[test_business_items1.py - 30]-ERROR:测试案例3,测试用例标题订单编号4位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:03:13,048-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:03:13,174-[test_business_items1.py - 30]-ERROR:测试案例4,测试用例标题订单编号6位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:03:13,174-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:03:13,328-[test_business_items1.py - 30]-ERROR:测试案例5,测试用例标题订单编号为空的场景,执行失败!实际结果{'code': 1002, 'msg': '订单编号不能为空'}
2021-12-13 17:03:13,328-[test_business_items1.py - 31]-ERROR:'{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
2021-12-13 17:03:50,875-[test_business_items1.py - 30]-ERROR:测试案例2,测试用例标题非正确的订单编号,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 17:03:50,875-[test_business_items1.py - 31]-ERROR:'{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 17:03:50,994-[test_business_items1.py - 30]-ERROR:测试案例3,测试用例标题订单编号4位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:03:50,995-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:03:51,119-[test_business_items1.py - 30]-ERROR:测试案例4,测试用例标题订单编号6位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:03:51,119-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:03:51,240-[test_business_items1.py - 30]-ERROR:测试案例5,测试用例标题订单编号为空的场景,执行失败!实际结果{'code': 1002, 'msg': '订单编号不能为空'}
2021-12-13 17:03:51,241-[test_business_items1.py - 31]-ERROR:'{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
2021-12-13 17:04:51,222-[test_business_items1.py - 30]-ERROR:测试案例2,测试用例标题非正确的订单编号,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 17:04:51,222-[test_business_items1.py - 31]-ERROR:'"{\'code\': 1005, \'msg\': \'查询无结果\'}"' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '"{\'code\': 1005, \'msg\': \'查询无结果\'}"' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 17:09:04,043-[test_business_items1.py - 30]-ERROR:测试案例2,测试用例标题非正确的订单编号,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 17:09:04,043-[test_business_items1.py - 31]-ERROR:'{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 17:09:04,167-[test_business_items1.py - 30]-ERROR:测试案例3,测试用例标题订单编号4位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:09:04,167-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:09:04,315-[test_business_items1.py - 30]-ERROR:测试案例4,测试用例标题订单编号6位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:09:04,315-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:09:04,467-[test_business_items1.py - 30]-ERROR:测试案例5,测试用例标题订单编号为空的场景,执行失败!实际结果{'code': 1002, 'msg': '订单编号不能为空'}
2021-12-13 17:09:04,467-[test_business_items1.py - 31]-ERROR:'{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
2021-12-13 17:11:23,885-[test_business_items1.py - 30]-ERROR:测试案例2,测试用例标题非正确的订单编号,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 17:11:23,885-[test_business_items1.py - 31]-ERROR:'{"code": 1005, \'msg\': \'查询无结果\'}' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1005, \'msg\': \'查询无结果\'}' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 17:11:24,017-[test_business_items1.py - 30]-ERROR:测试案例3,测试用例标题订单编号4位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:11:24,017-[test_business_items1.py - 31]-ERROR:'{"code": 1003, \'msg\': \'订单编号格式不正确\'}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, \'msg\': \'订单编号格式不正确\'}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:11:24,137-[test_business_items1.py - 30]-ERROR:测试案例4,测试用例标题订单编号6位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:11:24,137-[test_business_items1.py - 31]-ERROR:'{"code": 1003, \'msg\': \'订单编号格式不正确\'}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, \'msg\': \'订单编号格式不正确\'}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:11:24,255-[test_business_items1.py - 30]-ERROR:测试案例5,测试用例标题订单编号为空的场景,执行失败!实际结果{'code': 1002, 'msg': '订单编号不能为空'}
2021-12-13 17:11:24,255-[test_business_items1.py - 31]-ERROR:'{"code": 1002, \'msg\': \'订单编号不能为空\'}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1002, \'msg\': \'订单编号不能为空\'}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
2021-12-13 17:13:07,533-[test_business_items1.py - 30]-ERROR:测试案例2,测试用例标题非正确的订单编号,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 17:13:07,533-[test_business_items1.py - 31]-ERROR:'{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 17:13:07,671-[test_business_items1.py - 30]-ERROR:测试案例3,测试用例标题订单编号4位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:13:07,671-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:13:07,842-[test_business_items1.py - 30]-ERROR:测试案例4,测试用例标题订单编号6位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:13:07,843-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:13:07,999-[test_business_items1.py - 30]-ERROR:测试案例5,测试用例标题订单编号为空的场景,执行失败!实际结果{'code': 1002, 'msg': '订单编号不能为空'}
2021-12-13 17:13:07,999-[test_business_items1.py - 31]-ERROR:'{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
2021-12-13 17:13:45,631-[test_business_items1.py - 30]-ERROR:测试案例2,测试用例标题非正确的订单编号,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 17:13:45,631-[test_business_items1.py - 31]-ERROR:'{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 17:13:45,774-[test_business_items1.py - 30]-ERROR:测试案例3,测试用例标题订单编号4位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:13:45,775-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:13:45,908-[test_business_items1.py - 30]-ERROR:测试案例4,测试用例标题订单编号6位数的场景,执行失败!实际结果{'code': 1003, 'msg': '订单编号格式不正确'}
2021-12-13 17:13:45,908-[test_business_items1.py - 31]-ERROR:'{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1003, "msg": "订单编号格式不正确"}' not found in "{'code': 1003, 'msg': '订单编号格式不正确'}"
2021-12-13 17:13:46,024-[test_business_items1.py - 30]-ERROR:测试案例5,测试用例标题订单编号为空的场景,执行失败!实际结果{'code': 1002, 'msg': '订单编号不能为空'}
2021-12-13 17:13:46,024-[test_business_items1.py - 31]-ERROR:'{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1002, "msg": "订单编号不能为空"}' not found in "{'code': 1002, 'msg': '订单编号不能为空'}"
2021-12-13 17:23:03,639-[test_business_items1.py - 30]-ERROR:测试案例2,测试用例标题非正确的订单编号,执行失败!实际结果{'code': 1005, 'msg': '查询无结果'}
2021-12-13 17:23:03,639-[test_business_items1.py - 31]-ERROR:'{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_items\test_business_items1.py", line 27, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '{"code": 1005, "msg": "查询无结果"}' not found in "{'code': 1005, 'msg': '查询无结果'}"
2021-12-13 18:55:17,706-[Ftest_token_goodsinfo2.py - 55]-ERROR:测试案例1,测试用例标题商品信息查询主流程,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 18:55:17,706-[Ftest_token_goodsinfo2.py - 56]-ERROR:9 != (9,)
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\Ftest_token_goodsinfo2.py", line 48, in test_goods_info
    self.assertEqual(res_count, db_count)  # 响应体的商品条目数和数据库的商品条目数做对比
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 9 != (9,)
2021-12-13 18:56:24,644-[Ftest_token_goodsinfo2.py - 55]-ERROR:测试案例1,测试用例标题商品信息查询主流程,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 18:56:24,644-[Ftest_token_goodsinfo2.py - 56]-ERROR:9 != (9,)
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\Ftest_token_goodsinfo2.py", line 48, in test_goods_info
    self.assertEqual(res_count, db_count)  # 响应体的商品条目数和数据库的商品条目数做对比
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 9 != (9,)
2021-12-13 18:56:33,683-[Ftest_token_goodsinfo2.py - 55]-ERROR:测试案例1,测试用例标题商品信息查询主流程,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}]}
2021-12-13 18:56:33,683-[Ftest_token_goodsinfo2.py - 56]-ERROR:9 != 1
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo\Ftest_token_goodsinfo2.py", line 48, in test_goods_info
    self.assertEqual(res_count, db_count)  # 响应体的商品条目数和数据库的商品条目数做对比
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 9 != 1
2021-12-13 19:45:36,517-[Ftest_login5.py - 67]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTQyNTkzNi40MTI0OTc6N2RkNTE2OGRlYzMwMzM5MjQ2ZjdmOTdjYjc1Zjc4NmI5ODY0MzVkNg=='}
2021-12-13 19:45:36,517-[Ftest_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTQyNTkzN[64 chars]g=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTQyNTkzNi40MTI0OTc6N2RkNTE2OGRlYzMwMzM5MjQ2ZjdmOTdjYjc1Zjc4NmI5ODY0MzVkNg=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTQyNTkzN[64 chars]g=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTQyNTkzNi40MTI0OTc6N2RkNTE2OGRlYzMwMzM5MjQ2ZjdmOTdjYjc1Zjc4NmI5ODY0MzVkNg=='}
2021-12-13 19:45:36,956-[Ftest_login5.py - 67]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTQyNTkzNi44NTA0OTk6MDI1NDJhYTY3OGEyYzc4MjNmY2EwN2M5YTMzMjU4OGNhYWY1ODhiMQ=='}
2021-12-13 19:45:36,956-[Ftest_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTQyNTkzN[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTQyNTkzNi44NTA0OTk6MDI1NDJhYTY3OGEyYzc4MjNmY2EwN2M5YTMzMjU4OGNhYWY1ODhiMQ=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login\Ftest_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTQyNTkzN[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTQyNTkzNi44NTA0OTk6MDI1NDJhYTY3OGEyYzc4MjNmY2EwN2M5YTMzMjU4OGNhYWY1ODhiMQ=='}
2021-12-14 16:03:02,857-[test_business_token_goods_input01.py - 30]-ERROR:测试案例1,测试标题商品信息录入主流程,执行失败!实际结果{'code': 1013, 'msg': '产品名称不能重复'}
2021-12-14 16:03:02,857-[test_business_token_goods_input01.py - 31]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input01.py", line 27, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^

2021-12-14 17:35:53,977-[test_business_token_goods_input02.py - 53]-ERROR:测试案例2,测试标题商品名为空的场景,执行失败!实际结果{'code': 1002, 'msg': '商品名称goodsName值不能为空'}
2021-12-14 17:35:53,978-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:35:54,117-[test_business_token_goods_input02.py - 53]-ERROR:测试案例3,测试标题商品名2位字符的场景,执行失败!实际结果{'code': 1006, 'msg': '商品名称格式不正确'}
2021-12-14 17:35:54,117-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:35:54,265-[test_business_token_goods_input02.py - 53]-ERROR:测试案例4,测试标题商品名16位字符的场景,执行失败!实际结果{'code': 1006, 'msg': '商品名称格式不正确'}
2021-12-14 17:35:54,266-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:37:02,998-[test_business_token_goods_input02.py - 53]-ERROR:测试案例3,测试标题商品名为空的场景,执行失败!实际结果{'code': 1002, 'msg': '商品名称goodsName值不能为空'}
2021-12-14 17:37:02,998-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:37:03,151-[test_business_token_goods_input02.py - 53]-ERROR:测试案例4,测试标题商品名2位字符的场景,执行失败!实际结果{'code': 1006, 'msg': '商品名称格式不正确'}
2021-12-14 17:37:03,151-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:37:03,285-[test_business_token_goods_input02.py - 53]-ERROR:测试案例5,测试标题商品名16位字符的场景,执行失败!实际结果{'code': 1006, 'msg': '商品名称格式不正确'}
2021-12-14 17:37:03,285-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:37:22,130-[test_business_token_goods_input02.py - 53]-ERROR:测试案例3,测试标题商品名为空的场景,执行失败!实际结果{'code': 1002, 'msg': '商品名称goodsName值不能为空'}
2021-12-14 17:37:22,130-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:37:22,262-[test_business_token_goods_input02.py - 53]-ERROR:测试案例4,测试标题商品名2位字符的场景,执行失败!实际结果{'code': 1006, 'msg': '商品名称格式不正确'}
2021-12-14 17:37:22,262-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:37:22,394-[test_business_token_goods_input02.py - 53]-ERROR:测试案例5,测试标题商品名16位字符的场景,执行失败!实际结果{'code': 1006, 'msg': '商品名称格式不正确'}
2021-12-14 17:37:22,394-[test_business_token_goods_input02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 48, in test_goods_input
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-14 17:56:26,232-[test_business_token_goods_input02.py - 54]-ERROR:测试案例12,测试标题商品价格为0.00,执行失败!实际结果{'code': 1013, 'msg': '产品名称不能重复'}
2021-12-14 17:56:26,233-[test_business_token_goods_input02.py - 55]-ERROR:{'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 44, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-12-14 19:04:36,715-[test_business_token_goods_input02.py - 54]-ERROR:测试案例12,测试标题商品价格为0.00,执行失败!实际结果{'code': 1013, 'msg': '产品名称不能重复'}
2021-12-14 19:04:36,715-[test_business_token_goods_input02.py - 55]-ERROR:{'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 44, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-12-14 19:04:53,149-[test_business_token_goods_input02.py - 54]-ERROR:测试案例12,测试标题商品价格为0.00,执行失败!实际结果{'code': 1013, 'msg': '产品名称不能重复'}
2021-12-14 19:04:53,150-[test_business_token_goods_input02.py - 55]-ERROR:{'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 44, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-12-14 19:05:01,990-[test_business_token_goods_input02.py - 54]-ERROR:测试案例12,测试标题商品价格为0.00,执行失败!实际结果{'code': 1013, 'msg': '产品名称不能重复'}
2021-12-14 19:05:01,991-[test_business_token_goods_input02.py - 55]-ERROR:{'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 44, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-12-14 19:06:07,159-[test_business_token_goods_input02.py - 54]-ERROR:测试案例12,测试标题商品价格为0.00,执行失败!实际结果{'code': 1013, 'msg': '产品名称不能重复'}
2021-12-14 19:06:07,159-[test_business_token_goods_input02.py - 55]-ERROR:{'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 44, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-12-14 19:07:36,454-[test_business_token_goods_input02.py - 54]-ERROR:测试案例12,测试标题商品价格为0.00,执行失败!实际结果{'code': 1000, 'msg': '商品录入成功'}
2021-12-14 19:07:36,455-[test_business_token_goods_input02.py - 55]-ERROR:{'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1000, 'msg': '商品录入成功'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?            ^             ^^^ ^^^

+ {'code': 1000, 'msg': '商品录入成功'}
?            ^             ^ ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input02.py", line 44, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格输入不正确'} != {'code': 1000, 'msg': '商品录入成功'}
- {'code': 1010, 'msg': '商品价格输入不正确'}
?            ^             ^^^ ^^^

+ {'code': 1000, 'msg': '商品录入成功'}
?            ^             ^ ^^

2021-12-15 12:33:52,914-[test_business_token_goods_input03.py - 59]-ERROR:测试案例7,测试标题商品录入接口商品名重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 12:33:52,916-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?             ^          ^ ^^ ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?             ^          ^ ^^ ^^

2021-12-15 12:33:53,075-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 12:33:53,075-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 12:34:19,439-[test_business_token_goods_input03.py - 59]-ERROR:测试案例7,测试标题商品录入接口商品名重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 12:34:19,439-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?             ^          ^ ^^ ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?             ^          ^ ^^ ^^

2021-12-15 12:34:19,588-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 12:34:19,588-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 13:52:52,314-[test_business_token_goods_input03.py - 59]-ERROR:测试案例7,测试标题商品录入接口商品名重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 13:52:52,314-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?             ^          ^ ^^ ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?             ^          ^ ^^ ^^

2021-12-15 13:52:52,465-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 13:52:52,465-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 13:53:56,254-[test_business_token_goods_input03.py - 59]-ERROR:测试案例7,测试标题商品录入接口商品名重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 13:53:56,254-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?             ^          ^ ^^ ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?             ^          ^ ^^ ^^

2021-12-15 13:53:56,400-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 13:53:56,401-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 13:54:39,783-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 13:54:39,784-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 14:03:25,362-[test_business_token_goods_input01.py - 33]-ERROR:测试案例1,测试标题商品信息录入主流程,执行失败!实际结果{'code': 1013, 'msg': '产品名称不能重复'}
2021-12-15 14:03:25,362-[test_business_token_goods_input01.py - 34]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input01.py", line 30, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^

2021-12-15 14:03:26,692-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 14:03:26,692-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 14:05:22,160-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下第一辣条', 'shopPrice': 30.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-15 14:05:22,161-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
2021-12-15 14:05:22,348-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下第一辣条', 'shopPrice': 30.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-15 14:05:22,348-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
2021-12-15 14:05:26,112-[test_login5.py - 67]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODMyNS45OTA0Mjg0OjgxMzkyYzA3ZmJmOGMxOGJmMWI2MmM3YzdmZjgwNjUwNTQ2NGJkYjc='}
2021-12-15 14:05:26,112-[test_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODMyN[64 chars]jc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU3ODMyNS45OTA0Mjg0OjgxMzkyYzA3ZmJmOGMxOGJmMWI2MmM3YzdmZjgwNjUwNTQ2NGJkYjc='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\test_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODMyN[64 chars]jc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU3ODMyNS45OTA0Mjg0OjgxMzkyYzA3ZmJmOGMxOGJmMWI2MmM3YzdmZjgwNjUwNTQ2NGJkYjc='}
2021-12-15 14:05:26,691-[test_login5.py - 67]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODMyNi41NjkwMTI0OjliNGNjMjdkYjIzMDI5ZGY2MWYzZDkyODFmNWI3OGVlYjk0MGI3MGY='}
2021-12-15 14:05:26,691-[test_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODMyN[64 chars]GY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU3ODMyNi41NjkwMTI0OjliNGNjMjdkYjIzMDI5ZGY2MWYzZDkyODFmNWI3OGVlYjk0MGI3MGY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\test_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODMyN[64 chars]GY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU3ODMyNi41NjkwMTI0OjliNGNjMjdkYjIzMDI5ZGY2MWYzZDkyODFmNWI3OGVlYjk0MGI3MGY='}
2021-12-15 14:05:29,454-[test_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-15 14:05:29,454-[test_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-15 14:05:30,121-[test_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-15 14:05:30,121-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-15 14:05:30,810-[test_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:05:30,810-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:05:30,955-[test_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:05:30,955-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:05:31,110-[test_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:05:31,110-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:05:31,694-[test_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-15 14:05:31,694-[test_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-15 14:05:32,930-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 14:05:32,930-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 14:10:59,445-[test_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:10:59,446-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:10:59,575-[test_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:10:59,575-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:10:59,740-[test_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:10:59,740-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:11:00,439-[test_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-15 14:11:00,439-[test_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-15 14:11:01,699-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 14:11:01,699-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 14:11:18,978-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下第一辣条', 'shopPrice': 30.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-15 14:11:18,979-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
2021-12-15 14:11:19,150-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下第一辣条', 'shopPrice': 30.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-15 14:11:19,150-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
2021-12-15 14:11:23,236-[test_login5.py - 67]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODY4My4wODc3NDc4OjRkZjllZWM3YjM2OWY2ZDJjMjc2NjcwNWEzYzM2YjcyMTNkNGEyOWQ='}
2021-12-15 14:11:23,236-[test_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODY4M[64 chars]WQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU3ODY4My4wODc3NDc4OjRkZjllZWM3YjM2OWY2ZDJjMjc2NjcwNWEzYzM2YjcyMTNkNGEyOWQ='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\test_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODY4M[64 chars]WQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU3ODY4My4wODc3NDc4OjRkZjllZWM3YjM2OWY2ZDJjMjc2NjcwNWEzYzM2YjcyMTNkNGEyOWQ='}
2021-12-15 14:11:23,828-[test_login5.py - 67]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODY4My42ODIxNTgyOjg3N2FmNmQ5ZTRjNzE3NWFiMTE5YmI3MDc3YWYyOTY1ZjgyMGZkMWM='}
2021-12-15 14:11:23,828-[test_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODY4M[64 chars]WM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU3ODY4My42ODIxNTgyOjg3N2FmNmQ5ZTRjNzE3NWFiMTE5YmI3MDc3YWYyOTY1ZjgyMGZkMWM='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\test_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU3ODY4M[64 chars]WM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU3ODY4My42ODIxNTgyOjg3N2FmNmQ5ZTRjNzE3NWFiMTE5YmI3MDc3YWYyOTY1ZjgyMGZkMWM='}
2021-12-15 14:11:26,941-[test_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-15 14:11:26,941-[test_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-15 14:11:27,705-[test_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-15 14:11:27,705-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-15 14:11:28,442-[test_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:11:28,442-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:11:28,592-[test_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:11:28,593-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:11:28,742-[test_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:11:28,742-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-15 14:11:29,369-[test_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-15 14:11:29,369-[test_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-15 14:11:30,727-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 14:11:30,728-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 14:14:04,287-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下第一辣条', 'shopPrice': 30.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-15 14:14:04,287-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
2021-12-15 14:14:04,459-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下第一辣条', 'shopPrice': 30.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-15 14:14:04,459-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
2021-12-15 14:18:04,484-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-15 14:18:04,484-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-15 14:48:50,170-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下第一辣条', 'shopPrice': 30.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-15 14:48:50,170-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
2021-12-15 14:48:50,458-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '鸭绒大衣', 'shopPrice': 5000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '派克大衣', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '华为', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '苹果', 'shopPrice': 15555.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '羊羔', 'shopPrice': 2000.0, 'promotePrice': 0.0, 'num': 15623}, {'goodsName': '小牛', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99999}, {'goodsName': '袋鼠', 'shopPrice': 50000.0, 'promotePrice': 0.0, 'num': 99998}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下第一辣条', 'shopPrice': 30.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-15 14:48:50,458-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1572 chars]20}]}
Diff is 3245 characters long. Set self.maxDiff to None to see it.
2021-12-15 15:50:06,338-[test_business_goods_promote013.py - 32]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 15:50:06,338-[test_business_goods_promote013.py - 33]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote013.py", line 28, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 15:53:01,587-[test_business_goods_promote013.py - 37]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 15:53:01,588-[test_business_goods_promote013.py - 38]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote013.py", line 33, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:06:52,605-[test_business_goods_promote02.py - 50]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:06:52,605-[test_business_goods_promote02.py - 51]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 46, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:09:27,040-[test_business_goods_promote02.py - 51]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:09:27,040-[test_business_goods_promote02.py - 52]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:12:11,144-[test_business_goods_promote02.py - 51]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:12:11,145-[test_business_goods_promote02.py - 52]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:17:58,234-[test_business_goods_promote02.py - 51]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:17:58,234-[test_business_goods_promote02.py - 52]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:20:01,730-[test_business_goods_promote02.py - 51]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:20:01,730-[test_business_goods_promote02.py - 52]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:21:06,417-[test_business_goods_promote02.py - 51]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:21:06,417-[test_business_goods_promote02.py - 52]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:38:22,606-[test_business_goods_promote02.py - 54]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:38:22,606-[test_business_goods_promote02.py - 55]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:38:44,136-[test_business_goods_promote02.py - 55]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:38:44,136-[test_business_goods_promote02.py - 56]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:39:19,451-[test_business_goods_promote02.py - 55]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:39:19,452-[test_business_goods_promote02.py - 56]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:39:44,564-[test_business_goods_promote02.py - 55]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:39:44,565-[test_business_goods_promote02.py - 56]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:40:13,716-[test_business_goods_promote02.py - 55]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:40:13,716-[test_business_goods_promote02.py - 56]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:41:22,937-[test_business_goods_promote02.py - 55]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:41:22,938-[test_business_goods_promote02.py - 56]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:41:59,285-[test_business_goods_promote02.py - 55]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:41:59,285-[test_business_goods_promote02.py - 56]-ERROR:{'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 47, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '促销开启设置成功'} != {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
- {'code': 1000, 'msg': '促销开启设置成功'}
+ {'code': 1012, 'msg': '该商品已经在促销状态，不能再次开启促销'}
2021-12-15 16:45:48,810-[test_business_goods_promote02.py - 53]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1000, 'msg': '促销开启设置成功'}
2021-12-15 16:45:48,811-[test_business_goods_promote02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 49, in testgoodspromote
    self.assertEqual(count, 0)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-15 16:48:20,599-[test_business_goods_promote02.py - 53]-ERROR:测试案列1，测试标题促销设置接口主流程,执行失败!实际结果{'code': 1000, 'msg': '促销开启设置成功'}
2021-12-15 16:48:20,599-[test_business_goods_promote02.py - 54]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote02.py", line 49, in testgoodspromote
    self.assertEqual(count, 0)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-15 17:29:15,214-[test_business_goods_promote03.py - 54]-ERROR:测试案列7，测试标题促销设置接口—商品编号非6位数字,执行失败!实际结果{'code': 1007, 'msg': '商品编号格式不正确'}
2021-12-15 17:29:15,214-[test_business_goods_promote03.py - 55]-ERROR:{'code': 1002, 'msg': '商品编号必须为6位数字'} != {'code': 1007, 'msg': '商品编号格式不正确'}
- {'code': 1002, 'msg': '商品编号必须为6位数字'}
?             ^              ^^^^^^^

+ {'code': 1007, 'msg': '商品编号格式不正确'}
?             ^              ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 46, in testgoodspromote
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1002, 'msg': '商品编号必须为6位数字'} != {'code': 1007, 'msg': '商品编号格式不正确'}
- {'code': 1002, 'msg': '商品编号必须为6位数字'}
?             ^              ^^^^^^^

+ {'code': 1007, 'msg': '商品编号格式不正确'}
?             ^              ^^^^^

2021-12-15 19:40:30,462-[NEW_test_business_Login.py - 45]-ERROR:测试用例4,测试标题登录用户名大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODQzMC4zMjgwMDU2OjY0ZjIzOWQxZGRjM2U3NmI4MjdkMzBiMGM3YTY4Yzg4ZWJhYmQ1MTY='}
2021-12-15 19:40:30,463-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODQzM[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU5ODQzMC4zMjgwMDU2OjY0ZjIzOWQxZGRjM2U3NmI4MjdkMzBiMGM3YTY4Yzg4ZWJhYmQ1MTY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODQzM[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU5ODQzMC4zMjgwMDU2OjY0ZjIzOWQxZGRjM2U3NmI4MjdkMzBiMGM3YTY4Yzg4ZWJhYmQ1MTY='}
2021-12-15 19:40:31,047-[NEW_test_business_Login.py - 45]-ERROR:测试用例8,测试标题登录密码大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODQzMC44OTI0ODU5OjEwN2RkNTZhYTNmY2M1ZWUzNjdhYmEyYzFhNmQ1ZmE3ZDA3NjM5OGU='}
2021-12-15 19:40:31,047-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODQzM[64 chars]GU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU5ODQzMC44OTI0ODU5OjEwN2RkNTZhYTNmY2M1ZWUzNjdhYmEyYzFhNmQ1ZmE3ZDA3NjM5OGU='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODQzM[64 chars]GU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU5ODQzMC44OTI0ODU5OjEwN2RkNTZhYTNmY2M1ZWUzNjdhYmEyYzFhNmQ1ZmE3ZDA3NjM5OGU='}
2021-12-15 19:42:09,677-[NEW_test_business_Login.py - 45]-ERROR:测试用例4,测试标题登录用户名大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODUyOS41NDgyNDk6YjI3YTMwNzRiZTU0MTdmYTFiZWNjMjUyMDZhMGUyZjcxOTE1ZDFiYQ=='}
2021-12-15 19:42:09,677-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODUyO[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU5ODUyOS41NDgyNDk6YjI3YTMwNzRiZTU0MTdmYTFiZWNjMjUyMDZhMGUyZjcxOTE1ZDFiYQ=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODUyO[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU5ODUyOS41NDgyNDk6YjI3YTMwNzRiZTU0MTdmYTFiZWNjMjUyMDZhMGUyZjcxOTE1ZDFiYQ=='}
2021-12-15 19:42:10,278-[NEW_test_business_Login.py - 45]-ERROR:测试用例8,测试标题登录密码大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODUzMC4xMjgwMzY6MzRlZmQxNjQwMDZkYmNiYjczNGFmZDgxNmZhNDVjNDRhMWJiMzcwOQ=='}
2021-12-15 19:42:10,278-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODUzM[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU5ODUzMC4xMjgwMzY6MzRlZmQxNjQwMDZkYmNiYjczNGFmZDgxNmZhNDVjNDRhMWJiMzcwOQ=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTU5ODUzM[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTU5ODUzMC4xMjgwMzY6MzRlZmQxNjQwMDZkYmNiYjczNGFmZDgxNmZhNDVjNDRhMWJiMzcwOQ=='}
2021-12-16 12:52:50,824-[test_business_goods_promote03.py - 60]-ERROR:测试案列2，测试标题促销设置接口_promoteStartTime为空,执行失败!实际结果{'code': 1002, 'msg': '促销开始时间不能为空'}
2021-12-16 12:52:50,825-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:50,983-[test_business_goods_promote03.py - 60]-ERROR:测试案列3，测试标题促销设置接口_promoteStartTime年月日不完整,执行失败!实际结果{'code': 1005, 'msg': '促销开始时间格式不正确'}
2021-12-16 12:52:50,983-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:51,142-[test_business_goods_promote03.py - 60]-ERROR:测试案列4，测试标题促销设置接口_promoteStartTime输入非数字,执行失败!实际结果{'code': 1005, 'msg': '促销开始时间格式不正确'}
2021-12-16 12:52:51,143-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:51,318-[test_business_goods_promote03.py - 60]-ERROR:测试案列5，测试标题促销设置接口_promoteStartTime月份超过12,执行失败!实际结果{'code': 1005, 'msg': '促销开始时间格式不正确'}
2021-12-16 12:52:51,318-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:51,514-[test_business_goods_promote03.py - 60]-ERROR:测试案列6，测试标题促销设置接口_promoteStartTime日期超过31,执行失败!实际结果{'code': 1005, 'msg': '促销开始时间格式不正确'}
2021-12-16 12:52:51,514-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:51,801-[test_business_goods_promote03.py - 60]-ERROR:测试案列10，测试标题促销设置接口_promoteStartTime小于当前时间,执行失败!实际结果{'code': 1008, 'msg': '促销开始时间必须大于当前时间'}
2021-12-16 12:52:51,801-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:51,964-[test_business_goods_promote03.py - 60]-ERROR:测试案列11，测试标题促销设置接口_promoteEndTime为空,执行失败!实际结果{'code': 1003, 'msg': '促销结束时间不能为空'}
2021-12-16 12:52:51,964-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:52,168-[test_business_goods_promote03.py - 60]-ERROR:测试案列12，测试标题促销设置接口_promoteEndTime年月日不完整,执行失败!实际结果{'code': 1006, 'msg': '促销结束时间格式不正确'}
2021-12-16 12:52:52,168-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:52,340-[test_business_goods_promote03.py - 60]-ERROR:测试案列13，测试标题促销设置接口_promoteEndTime输入非数字,执行失败!实际结果{'code': 1006, 'msg': '促销结束时间格式不正确'}
2021-12-16 12:52:52,341-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:52,526-[test_business_goods_promote03.py - 60]-ERROR:测试案列14，测试标题促销设置接口_promoteEndTime月份超过12,执行失败!实际结果{'code': 1006, 'msg': '促销结束时间格式不正确'}
2021-12-16 12:52:52,526-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:52,718-[test_business_goods_promote03.py - 60]-ERROR:测试案列15，测试标题促销设置接口_promoteEndTime日期超过31,执行失败!实际结果{'code': 1006, 'msg': '促销结束时间格式不正确'}
2021-12-16 12:52:52,718-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:53,036-[test_business_goods_promote03.py - 60]-ERROR:测试案列19，测试标题促销设置接口_promoteEndTime小于promoteStartTime,执行失败!实际结果{'code': 1009, 'msg': '促销结束时间必须大于等于促销开始时间'}
2021-12-16 12:52:53,037-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:53,234-[test_business_goods_promote03.py - 60]-ERROR:测试案列20，测试标题促销设置接口_goodsId为非6位数字,执行失败!实际结果{'code': 1007, 'msg': '商品编号格式不正确'}
2021-12-16 12:52:53,235-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:53,402-[test_business_goods_promote03.py - 60]-ERROR:测试案列21，测试标题促销设置接口_goodsId为非数字,执行失败!实际结果{'code': 1007, 'msg': '商品编号格式不正确'}
2021-12-16 12:52:53,402-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:53,570-[test_business_goods_promote03.py - 60]-ERROR:测试案列22，测试标题促销设置接口_goodsId为空,执行失败!实际结果{'code': 1004, 'msg': '商品编号不能为空'}
2021-12-16 12:52:53,570-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:52:53,749-[test_business_goods_promote03.py - 60]-ERROR:测试案列23，测试标题促销设置接口_goodsId不存在,执行失败!实际结果{'code': 1011, 'msg': '该商品不存在'}
2021-12-16 12:52:53,749-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:50,458-[test_business_goods_promote03.py - 60]-ERROR:测试案列2，测试标题促销设置接口_promoteStartTime为空,执行失败!实际结果{'code': 1002, 'msg': '促销开始时间不能为空'}
2021-12-16 12:53:50,458-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:50,616-[test_business_goods_promote03.py - 60]-ERROR:测试案列3，测试标题促销设置接口_promoteStartTime年月日不完整,执行失败!实际结果{'code': 1005, 'msg': '促销开始时间格式不正确'}
2021-12-16 12:53:50,617-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:50,788-[test_business_goods_promote03.py - 60]-ERROR:测试案列4，测试标题促销设置接口_promoteStartTime输入非数字,执行失败!实际结果{'code': 1005, 'msg': '促销开始时间格式不正确'}
2021-12-16 12:53:50,788-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:50,953-[test_business_goods_promote03.py - 60]-ERROR:测试案列5，测试标题促销设置接口_promoteStartTime月份超过12,执行失败!实际结果{'code': 1005, 'msg': '促销开始时间格式不正确'}
2021-12-16 12:53:50,953-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:51,125-[test_business_goods_promote03.py - 60]-ERROR:测试案列6，测试标题促销设置接口_promoteStartTime日期超过31,执行失败!实际结果{'code': 1005, 'msg': '促销开始时间格式不正确'}
2021-12-16 12:53:51,125-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:51,461-[test_business_goods_promote03.py - 60]-ERROR:测试案列10，测试标题促销设置接口_promoteStartTime小于当前时间,执行失败!实际结果{'code': 1008, 'msg': '促销开始时间必须大于当前时间'}
2021-12-16 12:53:51,462-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:51,674-[test_business_goods_promote03.py - 60]-ERROR:测试案列11，测试标题促销设置接口_promoteEndTime为空,执行失败!实际结果{'code': 1003, 'msg': '促销结束时间不能为空'}
2021-12-16 12:53:51,674-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:51,862-[test_business_goods_promote03.py - 60]-ERROR:测试案列12，测试标题促销设置接口_promoteEndTime年月日不完整,执行失败!实际结果{'code': 1006, 'msg': '促销结束时间格式不正确'}
2021-12-16 12:53:51,862-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:52,038-[test_business_goods_promote03.py - 60]-ERROR:测试案列13，测试标题促销设置接口_promoteEndTime输入非数字,执行失败!实际结果{'code': 1006, 'msg': '促销结束时间格式不正确'}
2021-12-16 12:53:52,038-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:52,216-[test_business_goods_promote03.py - 60]-ERROR:测试案列14，测试标题促销设置接口_promoteEndTime月份超过12,执行失败!实际结果{'code': 1006, 'msg': '促销结束时间格式不正确'}
2021-12-16 12:53:52,217-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:52,381-[test_business_goods_promote03.py - 60]-ERROR:测试案列15，测试标题促销设置接口_promoteEndTime日期超过31,执行失败!实际结果{'code': 1006, 'msg': '促销结束时间格式不正确'}
2021-12-16 12:53:52,381-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:52,650-[test_business_goods_promote03.py - 60]-ERROR:测试案列19，测试标题促销设置接口_promoteEndTime小于promoteStartTime,执行失败!实际结果{'code': 1009, 'msg': '促销结束时间必须大于等于促销开始时间'}
2021-12-16 12:53:52,650-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:52,850-[test_business_goods_promote03.py - 60]-ERROR:测试案列20，测试标题促销设置接口_goodsId为非6位数字,执行失败!实际结果{'code': 1007, 'msg': '商品编号格式不正确'}
2021-12-16 12:53:52,850-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:53,015-[test_business_goods_promote03.py - 60]-ERROR:测试案列21，测试标题促销设置接口_goodsId为非数字,执行失败!实际结果{'code': 1007, 'msg': '商品编号格式不正确'}
2021-12-16 12:53:53,015-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:53,209-[test_business_goods_promote03.py - 60]-ERROR:测试案列22，测试标题促销设置接口_goodsId为空,执行失败!实际结果{'code': 1004, 'msg': '商品编号不能为空'}
2021-12-16 12:53:53,209-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 12:53:53,389-[test_business_goods_promote03.py - 60]-ERROR:测试案列23，测试标题促销设置接口_goodsId不存在,执行失败!实际结果{'code': 1011, 'msg': '该商品不存在'}
2021-12-16 12:53:53,389-[test_business_goods_promote03.py - 61]-ERROR:1 != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote06\test_business_goods_promote03.py", line 54, in testgoodspromote
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0
2021-12-16 15:43:06,022-[test_business_goods_delete01.py - 44]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
2021-12-16 15:43:06,023-[test_business_goods_delete01.py - 45]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^              --

+ {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ++  ++++++++
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete01.py", line 41, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^              --

+ {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ++  ++++++++

2021-12-16 15:43:17,400-[test_business_goods_delete01.py - 44]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
2021-12-16 15:43:17,400-[test_business_goods_delete01.py - 45]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^              --

+ {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ++  ++++++++
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete01.py", line 41, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^              --

+ {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ++  ++++++++

2021-12-16 15:43:25,582-[test_business_goods_delete01.py - 44]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
2021-12-16 15:43:25,582-[test_business_goods_delete01.py - 45]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^              --

+ {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ++  ++++++++
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete01.py", line 41, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^              --

+ {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ++  ++++++++

2021-12-16 15:43:30,368-[test_business_goods_delete01.py - 49]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 16:05:35,140-[test_business_goods_delete02.py - 60]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 16:05:35,140-[test_business_goods_delete02.py - 61]-ERROR:1 != None
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 55, in testgoodsdelete
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != None
2021-12-16 16:06:04,000-[test_business_goods_delete02.py - 60]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 16:06:04,000-[test_business_goods_delete02.py - 61]-ERROR:1 != None
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 55, in testgoodsdelete
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != None
2021-12-16 16:06:05,814-[test_business_goods_delete02.py - 60]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 16:06:05,815-[test_business_goods_delete02.py - 61]-ERROR:1 != None
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 55, in testgoodsdelete
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != None
2021-12-16 16:06:18,002-[test_business_goods_delete02.py - 60]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 16:06:18,002-[test_business_goods_delete02.py - 61]-ERROR:1 != None
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 55, in testgoodsdelete
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != None
2021-12-16 16:06:29,757-[test_business_goods_delete02.py - 60]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 16:06:29,757-[test_business_goods_delete02.py - 61]-ERROR:1 != None
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 55, in testgoodsdelete
    self.assertEqual(1, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != None
2021-12-16 16:21:57,311-[test_business_goods_delete02.py - 61]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 16:21:57,311-[test_business_goods_delete02.py - 62]-ERROR:0 != None
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 56, in testgoodsdelete
    self.assertEqual(0, count)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != None
2021-12-16 16:22:21,077-[test_business_goods_delete02.py - 61]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 16:22:21,077-[test_business_goods_delete02.py - 62]-ERROR:None != 0
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 56, in testgoodsdelete
    self.assertEqual(count, 0)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: None != 0
2021-12-16 16:30:40,179-[test_business_goods_delete02.py - 66]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 16:48:14,245-[test_business_goods_delete02.py - 70]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 16:48:24,609-[test_business_goods_delete02.py - 70]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 16:48:34,629-[test_business_goods_delete02.py - 70]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 18:00:47,540-[test_business_goods_delete02.py - 65]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:00:47,541-[test_business_goods_delete02.py - 66]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 54, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:01:09,997-[test_business_goods_delete02.py - 64]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:01:09,997-[test_business_goods_delete02.py - 65]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 53, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:03:59,111-[test_business_goods_delete02.py - 64]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:03:59,111-[test_business_goods_delete02.py - 65]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 53, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:05:03,569-[test_business_goods_delete02.py - 67]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:05:03,569-[test_business_goods_delete02.py - 68]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 56, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:06:04,520-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:06:04,520-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:06:39,220-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:06:39,220-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:07:52,388-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:07:52,388-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:08:21,016-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:08:21,016-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:09:29,052-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:09:29,052-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:10:06,720-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:10:06,720-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:10:54,988-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:10:54,988-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:18:58,244-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:18:58,245-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:19:45,768-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:19:45,769-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:19:58,765-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:19:58,765-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:20:57,703-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:20:57,703-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:21:00,516-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:21:00,516-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:22:19,144-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:22:19,144-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:22:37,612-[test_business_goods_delete02.py - 75]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:22:37,612-[test_business_goods_delete02.py - 76]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:25:52,106-[test_business_goods_delete02.py - 75]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:25:52,106-[test_business_goods_delete02.py - 76]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 63, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:31:35,081-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:31:35,081-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 62, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:31:50,879-[test_business_goods_delete02.py - 74]-ERROR:测试案例1,测试标题删除商品接口主流程,执行失败!实际结果{'code': 1003, 'msg': '商品编号格式不正确'}
2021-12-16 18:31:50,879-[test_business_goods_delete02.py - 75]-ERROR:{'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete02.py", line 62, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1003, 'msg': '商品编号格式不正确'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1003, 'msg': '商品编号格式不正确'}
?             ^            ^^^^^^^

2021-12-16 18:32:27,660-[test_business_goods_delete02.py - 79]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 18:32:41,313-[test_business_goods_delete02.py - 79]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 18:45:09,242-[test_business_goods_delete02.py - 79]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 19:04:59,220-[test_business_goods_delete03.py - 82]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 19:05:12,771-[test_business_goods_delete03.py - 82]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 19:05:12,989-[test_business_goods_delete03.py - 77]-ERROR:测试案例2,测试标题商品未下架,执行失败!实际结果{'code': 1004, 'msg': '该商品不存在'}
2021-12-16 19:05:12,989-[test_business_goods_delete03.py - 78]-ERROR:{'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ^^  ----- ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          ^   ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete03.py", line 65, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ^^  ----- ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          ^   ^^

2021-12-16 19:05:13,160-[test_business_goods_delete03.py - 82]-ERROR:测试案例3,测试标题商品编号为空,执行成功
2021-12-16 19:05:13,321-[test_business_goods_delete03.py - 82]-ERROR:测试案例4,测试标题商品编号非6位数字,执行成功
2021-12-16 19:05:13,484-[test_business_goods_delete03.py - 82]-ERROR:测试案例5,测试标题商品编号非数字,执行成功
2021-12-16 19:05:13,711-[test_business_goods_delete03.py - 82]-ERROR:测试案例6,测试标题商品编号不存在,执行成功
2021-12-16 19:05:44,120-[test_business_goods_delete03.py - 82]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 19:05:44,296-[test_business_goods_delete03.py - 77]-ERROR:测试案例2,测试标题商品未下架,执行失败!实际结果{'code': 1004, 'msg': '该商品不存在'}
2021-12-16 19:05:44,296-[test_business_goods_delete03.py - 78]-ERROR:{'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ^^  ----- ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          ^   ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete03.py", line 65, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ^^  ----- ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          ^   ^^

2021-12-16 19:05:44,477-[test_business_goods_delete03.py - 82]-ERROR:测试案例3,测试标题商品编号为空,执行成功
2021-12-16 19:05:44,674-[test_business_goods_delete03.py - 82]-ERROR:测试案例4,测试标题商品编号非6位数字,执行成功
2021-12-16 19:05:44,853-[test_business_goods_delete03.py - 82]-ERROR:测试案例5,测试标题商品编号非数字,执行成功
2021-12-16 19:05:45,030-[test_business_goods_delete03.py - 82]-ERROR:测试案例6,测试标题商品编号不存在,执行成功
2021-12-16 19:06:02,286-[test_business_goods_delete03.py - 82]-ERROR:测试案例1,测试标题删除商品接口主流程,执行成功
2021-12-16 19:06:02,442-[test_business_goods_delete03.py - 77]-ERROR:测试案例2,测试标题商品未下架,执行失败!实际结果{'code': 1004, 'msg': '该商品不存在'}
2021-12-16 19:06:02,442-[test_business_goods_delete03.py - 78]-ERROR:{'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ^^  ----- ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          ^   ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete03.py", line 65, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ^^  ----- ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          ^   ^^

2021-12-16 19:06:02,600-[test_business_goods_delete03.py - 82]-ERROR:测试案例3,测试标题商品编号为空,执行成功
2021-12-16 19:06:02,804-[test_business_goods_delete03.py - 82]-ERROR:测试案例4,测试标题商品编号非6位数字,执行成功
2021-12-16 19:06:03,000-[test_business_goods_delete03.py - 82]-ERROR:测试案例5,测试标题商品编号非数字,执行成功
2021-12-16 19:06:03,162-[test_business_goods_delete03.py - 82]-ERROR:测试案例6,测试标题商品编号不存在,执行成功
2021-12-16 19:11:54,419-[test_business_goods_delete03.py - 82]-ERROR:测试案例1,测试标题商品删除主流程,执行成功
2021-12-16 19:11:54,581-[test_business_goods_delete03.py - 82]-ERROR:测试案例2,测试标题商品编号为空,执行成功
2021-12-16 19:11:54,743-[test_business_goods_delete03.py - 82]-ERROR:测试案例3,测试标题商品编号为正确有效编号带空格,执行成功
2021-12-16 19:11:54,902-[test_business_goods_delete03.py - 82]-ERROR:测试案例4,测试标题商品编号为0+正确有效编号,执行成功
2021-12-16 19:11:55,076-[test_business_goods_delete03.py - 82]-ERROR:测试案例5,测试标题商品编号为6位含汉字的编号,执行成功
2021-12-16 19:11:55,257-[test_business_goods_delete03.py - 77]-ERROR:测试案例6,测试标题商品未下架状态的商品编号,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 19:11:55,257-[test_business_goods_delete03.py - 78]-ERROR:{'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1000, 'msg': '商品删除成功'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          --  --------

+ {'code': 1000, 'msg': '商品删除成功'}
?             ^              ++
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete03.py", line 65, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1000, 'msg': '商品删除成功'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          --  --------

+ {'code': 1000, 'msg': '商品删除成功'}
?             ^              ++

2021-12-16 19:11:55,485-[test_business_goods_delete03.py - 82]-ERROR:测试案例7,测试标题商品编号为不存在的的场景,执行成功
2021-12-16 19:12:42,437-[test_business_goods_delete03.py - 82]-ERROR:测试案例1,测试标题商品删除主流程,执行成功
2021-12-16 19:12:42,603-[test_business_goods_delete03.py - 82]-ERROR:测试案例2,测试标题商品编号为空,执行成功
2021-12-16 19:12:42,762-[test_business_goods_delete03.py - 82]-ERROR:测试案例3,测试标题商品编号为正确有效编号带空格,执行成功
2021-12-16 19:12:42,919-[test_business_goods_delete03.py - 82]-ERROR:测试案例4,测试标题商品编号为0+正确有效编号,执行成功
2021-12-16 19:12:43,096-[test_business_goods_delete03.py - 82]-ERROR:测试案例5,测试标题商品编号为6位含汉字的编号,执行成功
2021-12-16 19:12:43,308-[test_business_goods_delete03.py - 77]-ERROR:测试案例6,测试标题商品未下架状态的商品编号,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 19:12:43,309-[test_business_goods_delete03.py - 78]-ERROR:{'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1000, 'msg': '商品删除成功'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          --  --------

+ {'code': 1000, 'msg': '商品删除成功'}
?             ^              ++
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete03.py", line 65, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1000, 'msg': '商品删除成功'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          --  --------

+ {'code': 1000, 'msg': '商品删除成功'}
?             ^              ++

2021-12-16 19:12:43,469-[test_business_goods_delete03.py - 82]-ERROR:测试案例7,测试标题商品编号为不存在的的场景,执行成功
2021-12-16 19:13:31,746-[test_business_goods_delete03.py - 77]-ERROR:测试案例6,测试标题商品未下架状态的商品编号,执行失败!实际结果{'code': 1004, 'msg': '该商品不存在'}
2021-12-16 19:13:31,746-[test_business_goods_delete03.py - 78]-ERROR:{'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ^^  ----- ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          ^   ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete03.py", line 65, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ^^  ----- ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          ^   ^^

2021-12-16 19:15:16,854-[test_business_goods_delete03.py - 77]-ERROR:测试案例6,测试标题商品未下架状态的商品编号,执行失败!实际结果{'code': 1000, 'msg': '商品删除成功'}
2021-12-16 19:15:16,854-[test_business_goods_delete03.py - 78]-ERROR:{'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1000, 'msg': '商品删除成功'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          --  --------

+ {'code': 1000, 'msg': '商品删除成功'}
?             ^              ++
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_delete07\test_business_goods_delete03.py", line 65, in testgoodsdelete
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': '当前商品没有下架，不允许删除'} != {'code': 1000, 'msg': '商品删除成功'}
- {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          --  --------

+ {'code': 1000, 'msg': '商品删除成功'}
?             ^              ++

2021-12-16 19:17:27,996-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}]}
2021-12-16 19:17:27,996-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1068 chars]88}]}
Diff is 2267 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1068 chars]88}]}
Diff is 2267 characters long. Set self.maxDiff to None to see it.
2021-12-16 19:17:28,160-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}]}
2021-12-16 19:17:28,160-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1068 chars]88}]}
Diff is 2267 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1068 chars]88}]}
Diff is 2267 characters long. Set self.maxDiff to None to see it.
2021-12-16 19:17:29,053-[test_token_goodsinfo3.py - 85]-ERROR:测试案例9,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:17:29,053-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 62, in test_goods_info
    self.assertIn(case.expect, str(res))  # 判断响应体包含 查询成功
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:17:29,915-[test_token_goodsinfo3.py - 85]-ERROR:测试案例14,测试用例标题商品信息查询—（带商品）销售状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:17:29,915-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:17:30,118-[test_token_goodsinfo3.py - 85]-ERROR:测试案例15,测试用例标题商品信息查询—（带商品）促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:17:30,118-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:17:30,281-[test_token_goodsinfo3.py - 85]-ERROR:测试案例16,测试用例标题商品信息查询—（带商品）促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:17:30,281-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:17:30,480-[test_token_goodsinfo3.py - 85]-ERROR:测试案例17,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:17:30,480-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:17:30,637-[test_token_goodsinfo3.py - 85]-ERROR:测试案例18,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:17:30,637-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:17:30,806-[test_token_goodsinfo3.py - 85]-ERROR:测试案例19,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:17:30,807-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:17:30,991-[test_token_goodsinfo3.py - 85]-ERROR:测试案例20,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:17:30,991-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:17:36,874-[test_login5.py - 67]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzQ1Ni43MDk1ODg1Ojc4ZThjN2IwNTBkZjIyNjlmZTkxYjEwYTI4ODQzNDFhZDJjNTliNzk='}
2021-12-16 19:17:36,874-[test_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzQ1N[64 chars]zk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4MzQ1Ni43MDk1ODg1Ojc4ZThjN2IwNTBkZjIyNjlmZTkxYjEwYTI4ODQzNDFhZDJjNTliNzk='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\test_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzQ1N[64 chars]zk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4MzQ1Ni43MDk1ODg1Ojc4ZThjN2IwNTBkZjIyNjlmZTkxYjEwYTI4ODQzNDFhZDJjNTliNzk='}
2021-12-16 19:17:37,539-[test_login5.py - 67]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzQ1Ny4zNjA3MzY6ZDdmMzBiMjNkMGU0NjFkM2ExYmQ4YThhN2Y4NmQ3Mjg4ZmYzMTk3OA=='}
2021-12-16 19:17:37,539-[test_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzQ1N[64 chars]A=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4MzQ1Ny4zNjA3MzY6ZDdmMzBiMjNkMGU0NjFkM2ExYmQ4YThhN2Y4NmQ3Mjg4ZmYzMTk3OA=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\test_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzQ1N[64 chars]A=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4MzQ1Ny4zNjA3MzY6ZDdmMzBiMjNkMGU0NjFkM2ExYmQ4YThhN2Y4NmQ3Mjg4ZmYzMTk3OA=='}
2021-12-16 19:17:40,715-[test_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:17:40,716-[test_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:17:41,539-[test_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:17:41,539-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:17:42,318-[test_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:17:42,319-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:17:42,495-[test_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:17:42,496-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:17:42,671-[test_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:17:42,671-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:17:43,306-[test_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-16 19:17:43,306-[test_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-16 19:17:43,472-[test_business_token_goods_input03.py - 59]-ERROR:测试案例1,测试标题商品信息录入主流程,执行失败!实际结果{'code': 9999, 'msg': '商品录入失败'}
2021-12-16 19:17:43,472-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 9999, 'msg': '商品录入失败'}
- {'code': 1000, 'msg': '商品录入成功'}
?          ^^^^              ^^

+ {'code': 9999, 'msg': '商品录入失败'}
?          ^^^^              ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 9999, 'msg': '商品录入失败'}
- {'code': 1000, 'msg': '商品录入成功'}
?          ^^^^              ^^

+ {'code': 9999, 'msg': '商品录入失败'}
?          ^^^^              ^^

2021-12-16 19:17:44,554-[test_business_token_goods_input03.py - 59]-ERROR:测试案例7,测试标题商品录入接口商品名重复的场景,执行失败!实际结果{'code': 1000, 'msg': '商品录入成功'}
2021-12-16 19:17:44,554-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1000, 'msg': '商品录入成功'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^

+ {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1000, 'msg': '商品录入成功'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^

+ {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

2021-12-16 19:17:44,725-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-16 19:17:44,725-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-16 19:19:33,417-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下第一辣条', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-16 19:19:33,418-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1258 chars]20}]}
Diff is 2615 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1258 chars]20}]}
Diff is 2615 characters long. Set self.maxDiff to None to see it.
2021-12-16 19:19:33,597-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '小米12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'ttt', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 't12345678912345', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '天下第一辣条', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12 plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '小米12-/plus', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods1', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods2', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': 'testgoods3', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 0}, {'goodsName': 'testgoods4', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 20}]}
2021-12-16 19:19:33,598-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1258 chars]20}]}
Diff is 2615 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[1258 chars]20}]}
Diff is 2615 characters long. Set self.maxDiff to None to see it.
2021-12-16 19:19:34,481-[test_token_goodsinfo3.py - 85]-ERROR:测试案例9,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:34,482-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 62, in test_goods_info
    self.assertIn(case.expect, str(res))  # 判断响应体包含 查询成功
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:35,005-[test_token_goodsinfo3.py - 85]-ERROR:测试案例12,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:35,006-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 62, in test_goods_info
    self.assertIn(case.expect, str(res))  # 判断响应体包含 查询成功
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:35,344-[test_token_goodsinfo3.py - 85]-ERROR:测试案例14,测试用例标题商品信息查询—（带商品）销售状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:35,344-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:35,506-[test_token_goodsinfo3.py - 85]-ERROR:测试案例15,测试用例标题商品信息查询—（带商品）促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:35,507-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:35,669-[test_token_goodsinfo3.py - 85]-ERROR:测试案例16,测试用例标题商品信息查询—（带商品）促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:35,670-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:35,832-[test_token_goodsinfo3.py - 85]-ERROR:测试案例17,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:35,832-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:35,993-[test_token_goodsinfo3.py - 85]-ERROR:测试案例18,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:35,993-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:36,171-[test_token_goodsinfo3.py - 85]-ERROR:测试案例19,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:36,171-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:36,379-[test_token_goodsinfo3.py - 85]-ERROR:测试案例20,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-16 19:19:36,379-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-16 19:19:42,163-[test_login5.py - 67]-ERROR:测试编号4,测试用例标题登录用户名大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzU4Mi4wMDM1OTM3OmRjOTlmYzEzM2UwOTEyN2FhY2RjZjAxN2ZmYTcyMmYzNjI2OGNlNjU='}
2021-12-16 19:19:42,164-[test_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzU4M[64 chars]jU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4MzU4Mi4wMDM1OTM3OmRjOTlmYzEzM2UwOTEyN2FhY2RjZjAxN2ZmYTcyMmYzNjI2OGNlNjU='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\test_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzU4M[64 chars]jU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4MzU4Mi4wMDM1OTM3OmRjOTlmYzEzM2UwOTEyN2FhY2RjZjAxN2ZmYTcyMmYzNjI2OGNlNjU='}
2021-12-16 19:19:42,852-[test_login5.py - 67]-ERROR:测试编号8,测试用例标题登录密码大小写,执行失败！实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzU4Mi43MDYxNzM3OmFhYTJkMDY5OGVkZDRiYjk5MjE3NzZmY2Q1ZmY3M2UxMjY1ZDc1Njk='}
2021-12-16 19:19:42,853-[test_login5.py - 68]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzU4M[64 chars]jk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4MzU4Mi43MDYxNzM3OmFhYTJkMDY5OGVkZDRiYjk5MjE3NzZmY2Q1ZmY3M2UxMjY1ZDc1Njk='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\test_login5.py", line 64, in test_login
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4MzU4M[64 chars]jk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4MzU4Mi43MDYxNzM3OmFhYTJkMDY5OGVkZDRiYjk5MjE3NzZmY2Q1ZmY3M2UxMjY1ZDc1Njk='}
2021-12-16 19:19:46,092-[test_register03.py - 68]-ERROR:测试编号17,测试用例注册接口手机号为不支持号段的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:19:46,093-[test_register03.py - 69]-ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:19:46,855-[test_register03.py - 68]-ERROR:测试编号22,测试用例注册接口生日为超过当天的场景,执行失败！实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:19:46,855-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:19:47,677-[test_register03.py - 68]-ERROR:测试编号27,测试用例注册接口生日为2021-02-30的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:19:47,678-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:19:47,832-[test_register03.py - 68]-ERROR:测试编号28,测试用例注册接口生日为2021-09-31的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:19:47,833-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:19:48,000-[test_register03.py - 68]-ERROR:测试编号29,测试用例注册接口生日为2021-02-29的场景,执行失败！实际结果{'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:19:48,001-[test_register03.py - 69]-ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 9999, 'msg': '插入用户数据失败'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 9999, 'msg': '插入用户数据失败'}
2021-12-16 19:19:48,679-[test_register03.py - 68]-ERROR:测试编号33,测试用例注册接口手机号已注册的场景,执行失败！实际结果{'code': 1000, 'msg': '注册成功'}
2021-12-16 19:19:48,680-[test_register03.py - 69]-ERROR:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\test_register03.py", line 61, in test_register
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}
2021-12-16 19:19:50,062-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-16 19:19:50,062-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-16 19:51:50,766-[New_test_register04.py - 47]-ERROR:测试案例1,测试标题测试主流程,执行失败!实际结果{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:51:50,766-[New_test_register04.py - 48]-ERROR:{'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register02\New_test_register04.py", line 41, in testregister
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-12-16 19:54:49,092-[NEW_test_business_Login.py - 45]-ERROR:测试用例4,测试标题登录用户名大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTY4OC44MjM3MzQzOjhmNDJkZGNiZjMyNGQxNmU0MTcxNzQ5Nzc5MGNlOGRjNzM5MWRjY2M='}
2021-12-16 19:54:49,092-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTY4O[64 chars]2M='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTY4OC44MjM3MzQzOjhmNDJkZGNiZjMyNGQxNmU0MTcxNzQ5Nzc5MGNlOGRjNzM5MWRjY2M='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTY4O[64 chars]2M='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTY4OC44MjM3MzQzOjhmNDJkZGNiZjMyNGQxNmU0MTcxNzQ5Nzc5MGNlOGRjNzM5MWRjY2M='}
2021-12-16 19:54:50,039-[NEW_test_business_Login.py - 45]-ERROR:测试用例8,测试标题登录密码大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTY4OS44MjA1NTY0OjllYTA0NGE5NDQ5NTc5Y2Y5NzI4MjM5N2VhYzY5YmJiYTM1NTkxYjI='}
2021-12-16 19:54:50,040-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTY4O[64 chars]jI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTY4OS44MjA1NTY0OjllYTA0NGE5NDQ5NTc5Y2Y5NzI4MjM5N2VhYzY5YmJiYTM1NTkxYjI='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTY4O[64 chars]jI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTY4OS44MjA1NTY0OjllYTA0NGE5NDQ5NTc5Y2Y5NzI4MjM5N2VhYzY5YmJiYTM1NTkxYjI='}
2021-12-16 19:55:54,276-[NEW_test_business_Login.py - 45]-ERROR:测试用例4,测试标题登录用户名大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc1NC4wOTc5ODA3Ojk1MTc0ZTQyNjFiNDIxMjRlYWVjNWMwNzZhZGQ4NDEwNGY2Njc0Yjg='}
2021-12-16 19:55:54,276-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc1N[64 chars]jg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTc1NC4wOTc5ODA3Ojk1MTc0ZTQyNjFiNDIxMjRlYWVjNWMwNzZhZGQ4NDEwNGY2Njc0Yjg='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc1N[64 chars]jg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTc1NC4wOTc5ODA3Ojk1MTc0ZTQyNjFiNDIxMjRlYWVjNWMwNzZhZGQ4NDEwNGY2Njc0Yjg='}
2021-12-16 19:55:55,108-[NEW_test_business_Login.py - 45]-ERROR:测试用例8,测试标题登录密码大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc1NC44ODA4ODg6OTczZTlkMTg1ZjlkMzkxYjgxZmRmYjEzMzZkZWFlMzU1M2RmODcyZQ=='}
2021-12-16 19:55:55,108-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc1N[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTc1NC44ODA4ODg6OTczZTlkMTg1ZjlkMzkxYjgxZmRmYjEzMzZkZWFlMzU1M2RmODcyZQ=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc1N[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTc1NC44ODA4ODg6OTczZTlkMTg1ZjlkMzkxYjgxZmRmYjEzMzZkZWFlMzU1M2RmODcyZQ=='}
2021-12-16 19:56:11,238-[NEW_test_business_Login.py - 45]-ERROR:测试用例4,测试标题登录用户名大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc3MS4wNTY0NzY4OmIyMjA5YWU4ZTgyMmU2YzhiYjk1NDM5NTM4ZmE1NDhiNTVlZjk1ODc='}
2021-12-16 19:56:11,238-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc3M[64 chars]Dc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTc3MS4wNTY0NzY4OmIyMjA5YWU4ZTgyMmU2YzhiYjk1NDM5NTM4ZmE1NDhiNTVlZjk1ODc='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc3M[64 chars]Dc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTc3MS4wNTY0NzY4OmIyMjA5YWU4ZTgyMmU2YzhiYjk1NDM5NTM4ZmE1NDhiNTVlZjk1ODc='}
2021-12-16 19:56:12,034-[NEW_test_business_Login.py - 45]-ERROR:测试用例8,测试标题登录密码大小写,执行失败!实际结果{'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc3MS44NDQxNTk2Ojg2YjdkM2FlZjJkZWU0MTEyZThlNGY2ZmRiOGVhMTk1YWY2ZjY4Yjc='}
2021-12-16 19:56:12,035-[NEW_test_business_Login.py - 46]-ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc3M[64 chars]jc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTc3MS44NDQxNTk2Ojg2YjdkM2FlZjJkZWU0MTEyZThlNGY2ZmRiOGVhMTk1YWY2ZjY4Yjc='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_login01\NEW_test_business_Login.py", line 42, in testlogin
    self.assertEqual(eval(case.expect),res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzOTY4NTc3M[64 chars]jc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzOTY4NTc3MS44NDQxNTk2Ojg2YjdkM2FlZjJkZWU0MTEyZThlNGY2ZmRiOGVhMTk1YWY2ZjY4Yjc='}
2021-12-17 09:09:00,275-[Ftest_business_goods_delete02.py - 79]-ERROR:测试案例1,测试标题商品删除主流程,执行成功
2021-12-17 09:09:06,950-[Ftest_business_goods_delete02.py - 79]-ERROR:测试案例1,测试标题商品删除主流程,执行成功
2021-12-17 09:11:08,682-[Ftest_business_goods_delete02.py - 79]-ERROR:测试案例1,测试标题商品删除主流程,执行成功
2021-12-20 15:32:53,303-[Ftest_business_token_goods_input01.py - 33]-ERROR:测试案例1,测试标题商品信息录入主流程,执行失败!实际结果{'code': 1013, 'msg': '产品名称不能重复'}
2021-12-20 15:32:53,305-[Ftest_business_token_goods_input01.py - 34]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\Ftest_business_token_goods_input01.py", line 30, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^

2021-12-20 16:02:12,094-[Ftest_token_goodsinfo2.py - 97]-ERROR:测试编号3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}]}
2021-12-20 16:02:12,095-[Ftest_token_goodsinfo2.py - 98]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\Ftest_token_goodsinfo2.py", line 94, in test_goods_info
    self.assertEqual(eval(case.expect), res)  # 响应体的商品条目和数据库的商品条目数做对比
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
2021-12-20 16:02:12,354-[Ftest_token_goodsinfo2.py - 97]-ERROR:测试编号4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}]}
2021-12-20 16:02:12,354-[Ftest_token_goodsinfo2.py - 98]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\Ftest_token_goodsinfo2.py", line 94, in test_goods_info
    self.assertEqual(eval(case.expect), res)  # 响应体的商品条目和数据库的商品条目数做对比
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
2021-12-20 16:03:55,147-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}]}
2021-12-20 16:03:55,147-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
2021-12-20 16:03:55,353-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}]}
2021-12-20 16:03:55,353-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
2021-12-20 16:03:56,305-[test_token_goodsinfo3.py - 85]-ERROR:测试案例9,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:56,305-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 62, in test_goods_info
    self.assertIn(case.expect, str(res))  # 判断响应体包含 查询成功
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:03:56,847-[test_token_goodsinfo3.py - 85]-ERROR:测试案例12,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:56,847-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 62, in test_goods_info
    self.assertIn(case.expect, str(res))  # 判断响应体包含 查询成功
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:03:57,194-[test_token_goodsinfo3.py - 85]-ERROR:测试案例14,测试用例标题商品信息查询—（带商品）销售状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:57,194-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:03:57,371-[test_token_goodsinfo3.py - 85]-ERROR:测试案例15,测试用例标题商品信息查询—（带商品）促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:57,371-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:03:57,592-[test_token_goodsinfo3.py - 85]-ERROR:测试案例16,测试用例标题商品信息查询—（带商品）促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:57,592-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:03:57,780-[test_token_goodsinfo3.py - 85]-ERROR:测试案例17,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:57,780-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:03:57,938-[test_token_goodsinfo3.py - 85]-ERROR:测试案例18,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:57,938-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:03:58,148-[test_token_goodsinfo3.py - 85]-ERROR:测试案例19,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:58,148-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:03:58,306-[test_token_goodsinfo3.py - 85]-ERROR:测试案例20,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:03:58,306-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:46,911-[test_token_goodsinfo3.py - 85]-ERROR:测试案例3,测试用例标题商品信息查询—token区分大小写,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}]}
2021-12-20 16:04:46,911-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
2021-12-20 16:04:47,091-[test_token_goodsinfo3.py - 85]-ERROR:测试案例4,测试用例标题商品信息查询—上一次token值,执行失败!实际结果{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '华为3', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 2000}, {'goodsName': '狮子', 'shopPrice': 999999.0, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为12', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '华为13', 'shopPrice': 1899.99, 'promotePrice': 0.0, 'num': 99}, {'goodsName': '苹果1', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 8888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}, {'goodsName': '天下非公开', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 88888888}]}
2021-12-20 16:04:47,091-[test_token_goodsinfo3.py - 86]-ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 80, in test_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[526 chars]88}]}
Diff is 1172 characters long. Set self.maxDiff to None to see it.
2021-12-20 16:04:47,957-[test_token_goodsinfo3.py - 85]-ERROR:测试案例9,测试用例标题商品信息查询—（不带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:47,957-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 62, in test_goods_info
    self.assertIn(case.expect, str(res))  # 判断响应体包含 查询成功
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:48,498-[test_token_goodsinfo3.py - 85]-ERROR:测试案例12,测试用例标题商品信息查询—（不带商品）销售状态为1、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:48,498-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 62, in test_goods_info
    self.assertIn(case.expect, str(res))  # 判断响应体包含 查询成功
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:48,834-[test_token_goodsinfo3.py - 85]-ERROR:测试案例14,测试用例标题商品信息查询—（带商品）销售状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:48,834-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:48,990-[test_token_goodsinfo3.py - 85]-ERROR:测试案例15,测试用例标题商品信息查询—（带商品）促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:48,990-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:49,187-[test_token_goodsinfo3.py - 85]-ERROR:测试案例16,测试用例标题商品信息查询—（带商品）促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:49,187-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:49,362-[test_token_goodsinfo3.py - 85]-ERROR:测试案例17,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:49,362-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:49,517-[test_token_goodsinfo3.py - 85]-ERROR:测试案例18,测试用例标题商品信息查询—（带商品）销售状态为0、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:49,517-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:49,733-[test_token_goodsinfo3.py - 85]-ERROR:测试案例19,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为0,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:49,733-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-20 16:04:49,914-[test_token_goodsinfo3.py - 85]-ERROR:测试案例20,测试用例标题商品信息查询—（带商品）销售状态为1、促销状态为1,执行失败!实际结果{'code': 1008, 'msg': '没有符合条件的数据'}
2021-12-20 16:04:49,914-[test_token_goodsinfo3.py - 86]-ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goodsInfo03\test_token_goodsinfo3.py", line 58, in test_goods_info
    self.assertIn(case.expect, str(res))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-12-21 20:12:06,811-[NEW_input.py - 28]-ERROR:测试案例1,测试标题商品信息录入主流程,执行失败!实际结果{'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2021-12-21 20:12:06,812-[NEW_input.py - 29]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
- {'code': 1000, 'msg': '商品录入成功'}
+ {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\NEW_input.py", line 25, in testgoodsinfo
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
- {'code': 1000, 'msg': '商品录入成功'}
+ {'code': 1011, 'msg': '鉴权失败,请检查token是否失效'}
2021-12-21 20:29:18,260-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-21 20:29:18,260-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2021-12-21 20:30:18,406-[test_business_token_goods_input03.py - 59]-ERROR:测试案例8,测试标题商品录入接口商品名重复商品类不重复的场景,执行失败!实际结果{'code': 1012, 'msg': '商品分类不存在'}
2021-12-21 20:30:18,406-[test_business_token_goods_input03.py - 60]-ERROR:{'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input05\test_business_token_goods_input03.py", line 50, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\python\PyCharm Community Edition 2021.2.3\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files\Python37\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files\Python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1012, 'msg': '商品分类不存在'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^            ^^^^

+ {'code': 1012, 'msg': '商品分类不存在'}
?            ^^            ^^^^^

2022-01-15 10:58:12,700-[log_utils.py - 47]-ERROR:error级别以上的日志信息
2022-01-15 10:59:37,724-[log_utils.py - 47]-ERROR:error级别以上的日志信息
